CREATE OR ALTER PROCEDURE DBO.SPQ_HADMCOL
@JSON NVARCHAR(MAX)
WITH ENCRYPTION
AS
DECLARE   @PARAMETROS            NVARCHAR(MAX) , @MODELO            VARCHAR(100) , @METODO                VARCHAR(100) , @REGISTRO         NVARCHAR(MAX)
		, @USUARIO				      VARCHAR(12)   , @GRUPO             VARCHAR(8)   , @PROCESO				    VARCHAR(20)
		, @NVOCONSEC               VARCHAR(20)   , @IDSEDE            VARCHAR(5)   , @NOADMISION            VARCHAR(16)  , @FECHA            VARCHAR(20)         
		, @HORA                    VARCHAR(10)   , @TTRIAGE           SMALLINT     , @CNSTRIAGE             VARCHAR(20)  , @EXPTRIAGE        VARCHAR(100)        
		, @TIPO_DOC                VARCHAR(3)    , @DOCIDAFILIADO     VARCHAR(20)  , @EDAD                  VARCHAR(20)  , @IDAFILIADO       VARCHAR(20)  
		, @NOMBREAFI               VARCHAR(100)  , @NIVELSOCIEC       VARCHAR(2)   , @IDTERCERO             VARCHAR(20)  , @RAZONSOCIALHADM  VARCHAR(255)    
		, @NITHADM                 VARCHAR(20)   , @IDPLAN            VARCHAR(6)   , @IDEMEDICAREMITE       VARCHAR(20)  , @CERRADA          SMALLINT    
		, @CNSHACTRAN              VARCHAR(20)   , @TIPOPOLIZA        VARCHAR(13)  , @NOPOLIZA              VARCHAR(20)  , @MARCA            SMALLINT    --HADM  
		, @HABCAMA                 VARCHAR(10)   , @IDTERCEROREMITE   VARCHAR(10)  , @CIUREMITE             VARCHAR(5)   , @FACTURADA        SMALLINT    
		, @RAZONSOCIALREMITE       VARCHAR(255)  , @NOMBRECIUREMITE   VARCHAR(200) , @TIPOESTANCIA          VARCHAR(20)  , @FACTURABLE       SMALLINT 
		, @TIPOESTANCIADESC        VARCHAR(100)  , @URG_VINCULO       VARCHAR(100) , @NOMBREIDEMEDICAREMITE VARCHAR(100) , @ITEMRPDX         INT 
		, @URG_NOMBRE              VARCHAR(100)  , @URG_TELE          VARCHAR(100) , @RESPCUENTA            VARCHAR(100) , @FECHAFACTURA     VARCHAR(10)
		, @NOMBRERESPO             VARCHAR(100)  , @TELEFONORESPO     VARCHAR(100) , @PARENTESCORESPO       VARCHAR(100) , @FECHAFACTURADT   DATETIME
		, @TIPOADM                 VARCHAR(2)    , @VIAINGRESO        VARCHAR(1)   , @CAUSAEXTERNA          VARCHAR(2)   , @ID2              VARCHAR(30) --RPDX
		, @MANCOPAGOEXTERNO        SMALLINT      , @NOAUTORIZACIONEXT VARCHAR(20)  , @VLR_COPAGOEXTERNO     DECIMAL(14,2), @ID6              VARCHAR(20)
		, @CNSRPDX                 VARCHAR(20)   , @ALTA              VARCHAR(20)  , @CODIGO                VARCHAR(20)  , @RPDXIDTERCERO    VARCHAR(20)
		, @SYS_COMPUTERNAME        VARCHAR(255)  , @CLASE             VARCHAR(2)   , @PERFACTURAR           TINYINT = 0  , @ID1              VARCHAR(20)
		, @SQL                     VARCHAR(MAX)  , @AUX               INT          , @CANTIDAD1             INT          , @CANTIDAD         INT
		, @FTRIDSEDE               VARCHAR(5)    , @HADMIDSEDE        VARCHAR(5)   , @CONTINUA              BIT          , @TIPOANEXO        VARCHAR(20)
		, @CLASEANEXO              VARCHAR(20)   , @IDCIRUGIA         VARCHAR(20)  , @PREFIJO               VARCHAR(6)   , @VECES            INT
		, @IMPRIMEIDALTERNA        VARCHAR(20)   , @NOMCIRUGIA        VARCHAR(255) , @TOTALPREFIJO          DECIMAL(14,2), @VLRCOPAGO        DECIMAL(14,2)
		, @VLRPCOMP                DECIMAL(14,2) , @VLR_COPAGOEXT     DECIMAL(14,2), @TOTALCOPAGOS          DECIMAL(14,2), @VRTOTAL          DECIMAL(14,2)
		, @VLRADMIN                DECIMAL(14,2) , @VLRABONOS         DECIMAL(14,2), @DTO                   DECIMAL(14,2), @SALDO            DECIMAL(14,2)
		, @TITAF                   VARCHAR(50)   , @AFAVOR            DECIMAL(14,2), @OBSERVACION           VARCHAR(254) , @URG_DIR          VARCHAR(60)
		, @SIRAS				   VARCHAR(20)	 , @ITEM			  INT		   , @VALORTOTAL			FLOAT		 , @CONSECUTIVO		 VARCHAR(20)
		, @IDFIRMA				   VARCHAR(50)	 , @copagoConsulta	DECIMAL(14,2)	, @copagoFarmaco	DECIMAL(14,2)	, @copagoExamen	DECIMAL(14,2)
		, @CNSLOG				   VARCHAR(20)   , @CMD				  NVARCHAR(MAX)	,@DATOSITEDS			NVARCHAR(MAX)	,@DETALLESITEDS NVARCHAR(MAX)
		, @IDCONSSITEDS			   INT
DECLARE @NOAUTORIZACION VARCHAR(20), @ESEINST VARCHAR(80), @FECHAESEINST VARCHAR(12), @TOPECOPAGO_ANX6 VARCHAR(20), @EMBARAZADA BIT
DECLARE @MINTOSMAXSINEPI VARCHAR(10)=dbo.FNK_VALORVARIABLE('MINTOSMAXSINEPI'), @NATUREVENTO VARCHAR(20), @IDMEDICO VARCHAR(20)
DECLARE @IDMEDICOTRA	VARCHAR(12)
		,@DXINGRESO		VARCHAR(10)
		,@DXEGRESO		VARCHAR(10)
		,@DXSALIDA1		VARCHAR(10)
		,@DXSALIDA2		VARCHAR(10)
		,@DXSALIDA3		VARCHAR(10)
		,@CCOSTO_ALTA	VARCHAR(20)
		,@ESTADOPSALIDA VARCHAR(6)
		,@DESTINO		VARCHAR(1)
		,@OBS			VARCHAR(254)
		,@CAUSABMUERTE	VARCHAR(10)
		,@FECHAALTAMED	VARCHAR(20)
		,@HORAALTAMED	VARCHAR(20)
		,@FECHAALTAENF	VARCHAR(20)
		,@HORAALTAENF	VARCHAR(20)
		,@FECHAALTA		VARCHAR(20)
		,@HORAALTA		VARCHAR(20)
		,@NOPRESTACION  VARCHAR(20)
		,@NOITEM		SMALLINT
DECLARE @FILTRO NVARCHAR(MAX), @ERROR VARCHAR(100) = '', @CNSREFE VARCHAR(20)

BEGIN
	SET DATEFORMAT dmy  
	--SELECT @JSON
	SELECT *
	INTO #JSON
	FROM OPENJSON (@json)
	WITH (
		MODELO VARCHAR(100) '$.MODELO',
		METODO VARCHAR(100) '$.METODO',
		USUARIO VARCHAR(20) '$.USUARIO',
		PARAMETROS NVARCHAR(MAX) AS JSON
	)HADM
	SELECT @MODELO = MODELO , @METODO = METODO , @PARAMETROS = PARAMETROS, @USUARIO = USUARIO
	FROM #JSON
	--DEFINICION DE TABLA DE ERRORES
	DECLARE @TBLERRORES TABLE(ERROR VARCHAR(200));
	-- TOMA DEL GRUPO, SYS_COMPUTERNAME, SEDE   DE ACUERDO AL USUARIO
	PRINT 'USUARIO:'+@USUARIO
	SELECT @GRUPO = DBO.FNK_DESCIFRAR(GRUPO) FROM USUSU WHERE USUARIO = @USUARIO
	SELECT @SYS_COMPUTERNAME = SYS_COMPUTERNAME, @IDMEDICO = IDMEDICO FROM USUSU WHERE USUARIO = @USUARIO
	SELECT @IDSEDE = IDSEDE FROM UBEQ WHERE SYS_ComputerName = @SYS_COMPUTERNAME
   
	IF @METODO = 'CONSULTAUNO'
	BEGIN
		SELECT @NOADMISION = NOADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION VARCHAR(20) '$.NOADMISION' )
		SELECT HADM.NOADMISION       ,HADM.IDSEDE          ,HADM.FECHA             ,HADM.TTRIAGE           ,HADM.CNSTRIAGE        
			,HTRIAGE.TRIAGE + ' '+CONVERT(VARCHAR(10), HTRIAGE.FECHA,103)+ ' '+  CONVERT(VARCHAR(10), HTRIAGE.FECHA,108) EXPTRIAGE         
			,AFI.TIPO_DOC     ,AFI.DOCIDAFILIADO   ,
			CONVERT(VARCHAR(20),CASE WHEN DATEDIFF(MONTH,FNACIMIENTO,GETDATE())<=0 THEN DATEDIFF(DAY,FNACIMIENTO,GETDATE()) 
									ELSE CASE WHEN DATEDIFF(YEAR,FNACIMIENTO,GETDATE())<=0 THEN DATEDIFF(MONTH,FNACIMIENTO,GETDATE()) 
											ELSE DATEDIFF(YEAR,FNACIMIENTO,GETDATE()) 
										END 
								END) + ' ('+ 
								CASE WHEN DATEDIFF(MONTH,FNACIMIENTO,GETDATE())<=0 THEN 'Dias'
									ELSE CASE WHEN DATEDIFF(YEAR,FNACIMIENTO,GETDATE())<=0 THEN 'Meses' 
											ELSE 'A?s' 
										END 
								END +')' EDAD              
			,HADM.IDAFILIADO  ,AFI.NOMBREAFI  ,HADM.NIVELSOCIOEC NIVELSOCIEC ,HADM.IDTERCERO ,TER.RAZONSOCIAL RAZONSOCIALHADM ,TER.NIT NITHADM, HADM.IDPLAN 
			,HADM.IDEMEDICAREMITE ,HADM.CNSHACTRAN ,HADM.TIPOPOLIZA ,HADM.NOPOLIZA  ,HADM.HABCAMA ,HADM.IDTERCEROREMITE   ,HADM.CIUREMITE ,TE1.RAZONSOCIAL RAZONSOCIALREMITE 
			,CIU.NOMBRE NOMBRECIUREMITE  ,HADM.TIPOESTANCIA    ,TGEN.DESCRIPCION TIPOESTANCIADESC  ,HADM.URG_VINCULO      ,MES.DESCRIPCION NOMBREIDEMEDICAREMITE ,HADM.URG_NOMBRE        
			,HADM.URG_TELE   ,HADM.RESPCUENTA      ,HADM.NOMBRERESPO       ,HADM.TELEFONORESPO     ,HADM.PARENTESCORESPO  ,HADM.TIPOADM
			,HADM.VIAINGRESO ,HADM.CAUSAEXTERNA    ,HADM.MANCOPAGOEXT MANCOPAGOEXTERNO  ,HADM.NOAUTORIZACIONEXT ,HADM.VLR_COPAGOEXTERNO   

		FROM   HADM LEFT JOIN HTRIAGE ON HADM.CNSTRIAGE  = HTRIAGE.CNSTRIAGE
					LEFT JOIN AFI     ON HADM.IDAFILIADO = AFI.IDAFILIADO
					LEFT JOIN TER     ON HADM.IDTERCERO  = TER.IDTERCERO
					LEFT JOIN TER TE1 ON HADM.IDTERCEROREMITE = TE1.IDTERCERO
					LEFT JOIN CIU     ON HADM.CIUREMITE       = CIU.CIUDAD
					LEFT JOIN TGEN    ON HADM.TIPOESTANCIA    = TGEN.CODIGO
									AND TGEN.TABLA = 'GENERAL'
									AND TGEN.CAMPO = 'CLASEHOSP'
					LEFT JOIN MES     ON HADM.IDEMEDICAREMITE = MES.IDEMEDICA
		WHERE  HADM.NOADMISION = @NOADMISION
		RETURN   
	END
	IF @METODO = 'INSERTAR'
	BEGIN
      
		SELECT  @IDSEDE                  =IDSEDE                , @FECHA           =FECHA           , @HORA             =HORA              , @TTRIAGE           =TTRIAGE              
			, @CNSTRIAGE             =CNSTRIAGE             , @EXPTRIAGE       =EXPTRIAGE       , @TIPO_DOC         =TIPO_DOC          , @DOCIDAFILIADO     =DOCIDAFILIADO        
			, @EDAD                  =EDAD                  , @IDAFILIADO      =IDAFILIADO      , @NOMBREAFI        =NOMBREAFI         , @NIVELSOCIEC       =NIVELSOCIEC          
			, @IDTERCERO             =IDTERCERO             , @RAZONSOCIALHADM =RAZONSOCIALHADM , @NITHADM          =NITHADM           , @IDPLAN            =IDPLAN               
			, @IDEMEDICAREMITE       =IDEMEDICAREMITE       , @CNSHACTRAN      =CNSHACTRAN      , @TIPOPOLIZA       =TIPOPOLIZA        , @NOPOLIZA          =NOPOLIZA             
			, @HABCAMA               =HABCAMA               , @IDTERCEROREMITE =IDTERCEROREMITE , @CIUREMITE        =CIUREMITE         , @RAZONSOCIALREMITE =RAZONSOCIALREMITE    
			, @NOMBRECIUREMITE       =NOMBRECIUREMITE       , @TIPOESTANCIA    =TIPOESTANCIA    , @TIPOESTANCIADESC =TIPOESTANCIADESC  , @URG_VINCULO       =URG_VINCULO          
			, @NOMBREIDEMEDICAREMITE =NOMBREIDEMEDICAREMITE , @URG_NOMBRE      =URG_NOMBRE      , @URG_TELE         =URG_TELE          , @RESPCUENTA        =RESPCUENTA           
			, @NOMBRERESPO           =NOMBRERESPO           , @TELEFONORESPO   =TELEFONORESPO   , @PARENTESCORESPO  =PARENTESCORESPO   
			, @TIPOADM				 =(SELECT VALOR FROM OPENJSON(TIPOADM)	   WITH (VALOR VARCHAR(100) '$.value'))         
			, @VIAINGRESO            =(SELECT VALOR FROM OPENJSON(VIAINGRESO)  WITH (VALOR VARCHAR(100) '$.value'))
			, @CAUSAEXTERNA			 =(SELECT VALOR FROM OPENJSON(CAUSAEXTERNA)WITH (VALOR VARCHAR(100) '$.value'))
			, @MANCOPAGOEXTERNO =MANCOPAGOEXTERNO  , @NOAUTORIZACIONEXT =NOAUTORIZACIONEXT    
			, @VLR_COPAGOEXTERNO     =VLR_COPAGOEXTERNO    
		FROM OPENJSON (@PARAMETROS)
		WITH ( 
				IDSEDE                VARCHAR(5)    '$.IDSEDE', 
				FECHA                 VARCHAR(20)   '$.FECHA',
				HORA                  VARCHAR(10)   '$.HORA',                     
				TTRIAGE               BIT           '$.TTRIAGE',                 
				CNSTRIAGE             VARCHAR(20)   '$.CNSTRIAGE',                
				EXPTRIAGE             VARCHAR(100)  '$.EXPTRIAGE',                
				TIPO_DOC              VARCHAR(3)    '$.TIPO_DOC',                 
				DOCIDAFILIADO         VARCHAR(20)   '$.DOCIDAFILIADO',            
				EDAD                  VARCHAR(20)   '$.EDAD',                     
				IDAFILIADO            VARCHAR(20)   '$.IDAFILIADO',               
				NOMBREAFI             VARCHAR(100)  '$.NOMBREAFI',                
				NIVELSOCIEC           VARCHAR(2)    '$.NIVELSOCIEC',             
				IDTERCERO             VARCHAR(20)   '$.IDTERCERO',                
				RAZONSOCIALHADM       VARCHAR(255)  '$.RAZONSOCIALHADM',          
				NITHADM               VARCHAR(20)   '$.NITHADM',                  
				IDPLAN                VARCHAR(6)    '$.IDPLAN',                   
				IDEMEDICAREMITE       VARCHAR(20)   '$.IDEMEDICAREMITE',          
				CNSHACTRAN            VARCHAR(20)   '$.CNSHACTRAN',               
				TIPOPOLIZA            VARCHAR(13)   '$.TIPOPOLIZA',               
				NOPOLIZA              VARCHAR(20)   '$.NOPOLIZA',                 
				HABCAMA               VARCHAR(10)   '$.HABCAMA',                  
				IDTERCEROREMITE       VARCHAR(10)   '$.IDTERCEROREMITE',          
				CIUREMITE             VARCHAR(5)    '$.CIUREMITE',                
				RAZONSOCIALREMITE     VARCHAR(255)  '$.RAZONSOCIALREMITE',        
				NOMBRECIUREMITE       VARCHAR(200)  '$.NOMBRECIUREMITE',          
				TIPOESTANCIA          VARCHAR(20)   '$.TIPOESTANCIA',             
				TIPOESTANCIADESC      VARCHAR(100)  '$.TIPOESTANCIADESC',         
				URG_VINCULO           VARCHAR(100)  '$.URG_VINCULO',              
				NOMBREIDEMEDICAREMITE VARCHAR(100)  '$.NOMBREIDEMEDICAREMITE',   
				URG_NOMBRE            VARCHAR(100)  '$.URG_NOMBRE',              
				URG_TELE              VARCHAR(100)  '$.URG_TELE',                
				RESPCUENTA            VARCHAR(45)  '$.RESPCUENTA',              
				NOMBRERESPO           VARCHAR(100)  '$.NOMBRERESPO',             
				TELEFONORESPO         VARCHAR(100)  '$.TELEFONORESPO',           
				PARENTESCORESPO       VARCHAR(100)  '$.PARENTESCORESPO',         
				TIPOADM               NVARCHAR(MAX) AS JSON,
				VIAINGRESO            NVARCHAR(MAX) AS JSON,
				CAUSAEXTERNA          NVARCHAR(MAX) AS JSON,
				MANCOPAGOEXTERNO      BIT           '$.MANCOPAGOEXTERNO',        
				NOAUTORIZACIONEXT     VARCHAR(20)   '$.NOAUTORIZACIONEXT',       
				VLR_COPAGOEXTERNO     DECIMAL(14,2) '$.VLR_COPAGOEXTERNO'
		)
		PRINT '@CAUSAEXTERNA='+@CAUSAEXTERNA
		PRINT '@TIPOADM='+@TIPOADM
		PRINT '@VIAINGRESO='+@VIAINGRESO
		-- ANTES DE INSERTAR SE HACE VALIDADCIONES
		IF (  SELECT COUNT(*) FROM HADM 
			WHERE  HADM.IDAFILIADO  = @IDAFILIADO
			AND    HADM.CLASEING    = 'A'
			AND    HADM.CERRADA     = 0
			AND    COALESCE(HADM.PREADMISION,0) <> 1
			) > 0
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Usuario ya estAdmitido'
		IF ( SELECT ESTADO FROM AFI WHERE IDAFILIADO = @IDAFILIADO) <> 'Activo'
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Paciente INACTIVO...'

		IF DBO.FNK_VALORVARIABLE('AFI_VALIDAPPT') = 'SI'
			IF (SELECT COUNT(*) FROM PPT 
				WHERE ESTADO='Activo' 
				AND   EXISTS (SELECT * FROM AFI WHERE AFI.IDADMINISTRADORA=PPT.IDTERCERO AND AFI.IDPLAN=PPT.IDPLAN AND AFI.IDAFILIADO=@IDAFILIADO)
			) = 0
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El contrato para este afiliado esta inactivo, debe asignarle un nuevo contrato'

		IF @HABCAMA <> ''
			IF (SELECT ESTADOHAB FROM HHAB WHERE HHAB.HABCAMA = @HABCAMA) <> 'Libre'
			INSERT INTO @TBLERRORES(ERROR) SELECT 'La Habitaci? seleccionada No se encuentra Disponible'
		IF @TTRIAGE = 1
		BEGIN
			IF NOT EXISTS(SELECT CNSTRIAGE FROM HTRIAGE WHERE CNSTRIAGE = @CNSTRIAGE)
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Consecutivo de Triage NO Existe.'
			IF (SELECT IDAFILIADO FROM HTRIAGE WHERE CNSTRIAGE = @CNSHACTRAN) <> @IDAFILIADO
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Paciente de la Admisi?, no corresponde con el Paciente del Triage.'
			IF (SELECT ATENDIDO FROM HTRIAGE WHERE CNSTRIAGE = @CNSTRIAGE) = 1     
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Consecutivo de Triage Ya fue Atendido.'
		END
		IF DBO.FNK_VALORVARIABLE('IDMANEJATRIAGE')='SI' AND @TTRIAGE=0
			IF EXISTS(SELECT * FROM HTRIAGE WHERE IDAFILIADO = @IDAFILIADO AND ATENDIDO=2 AND FECHA >= DATEADD(HOUR,-2,GETDATE()))
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El paciente Tiene un Triage Realizado que no ha sido Traido Debe Traerlo'
		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		
		--SI CONTINUA ES PQ NO SE ENCONTRO ERROR
		--
		PRINT '@NOMBRERESPO: '+ @NOMBRERESPO
		BEGIN TRANSACTION
		BEGIN TRY
			EXEC SPK_GENCONSECUTIVO '01',@IDSEDE,'@HADM', @NVOCONSEC OUTPUT  
			SELECT @NVOCONSEC = @IDSEDE + REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0) 
			--EXEC SPQ_GENSEQUENCE @SEDE = @IDSEDE, @PREFIJO = '@HADM', @NVOCONSEC = @NVOCONSEC OUTPUT

			INSERT INTO HADM(  NOADMISION   ,IDSEDE ,FECHA   ,TTRIAGE      ,CNSTRIAGE     ,IDAFILIADO        ,NIVELSOCIOEC      ,IDTERCERO            
							,IDPLAN       ,IDEMEDICAREMITE ,CNSHACTRAN   ,TIPOPOLIZA    ,NOPOLIZA          ,HABCAMA           ,IDTERCEROREMITE ,CIUREMITE            
							,TIPOESTANCIA ,URG_VINCULO     ,URG_NOMBRE   ,URG_TELE      ,RESPCUENTA        ,NOMBRERESPO       ,TELEFONORESPO   ,PARENTESCORESPO      
							,TIPOADM      ,VIAINGRESO      ,CAUSAEXTERNA ,MANCOPAGOEXT  ,NOAUTORIZACIONEXT ,VLR_COPAGOEXTERNO ,CLASEING 
							,CERRADA      ,FACTURABLE      ,USUARIO      ,PCUBRIMIENTO  ,TIPODISCAP        ,GRADODISCAP)
			SELECT @NVOCONSEC       ,@IDSEDE         ,GETDATE()        ,@TTRIAGE       ,@CNSTRIAGE        ,@IDAFILIADO        ,@NIVELSOCIEC     
				,@IDTERCERO       ,@IDPLAN       ,@IDEMEDICAREMITE ,@CNSHACTRAN    ,@TIPOPOLIZA       ,@NOPOLIZA          ,@HABCAMA             ,@IDTERCEROREMITE  
				,@CIUREMITE       ,@TIPOESTANCIA ,@URG_VINCULO     ,@URG_NOMBRE    ,@URG_TELE         ,@RESPCUENTA        ,LEFT(@NOMBRERESPO,45)         ,@TELEFONORESPO    
				,@PARENTESCORESPO ,@TIPOADM      ,@VIAINGRESO      ,@CAUSAEXTERNA  ,@MANCOPAGOEXTERNO ,@NOAUTORIZACIONEXT ,@VLR_COPAGOEXTERNO   ,CASE WHEN DBO.FNK_VALORVARIABLE('IXCOUNTRY')='PERU' THEN 'P' ELSE 'A' END
				,0                ,1             ,@USUARIO         ,100            ,'N'               ,'N'           
			-- SE INGRESA MOV EN EL ACCIDENTE DE TRANSITO
			IF @TIPOADM = DBO.FNK_VALORVARIABLE('IDTARIFASOAT')
			--EXEC SPK_MOV_ACTRAN 'INGRESO', 'QX', @NVOCONSEC

			PRINT 'AGREGO UN NUEVO DETALLE DE HACTRAND CON EL NUEVO CONSUMO'
			IF(COALESCE(@CNSHACTRAN,'')<>'')
			BEGIN 
			SELECT @ITEM = COUNT(ITEM)+1 FROM HACTRAND WHERE  CNSHACTRAN	=@CNSHACTRAN 
			INSERT INTO HACTRAND ( CNSHACTRAN, ITEM, PROCEDENCIA,  NOREFERENCIA , N_FCT_ASEG, VLRGASTADO, SIRAS , ESTADOCONC, ESTADOEMBRIAGUEZ 	)
				VALUES  ( @CNSHACTRAN ,  @ITEM , 'CI' , @NVOCONSEC , NULL , @VALORTOTAL  , @SIRAS ,  'Alerta', 'No'    )
			END 
			-- SE INGRESA REQUERIMIENTO CONFIGURADOS EN LA ADMISION
			INSERT INTO HREQ(NOADMISION,TIPOREQ, IDREQUERIMIENTO, CUMPLIDO)
			SELECT @NVOCONSEC, REQ.TIPOREQ, REQ.IDREQUERIMIENTO, 0
			FROM   REQ
			WHERE  REQ.IDTERCERO = @IDTERCERO
			AND    REQ.TIPOADM   = @TIPOADM
			-- NIVELES DE ATENCION
			INSERT INTO HNAT(NOADMISION ,NOITEM ,  FECHA,  NIVELATENCION ,USUARIO ,SYS_ComputerName ,FECHAREGISTRO,
							APLICADO, VALIDADO, USUARIOVAL, CCOSTO, HABCAMA,         TIPOESTANCIA)
			SELECT @NVOCONSEC, 1, GETDATE(), HTAD.NIVELATENCION, @USUARIO, USUSU.SYS_ComputerName, GETDATE(), 1,
				CASE WHEN DBO.FNK_VALORVARIABLE('MARCA_REVISADO_HNAT')='SI' THEN 1 ELSE 0 END,
				CASE WHEN DBO.FNK_VALORVARIABLE('MARCA_REVISADO_HNAT')='SI' THEN @USUARIO ELSE NULL END,
				CASE WHEN HTAD.REQHABCAMA = 1 AND COALESCE(HHAB.CCOSTO,'') = '' THEN HTAD.CCOSTO ELSE HHAB.CCOSTO END, HADM.HABCAMA, HADM.TIPOESTANCIA
			FROM   HADM INNER JOIN HTAD ON HTAD.TIPOADM = HADM.TIPOADM
						LEFT JOIN HHAB ON HADM.HABCAMA = HHAB.HABCAMA
				, USUSU
			WHERE  HADM.NOADMISION = @NVOCONSEC
			AND    USUSU.USUARIO   = @USUARIO
			UPDATE HNAT SET IDAREAFUNCIONAL = CEN.IDAREA, IDAREA = AFU.IDAREAH
			FROM   CEN INNER JOIN AFU ON CEN.IDAREA = AFU.IDAREA
			WHERE  CEN.CCOSTO = HNAT.CCOSTO
			AND    HNAT.NOADMISION = @NVOCONSEC
			AND    HNAT.NOITEM     = 1
			-- ESTADO DE LA HHAB
			UPDATE HHAB SET ESTADOHAB='Ocupada', NOADMISION=@NVOCONSEC,IDAFILIADO =HADM.IDAFILIADO, TIPOESTANCIA=HADM.TIPOESTANCIA
			FROM   HADM
			WHERE  HHAB.HABCAMA = HADM.HABCAMA
			AND    HADM.NOADMISION = @NVOCONSEC
			-- TRIAGE
			UPDATE HTRIAGE SET ATENDIDO = 1 
			FROM   HADM
			WHERE  HTRIAGE.CNSTRIAGE = HADM.CNSTRIAGE
			AND    HADM.NOADMISION = @NVOCONSEC
			-- CREA EPICRISIS
			IF DBO.FNK_VALORVARIABLE('EPI_CREADAENADMI') = 'SI'
			EXEC SPK_CREA_EPICRISIS @NVOCONSEC, '01', @IDSEDE
			-- INSERTA DATOS COMO ESTA EN AFI
			UPDATE HADM SET IDPLAN_AFI = AFI.IDPLAN, IDTERCERO_AFI = AFI.IDADMINISTRADORA
			FROM   AFI
			WHERE  HADM.IDAFILIADO = AFI.IDAFILIADO
			AND    HADM.NOADMISION = @NVOCONSEC
			-- ACTUALIZA CAMPOS DE HADM PARA CTC Y TIPOHTX
			UPDATE HADM SET USACTC  = CASE WHEN DBO.FNK_VALORVARIABLE('UTILIZACTC') = 'SI' THEN 1 ELSE 0 END,
							TIPOHTX = CASE WHEN DBO.FNK_VALORVARIABLE('TIPOHTX') = 'HORIZONTAL' THEN 1 ELSE 0 END
			WHERE  HADM.NOADMISION = @NVOCONSEC
		END TRY
		BEGIN CATCH
			IF @@TRANCOUNT > 0  
			ROLLBACK TRANSACTION; 
			INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()          
		END CATCH
		IF @@TRANCOUNT > 0  
			COMMIT TRANSACTION; 
		IF(SELECT COUNT(*) FROM @TBLERRORES) >0
		BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' OK, @NVOCONSEC CONSECUTIVO
		RETURN
	END
	IF @METODO = 'EDITAR'
	BEGIN
		SELECT  @NOADMISION = NOADMISION
			, @IDSEDE                  =IDSEDE                , @FECHA           =FECHA           , @HORA             =HORA              , @TTRIAGE           =TTRIAGE              
			, @CNSTRIAGE             =CNSTRIAGE             , @EXPTRIAGE       =EXPTRIAGE       , @TIPO_DOC         =TIPO_DOC          , @DOCIDAFILIADO     =DOCIDAFILIADO        
			, @EDAD                  =EDAD                  , @IDAFILIADO      =IDAFILIADO      , @NOMBREAFI        =NOMBREAFI         , @NIVELSOCIEC       =NIVELSOCIEC          
			, @IDTERCERO             =IDTERCERO             , @RAZONSOCIALHADM =RAZONSOCIALHADM , @NITHADM          =NITHADM           , @IDPLAN            =IDPLAN               
			, @IDEMEDICAREMITE       =IDEMEDICAREMITE       , @CNSHACTRAN      =CNSHACTRAN      , @TIPOPOLIZA       =TIPOPOLIZA        , @NOPOLIZA          =NOPOLIZA             
			, @HABCAMA               =HABCAMA               , @IDTERCEROREMITE =IDTERCEROREMITE , @CIUREMITE        =CIUREMITE         , @RAZONSOCIALREMITE =RAZONSOCIALREMITE    
			, @NOMBRECIUREMITE       =NOMBRECIUREMITE       , @TIPOESTANCIA    =TIPOESTANCIA    , @TIPOESTANCIADESC =TIPOESTANCIADESC  , @URG_VINCULO       =URG_VINCULO          
			, @NOMBREIDEMEDICAREMITE =NOMBREIDEMEDICAREMITE , @URG_NOMBRE      =URG_NOMBRE      , @URG_TELE         =URG_TELE          , @RESPCUENTA        =RESPCUENTA           
			, @NOMBRERESPO           =NOMBRERESPO           , @TELEFONORESPO   =TELEFONORESPO   , @PARENTESCORESPO  =PARENTESCORESPO   , @TIPOADM           =TIPOADM              
			, @VIAINGRESO            =VIAINGRESO            , @CAUSAEXTERNA    =CAUSAEXTERNA    , @MANCOPAGOEXTERNO =MANCOPAGOEXTERNO  , @NOAUTORIZACIONEXT =NOAUTORIZACIONEXT    
			, @VLR_COPAGOEXTERNO     =VLR_COPAGOEXTERNO    
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION',
				IDSEDE                VARCHAR(5)    '$.IDSEDE', 
				FECHA                 VARCHAR(20)   '$.FECHA',
				HORA                  VARCHAR(10)   '$.HORA',                     
				TTRIAGE               BIT           '$.TTRIAGE',                 
				CNSTRIAGE             VARCHAR(20)   '$.CNSTRIAGE',                
				EXPTRIAGE             VARCHAR(100)  '$.EXPTRIAGE',                
				TIPO_DOC              VARCHAR(3)    '$.TIPO_DOC',                 
				DOCIDAFILIADO         VARCHAR(20)   '$.DOCIDAFILIADO',            
				EDAD                  VARCHAR(20)   '$.EDAD',                     
				IDAFILIADO            VARCHAR(20)   '$.IDAFILIADO',               
				NOMBREAFI             VARCHAR(100)  '$.NOMBREAFI',                
				NIVELSOCIEC           VARCHAR(2)    '$.NIVELSOCIEC',             
				IDTERCERO             VARCHAR(20)   '$.IDTERCERO',                
				RAZONSOCIALHADM       VARCHAR(255)  '$.RAZONSOCIALHADM',          
				NITHADM               VARCHAR(20)   '$.NITHADM',                  
				IDPLAN                VARCHAR(6)    '$.IDPLAN',                   
				IDEMEDICAREMITE       VARCHAR(20)   '$.IDEMEDICAREMITE',          
				CNSHACTRAN            VARCHAR(20)   '$.CNSHACTRAN',               
				TIPOPOLIZA            VARCHAR(13)   '$.TIPOPOLIZA',               
				NOPOLIZA              VARCHAR(20)   '$.NOPOLIZA',                 
				HABCAMA               VARCHAR(10)   '$.HABCAMA',                  
				IDTERCEROREMITE       VARCHAR(10)   '$.IDTERCEROREMITE',          
				CIUREMITE             VARCHAR(5)    '$.CIUREMITE',                
				RAZONSOCIALREMITE     VARCHAR(255)  '$.RAZONSOCIALREMITE',        
				NOMBRECIUREMITE       VARCHAR(200)  '$.NOMBRECIUREMITE',          
				TIPOESTANCIA          VARCHAR(20)   '$.TIPOESTANCIA',             
				TIPOESTANCIADESC      VARCHAR(100)  '$.TIPOESTANCIADESC',         
				URG_VINCULO           VARCHAR(100)  '$.URG_VINCULO',              
				NOMBREIDEMEDICAREMITE VARCHAR(100)  '$.NOMBREIDEMEDICAREMITE',   
				URG_NOMBRE            VARCHAR(100)  '$.URG_NOMBRE',              
				URG_TELE              VARCHAR(100)  '$.URG_TELE',                
				RESPCUENTA            VARCHAR(45)  '$.RESPCUENTA',              
				NOMBRERESPO           VARCHAR(100)  '$.NOMBRERESPO',             
				TELEFONORESPO         VARCHAR(100)  '$.TELEFONORESPO',           
				PARENTESCORESPO       VARCHAR(100)  '$.PARENTESCORESPO',         
				TIPOADM               VARCHAR(2)    '$.TIPOADM',                 
				VIAINGRESO            VARCHAR(1)    '$.VIAINGRESO',             
				CAUSAEXTERNA          VARCHAR(2)    '$.CAUSAEXTERNA',            
				MANCOPAGOEXTERNO      BIT           '$.MANCOPAGOEXTERNO',        
				NOAUTORIZACIONEXT     VARCHAR(20)   '$.NOAUTORIZACIONEXT',       
				VLR_COPAGOEXTERNO     DECIMAL(14,2) '$.VLR_COPAGOEXTERNO'
		)
		-- ANTES DE EDITAR SE HACE VALIDACIONES
		--EDITAR REGISTRO
		BEGIN TRY
		UPDATE HADM SET  IDSEDE = @IDSEDE, TTRIAGE = @TTRIAGE ,CNSTRIAGE = @CNSTRIAGE, IDAFILIADO = @IDAFILIADO, NIVELSOCIOEC = @NIVELSOCIEC, IDTERCERO = @IDTERCERO
						,IDPLAN = @IDPLAN, IDEMEDICAREMITE = @IDEMEDICAREMITE,CNSHACTRAN = @CNSHACTRAN   ,TIPOPOLIZA = @TIPOPOLIZA ,NOPOLIZA = @NOPOLIZA ,HABCAMA = @HABCAMA
						,IDTERCEROREMITE = @IDTERCEROREMITE, CIUREMITE = @CIUREMITE ,TIPOESTANCIA = @TIPOESTANCIA ,URG_VINCULO = @URG_VINCULO ,URG_NOMBRE = @URG_NOMBRE 
						,URG_TELE = @URG_TELE ,RESPCUENTA = @RESPCUENTA ,NOMBRERESPO = @NOMBRERESPO, TELEFONORESPO = @TELEFONORESPO ,PARENTESCORESPO = @PARENTESCORESPO      
						,TIPOADM  = @TIPOADM ,VIAINGRESO = @VIAINGRESO, CAUSAEXTERNA = @CAUSAEXTERNA ,MANCOPAGOEXT = @MANCOPAGOEXTERNO ,NOAUTORIZACIONEXT = @NOAUTORIZACIONEXT 
						,VLR_COPAGOEXTERNO = @VLR_COPAGOEXTERNO  
		WHERE   NOADMISION   = @NOADMISION

		-- PARA EL ACCIDENTE DE TRANSITO					
		SELECT  @SIRAS = COALESCE(SIRAS,'') ,@CONSECUTIVO= COALESCE(CONSECUTIVO,''),  @CNSHACTRAN =COALESCE(CNSHACTRAN,'')  , @VALORTOTAL = COALESCE(VALORTOTAL,0) FROM OPENJSON(@PARAMETROS) --PARA GUARDAR EL SIRAS EN HACTRAND
		WITH( SIRAS	VARCHAR(20) '$.SIRAS'
			,CONSECUTIVO		VARCHAR(20) '$.CONSECUTIVO'
			,CNSHACTRAN			VARCHAR(20) '$.CNSHACTRAN'
			,VALORTOTAL             DECIMAL(14,2) '$.VALORTOTAL'
			)

		IF ( COALESCE(@CNSHACTRAN ,'' ) <>'' )
		BEGIN
			IF ( SELECT COUNT(*) FROM HACTRAND WHERE  CNSHACTRAN	=@CNSHACTRAN AND PROCEDENCIA='QX'	AND NOREFERENCIA = @NOADMISION ) >0  
				BEGIN
					PRINT 'ACTUALIZO EL CONSUMO DEL ACCIDENTE DE TRANSITO'
					UPDATE HACTRAND SET VLRGASTADO = @VALORTOTAL  , SIRAS = @SIRAS  WHERE  CNSHACTRAN	=@CNSHACTRAN AND PROCEDENCIA='QX'	AND NOREFERENCIA = @NOADMISION
				END
			ELSE
				BEGIN
					PRINT 'AGREGO UN NUEVO DETALLE DE HACTRAND CON EL NUEVO CONSUMO'

					SELECT @ITEM = COUNT(ITEM)+1 FROM HACTRAND WHERE  CNSHACTRAN	=@CNSHACTRAN 
					INSERT INTO HACTRAND ( CNSHACTRAN, ITEM, PROCEDENCIA,  NOREFERENCIA , N_FCT_ASEG, VLRGASTADO, SIRAS , ESTADOCONC, ESTADOEMBRIAGUEZ 	)
						VALUES  ( @CNSHACTRAN ,  @ITEM , 'QX' , @NOADMISION , NULL , @VALORTOTAL  , @SIRAS ,  'Alerta', 'No'    )
				END
		END
		

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()
		END CATCH

		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		ELSE
			SELECT 'OK' OK, @NOADMISION CONSECUTIVO

		RETURN
	END
	IF @METODO = 'REVISAR'
	BEGIN
		SELECT @IDSEDE = COALESCE(@IDSEDE,'02')
		SELECT @NOADMISION = NOADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION')

		EXEC SPK_GENCONSECUTIVO '01',@IDSEDE,'@RPDX', @CNSRPDX OUTPUT  
		SELECT @CNSRPDX = @IDSEDE + REPLACE(SPACE(8 - LEN(@CNSRPDX))+LTRIM(RTRIM(@CNSRPDX)),SPACE(1),0) 
	   --EXEC SPQ_GENSEQUENCE @SEDE = @IDSEDE, @PREFIJO = '@RPDX', @NVOCONSEC = @CNSRPDX OUTPUT

		EXEC SPK_ESTADO_ADMI @NOADMISION, @CNSRPDX
		IF (SELECT COUNT(*) FROM RPDX WHERE CNS = @CNSRPDX) >0
		BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT NOMBRE ERROR FROM RPDX WHERE CNS = @CNSRPDX
			DELETE RPDX WHERE CNS = @CNSRPDX
			RETURN
		END
		SELECT 'OK' OK, @NVOCONSEC
		RETURN
	END
	IF @METODO = 'SALIDA_VOLUNTARIA'
	BEGIN
		SELECT @IDSEDE = COALESCE(@IDSEDE,'02')
		SELECT @NOADMISION = NOADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION')
		IF (SELECT ESTADOSALIDA FROM HADM WHERE NOADMISION = @NOADMISION) = 'V'
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Ya esta Marcada con Salida Voluntaria'
		ELSE
		BEGIN
			BEGIN TRY
			UPDATE HADM SET ESTADOSALIDA = 'V' WHERE NOADMISION = @NOADMISION
			END TRY
			BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()
			END CATCH
		END
		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK, @NOADMISION CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		ELSE
			SELECT 'OK' OK, @NOADMISION CONSECUTIVO
		RETURN
	END
	IF @METODO = 'VALIDA_ALTAS'
	BEGIN
		SELECT @NOADMISION = NOADMISION, @ALTA = ALTA
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION VARCHAR(20) '$.NOADMISION' ,
				ALTA       VARCHAR(20) '$.ALTA' )

		IF @ALTA = 'ADMINISTRATIVA'
		BEGIN
			IF (SELECT COALESCE(DBO.FnK_ValorVariable('PERMITEALTA_CONCAMA'),'')) = 'NO'
				IF (SELECT COUNT(*) FROM HHAB WHERE COALESCE(NOADMISION,'')=@NOADMISION)>0
				INSERT INTO @TBLERRORES(ERROR) SELECT 'La Cama Ocupada con esta Admision No ha sido Liberada, Es Necesario que se Cumpla todo el proceso de Salida'
      
			EXEC SPK_GENCONSECUTIVO '01',@IDSEDE,'@RPDX', @CNSRPDX OUTPUT  
			SELECT @CNSRPDX = @IDSEDE + REPLACE(SPACE(8 - LEN(@CNSRPDX))+LTRIM(RTRIM(@CNSRPDX)),SPACE(1),0) 
			--EXEC SPQ_GENSEQUENCE @SEDE = @IDSEDE, @PREFIJO = '@RPDX', @NVOCONSEC = @CNSRPDX OUTPUT

			EXEC SPK_ESTADO_ADMI @NOADMISION, @CNSRPDX, 'A'
			IF (SELECT COUNT(*) FROM RPDX WHERE CNS = @CNSRPDX) >0
			BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT NOMBRE FROM RPDX WHERE CNS = @CNSRPDX
			DELETE RPDX WHERE CNS = @CNSRPDX
			END
      
			IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
			BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
			END
		END
		--SI CONTINUA ES PQ NO SE ENCONTRO ERROR
		SELECT 'OK' OK, '' CONSECUTIVO
		RETURN
	END
	IF @METODO = 'traeOtrosDatosHADM'
	BEGIN
		print 'ingrese a traeOtrosDatosHADM'
		SELECT @NOADMISION = NOADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION')

		SELECT 'OK' OK, ' ' NVOCONSEC
		SELECT CONVERT(VARCHAR(10),FECHAALTAMED,103) FECHAAM, CONVERT(VARCHAR(10),FECHAALTAMED,108) HORAAM,
				CONVERT(VARCHAR(10),FECHAALTAENF,103) FECHAAE, CONVERT(VARCHAR(10),FECHAALTAENF,108) HORAAE, 
				CONVERT(VARCHAR(10),FECHAALTA,103) FECHAAA, CONVERT(VARCHAR(10),FECHAALTA,108) HORAAA,
				ESTADOSALIDA
		FROM HADM WHERE NOADMISION  = @NOADMISION
		RETURN
	END
	IF @METODO = 'REVISANOPROC'
	BEGIN
		print 'entre a revisanoproc'
		SELECT @NOADMISION = NOADMISION, @CLASE = CLASE
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION',
				CLASE                 VARCHAR(2)    '$.CLASE')
		IF @CLASE = 'NP'
			IF (SELECT COUNT(*) FROM HPRE WHERE NOADMISION = @NOADMISION) >0
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Esta Admisi? ya tiene Cargos, por lo tanto no puede darse No Procesar.'

		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		ELSE
		BEGIN
			IF @CLASE = 'NP'
			IF (SELECT DBO.FNK_VALORVARIABLE('EPI_CREADAENADMI') )= 'SI'
				IF (SELECT COUNT(*) FROM HCA WHERE NOADMISION=@NOADMISION AND    CLASEPLANTILLA  <> DBO.FNK_VALORVARIABLE('HCPLANTILLAEPI'))>0
					SELECT 'OK' OK, 'Esta Admision Tiene Al Menos una Historia Clinica...' WARNING, @NOADMISION CONSECUTIVO
				ELSE
					SELECT 'OK' OK, '' WARNING, @NOADMISION CONSECUTIVO
			ELSE
				IF (SELECT COUNT(*) FROM HCA WHERE NOADMISION=@NOADMISION )>0
					SELECT 'OK' OK, 'Esta Admision Tiene Al Menos una Historia Clinica...' WARNING, @NOADMISION CONSECUTIVO
				ELSE
					SELECT 'OK' OK, '' WARNING, @NOADMISION CONSECUTIVO
			ELSE
			SELECT 'OK' OK, 'Al darle NO Facturable Todos Los cargos por Consultas, Laboratorios, etc. NO podr? ser Cobrados por la Entidad.' WARNING
		END
		RETURN
	END
	IF @METODO = 'PROCESOACTIVO'
	BEGIN
		SELECT @NOADMISION = NOADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION' )
		SELECT @IDTERCERO = IDTERCERO, @CERRADA = CERRADA, @TIPOADM = TIPOADM, @MARCA = MARCA, @FACTURADA = FACTURADA, @FACTURABLE = FACTURABLE,
				@IDPLAN    = IDPLAN
		FROM HADM WHERE NOADMISION = @NOADMISION 
		PRINT 'GRUPO:'+@GRUPO
		SELECT @PERFACTURAR = DBO.FNQ_VALIDAACCESO(@GRUPO,'Cat_Ingreso','Facturacion')
		--print 'permiso facturaci?:'+str(@PERFACTURAR)
		IF @PERFACTURAR = 1
			IF DBO.FNK_VALORVARIABLE('ACTIVARUSGRUA') = 'SI'
			IF NOT EXISTS (SELECT * FROM USGRUA WHERE GRUPO = @GRUPO AND IDADMINISTRADORA = @IDTERCERO)
				SELECT @PERFACTURAR = 0
      
		IF dbo.FNK_VALORVARIABLE('MARCA_REVISADO_HNAT') = 'SI' AND @CERRADA = 0
			IF (SELECT COUNT(*) FROM HNAT WHERE NOADMISION=@NOADMISION AND COALESCE(VALIDADO,0)=0)>0
			INSERT INTO @TBLERRORES(ERROR)
			SELECT 'La Admision tiene un Traslado que no ha sido Validado por Admisiones Se Debe Validar el Traslado.'
--update usvgs set dato = 'NO' WHERE IDVARIABLE = 'MARCA_REVISADO_HNAT'
		IF dbo.FNK_VALORVARIABLE('AVISAOMSOLI_SINTATEN') = 'SI' AND @CERRADA = 0 AND @TIPOADM <> dbo.FNK_VALORVARIABLE('IDURGRIPS')
			IF (SELECT COUNT(*) FROM OMSOLI WHERE NOADMISION=@NOADMISION AND CODOM=DBO.FnK_ValorVariable('OMCODINTERCONSULTA') AND PROCEDENCIA='QX' AND ESTADO=0) > 0
			BEGIN
				INSERT INTO @TBLERRORES(ERROR)
				SELECT 'Interconsultas y Valoraciones Pendientes:'
				INSERT INTO @TBLERRORES(ERROR)
				SELECT TOP 10 LEFT('SERVICIO:'+OMSOLI.IDSERVICIO+' IDMEDICA: '+COALESCE(OMSOLI.IDEMEDICA,'SIN ESPECIALIDAD')+' DESCRIPCION:'+MES.DESCRIPCION ,200)
				FROM   OMSOLI LEFT JOIN MES ON OMSOLI.IDEMEDICA=MES.IDEMEDICA 
				WHERE  NOADMISION = @NOADMISION
				AND    CODOM      = DBO.FnK_ValorVariable('OMCODINTERCONSULTA')
				AND    PROCEDENCIA='QX' AND OMSOLI.ESTADO=0
			END

		IF @MARCA = 1
		BEGIN
			IF @FACTURADA = 0
			INSERT INTO @TBLERRORES(ERROR)
			SELECT 'Esta Admisión esta escogida para Una Facturación Masiva Pendiente.'
			ELSE
			INSERT INTO @TBLERRORES(ERROR)
			SELECT 'Esta Admisión esta escogida EN Una Facturación Masiva.'
			SELECT @PERFACTURAR = 0
		END

		IF DBO.FNK_VALORVARIABLE('AVISA_NOPOS_FACTURA')='SI'
			IF (SELECT COUNT(*) 
				FROM   HPRE INNER JOIN HPRED ON HPRE.NOPRESTACION=HPRED.NOPRESTACION
							INNER JOIN SER   ON HPRED.IDSERVICIO=SER.IDSERVICIO
				WHERE  HPRE.NOADMISION = @NOADMISION
				AND COALESCE(SER.MEDICAMENTOS,0)=1
				AND COALESCE(SER.POS,0)=0 ) > 0
				INSERT INTO @TBLERRORES(ERROR)
				SELECT 'La Admisión Tiene Prestaciones con Medicamentos Marcados como NoPos.'
      
		IF @FACTURABLE = 0 OR @CERRADA <> 1
			SELECT @PERFACTURAR = 0
      
		IF (SELECT COALESCE(CAPITADO,0) FROM PPT WHERE IDTERCERO = @IDTERCERO AND IDPLAN = @IDPLAN) = 1
			IF ( SELECT CASE WHEN EXISTS (SELECT * FROM HPRE INNER JOIN PPT ON HPRE.IDTERCEROCA = PPT.IDTERCERO 
																		AND HPRE.IDPLAN      = PPT.IDPLAN 
																		AND PPT.PFACTURARIND = 1 
																		AND HPRE.NOADMISION  = @NOADMISION ) THEN 'MAS' 
							ELSE 'SOLO' 
						END ) = 'MAS'
			INSERT INTO @TBLERRORES(ERROR)
			SELECT 'Contrato Capitado. Pero Existen Cargos que son suceptibles de factura '
			ELSE
			BEGIN
				INSERT INTO @TBLERRORES(ERROR)
				SELECT 'Contrato Capitado. no se puede Facturar   Individualmente '
				SELECT @PERFACTURAR = 0
			END
		SELECT ERROR FROM @TBLERRORES
		RETURN
	END
	IF @METODO = 'AFACTURAR'
	BEGIN
		PRINT 'INGRESE A AFACTURAR'
		SELECT @NOADMISION = NOADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION' )
		PRINT '@IDSEDE:'+@IDSEDE
		EXEC SPK_GENCONSECUTIVO '01',@IDSEDE,'@RPDX', @CNSRPDX OUTPUT  
		SELECT @CNSRPDX = @IDSEDE + REPLACE(SPACE(8 - LEN(@CNSRPDX))+LTRIM(RTRIM(@CNSRPDX)),SPACE(1),0) 
		--EXEC SPQ_GENSEQUENCE @SEDE = @IDSEDE, @PREFIJO = '@RPDX', @NVOCONSEC = @CNSRPDX OUTPUT
		PRINT '@CNSRPDX='+@CNSRPDX+ ' EN SPQ_HADMCOL'
		EXEC DBO.SPK_AFACTURAR @NOADMISION, @CNSRPDX

		--SELECT *  FROM RPDX WHERE CNS = @CNSRPDX
      
		IF (SELECT COUNT(*) FROM RPDX WHERE CNS = @CNSRPDX) = 0
		BEGIN
			SELECT 'KO' OK 
			SELECT 'NO EXISTEN ITEMS A FACTURAR' ERROR
		END
		ELSE
		BEGIN
			SELECT 'OK' OK, @CNSRPDX CNSRPDX
		END

		RETURN
	END
	IF @METODO = 'FACTURAR'
	BEGIN
		SELECT @NOADMISION = NOADMISION ,@ITEMRPDX = ITEMRPDX, @FECHAFACTURA = FECHAFACTURA
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION',
				ITEMRPDX              INT           '$.ITEM',
				FECHAFACTURA          VARCHAR(10)   '$.FECHAFACTURA' )

		SELECT @FECHAFACTURADT = CONVERT(DATETIME, SUBSTRING(@FECHA,1,4)+SUBSTRING(@FECHA,6,2)+SUBSTRING(@FECHA,9,2))
		SELECT @ID1 = ID1 ,@ID2 = ID2, @ID6 = ID6 ,@RPDXIDTERCERO = IDTERCERO, @CANTIDAD1 = CANTIDAD1 FROM RPDX WHERE ITEM = @ITEMRPDX
		SELECT @NITHADM = NIT FROM TER WHERE IDTERCERO = dbo.FNK_VALORVARIABLE('IDTERCEROINSTALADO')
		IF (SELECT COUNT(*) FROM PRI WHERE CERRADO=0 AND ISNULL(CERRADO_FAC,0)=0 AND FECHA_INI<= @FECHAFACTURADT AND FECHA_FIN>=@FECHAFACTURADT) = 0
			INSERT INTO @TBLERRORES
			SELECT 'El periodo contable no existe o se encuentra cerrado'

		IF (SELECT COUNT(1) FROM HPRED, HPRE WHERE HPRE.NOPRESTACION = HPRED.NOPRESTACION 
			AND    COALESCE(HPRED.FACTURADA,0) = 0 AND HPRE.NOADMISION = @NOADMISION
			AND    COALESCE(HPRED.ENCARGOS, 0) = 0 
			AND    COALESCE(HPRED.MARCA,0)= CASE DBO.FNK_VALORVARIABLE('CLASE_IPS') WHEN 'SI' THEN CASE WHEN COALESCE(@USUARIO,'')<>'' THEN 1 ELSE COALESCE(HPRED.MARCA,0) END 
																					ELSE COALESCE(HPRED.MARCA,0)
											END
			AND    COALESCE(HPRED.USUARIOMARCA,'') = CASE DBO.FNK_VALORVARIABLE('CLASE_IPS') WHEN 'SI' THEN CASE WHEN COALESCE(@USUARIO,'')<>'' THEN @USUARIO ELSE COALESCE(HPRED.USUARIOMARCA,'') END 
																							ELSE COALESCE(HPRED.USUARIOMARCA,'')
											END
			) = 0 AND @ID2<>'CP'
			INSERT INTO @TBLERRORES
			SELECT 'No hay items para facturar'
		ELSE
		BEGIN
			SELECT @SQL = 'SELECT @AUXDIN = COUNT(*) FROM HPRED, HPRE
						WHERE  HPRED.NOPRESTACION = HPRE.NOPRESTACION
						AND    HPRE.NOADMISION    = '''+@NOADMISION+''''
			IF @ID2 = 'C'
			BEGIN
			SELECT @SQL += 'AND    HPRED.VALORCOPAGO  > 0  
							AND    COALESCE(HPRED.N_FACTURAH,'')=''
							AND    HPRE.PREFIJO      = '''+@ID6+''''
			END
			ELSE
			BEGIN
			SELECT @SQL += ' AND    HPRED.IDTERCEROCA  = '''+@RPDXIDTERCERO+''''+ 
							' AND    HPRED.IDPLAN       = '''+@ID1+''''+
							' AND    HPRED.FACTURADA    = 0
								AND    COALESCE(HPRED.ENCARGOS, 0) = 0 '
			END
			IF @CANTIDAD1 = 1
			SELECT @SQL += ' AND HPRE.IDAREA IN (SELECT IDAREA FROM PPTFTRD WHERE PPTFTRD.IDTERCERO = '''+@IDTERCERO+''''+
							' AND PPTFTRD.IDPLAN = '''+@ID1+''' AND ITEM = '+@CANTIDAD+' ) '
			IF @CANTIDAD1 = 2
			SELECT @SQL += ' AND HPRE.IDAREA IN (SELECT IDAREA FROM PPTFTRD WHERE PPTFTRD.IDTERCERO = '''+@IDTERCERO+''''+
							' AND PPTFTRD.IDPLAN = '''+@ID1+''') '
			IF DBO.FNK_VALORVARIABLE('CLASE_IPS')='IPS_DOMI'
			SELECT @SQL += ' AND COALESCE(HPRED.MARCA,0)= CASE WHEN COALESCE('''+@USUARIO+''','''')<>'''' THEN 1 ELSE COALESCE(HPRED.MARCA,0) END ' +
							' AND COALESCE(HPRED.USUARIOMARCA,'''')=CASE WHEN COALESCE('''+@USUARIO+''','''')<>'''' THEN '''+@USUARIO+''' ELSE COALESCE(HPRED.USUARIOMARCA,'''') END '

			EXEC sys.sp_executesql @SQL, N'@AUXDIN INT OUTPUT', @AUX OUTPUT
			IF @AUX = 0 AND @ID2 <> 'CP'
			INSERT INTO @TBLERRORES
			SELECT 'No hay items para facturar'
		END
      
		SELECT @FTRIDSEDE = @IDSEDE 
		SELECT @FECHAFACTURADT = COALESCE(@FECHAFACTURADT,GETDATE())
		IF DBO.FNK_VALORVARIABLE('FACTSEDE') = 'SI'
		BEGIN
			SELECT @FTRIDSEDE = IDSEDE FROM HADM WHERE NOADMISION = @NOADMISION
            
			IF DBO.FNK_VALORVARIABLE('FACTSEDEEQUIPO') = 'SI'
			SELECT @FTRIDSEDE = @IDSEDE 
		END

		EXEC SPQ_VALIDADIAN2 @FTRIDSEDE, '', @CONTINUA OUTPUT
		IF @CONTINUA = 3
			INSERT INTO @TBLERRORES(ERROR)
			SELECT 'Es imposible generar una nueva factura. NO Existe Resoluci? de la DIAN Disponible'
		IF @CONTINUA = 0
			INSERT INTO @TBLERRORES(ERROR)
			SELECT 'Es imposible generar una nueva factura. El consecutivo no estautorizado por la DIAN'
		IF @CONTINUA = 2
			INSERT INTO @TBLERRORES(ERROR)
			SELECT 'La resoluci? de la DIAN estvencida'

		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
      
		IF @CONTINUA = 1
		BEGIN TRY
			EXEC SPK_FACTURA_ASIS @NOADMISION, @NITHADM, '01', @IDSEDE, @USUARIO, @SYS_COMPUTERNAME, @CNSRPDX, @ITEMRPDX, 1, @FECHAFACTURADT
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()
		END CATCH
		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK, '' CONSECUTIVO
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' OK
	END
--QUERY2
--QUERY2
	IF @METODO = 'RPT_ANEXO'
	BEGIN
		SELECT @NOADMISION = NOADMISION ,@TIPOANEXO = TIPO, @CLASEANEXO = CLASE ,@IDTERCERO = IDTERCERO ,@IDPLAN = IDPLAN
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION            VARCHAR(16)   '$.NOADMISION',
				TIPO                  VARCHAR(20)   '$.TIPO',
				CLASE                 VARCHAR(20)   '$.CLASE',
				IDTERCERO             VARCHAR(20)   '$.IDTERCERO',
				IDPLAN                VARCHAR(6)    '$.IDPLAN')
		CREATE TABLE #ANEXO ( TIPORENGLON  SMALLINT    ,IDCIRUGIA VARCHAR(20) collate database_default  ,NOMCIRUGIA VARCHAR(255) collate database_default 
							,PREFIJO      VARCHAR(6)   collate database_default, NOM_PREFIJO VARCHAR(60) collate database_default
							,FECHA        DATE        ,IDAREA    VARCHAR(20) collate database_default  ,IDSERVICIO VARCHAR(20)  collate database_default 
							,DESCSERVICIO VARCHAR(255) collate database_default
							,CODCUPS      VARCHAR(20)  collate database_default ,CANTIDAD  DECIMAL(18,2) ,VALOR      VARCHAR(20) ,VRITEM       VARCHAR(20)
							,TOTALPREFIJO VARCHAR(20))
		---ARREGLO DE DATOS NULL
		UPDATE HPRED SET VALORCOPAGO = 0 
		FROM   HPRED INNER JOIN HPRE ON HPRED.NOPRESTACION = HPRE.NOPRESTACION
		WHERE  HPRE.NOPRESTACION = HPRED.NOPRESTACION 
		AND    HPRE.NOADMISION         = @NOADMISION 
		AND    HPRED.IDTERCEROCA       = @IDTERCERO
		AND    HPRED.IDPLAN            = @IDPLAN
		AND    HPRED.VALORCOPAGO IS NULL
		IF  @CLASEANEXO = 'Normal'
		BEGIN
			SELECT @IMPRIMEIDALTERNA = IMPRIMEIDALTERNA FROM PPT WHERE IDTERCERO = @IDTERCERO AND IDPLAN = @IDPLAN   
			--CURSOR DE CIRUGIAS
			DECLARE C_CX CURSOR FOR
			SELECT DISTINCT COALESCE(HPRED.IDCIRUGIA,'') IDCIRUGIA
			FROM   HPRED INNER JOIN HPRE ON HPRED.NOPRESTACION = HPRE.NOPRESTACION
						LEFT JOIN SER  ON HPRED.IDSERVICIO   = SER.IDSERVICIO
			WHERE  HPRE.NOADMISION   = @NOADMISION
			AND    COALESCE(HPRE.ANULADO, 0)  = 0 
			AND    COALESCE(HPRED.ANULADO, 0)  = 0 
			AND    COALESCE(HPRED.ENCARGOS, 0) = 0 
			AND    HPRED.IDTERCEROCA = CASE @TIPOANEXO WHEN  'Tercero' THEN @IDTERCERO
													WHEN  'TerceroPlan' THEN @IDTERCERO
													ELSE  HPRED.IDTERCEROCA
									END
			AND    HPRED.IDPLAN      = CASE @TIPOANEXO WHEN 'TerceroPlan' THEN @IDPLAN
													ELSE  HPRED.IDPLAN
									END
			AND    COALESCE(HPRED.NOCOBRABLE,0)  = CASE WHEN DBO.FNK_VALORVARIABLE('ANEXOIMPNOCOBRABLE') <> 'SI' THEN 0
														ELSE COALESCE(HPRED.NOCOBRABLE,0)
												END
			AND    ISNULL(HPRED.PAQUETE,'')      = CASE WHEN DBO.FNK_VALORVARIABLE('VISUALIZA_DETPAQUETE') = 'SI' THEN ''
														ELSE ISNULL(HPRED.PAQUETE,'')
												END
			OPEN C_CX
			FETCH NEXT FROM C_CX INTO @IDCIRUGIA
			WHILE @@FETCH_STATUS = 0
			BEGIN
			SELECT @NOMCIRUGIA = DESCSERVICIO FROM SER WHERE SER.IDSERVICIO = @IDCIRUGIA
			INSERT INTO #ANEXO( TIPORENGLON, IDCIRUGIA, NOMCIRUGIA)
			SELECT 1, @IDCIRUGIA, @NOMCIRUGIA 
			DECLARE C_PRE CURSOR FOR
			SELECT SER.PREFIJO , CONVERT(VARCHAR(20),SUM(COALESCE(HPRED.CANTIDAD*HPRED.VALOR,0))) ,COUNT(*)
			FROM   HPRED INNER JOIN HPRE ON HPRED.NOPRESTACION = HPRE.NOPRESTACION
							LEFT JOIN SER  ON HPRED.IDSERVICIO   = SER.IDSERVICIO
			WHERE  HPRE.NOADMISION   = @NOADMISION
			AND    COALESCE(HPRE.ANULADO, 0)  = 0 
			AND    COALESCE(HPRED.ANULADO, 0)  = 0 
			AND    COALESCE(HPRED.ENCARGOS, 0) = 0  
			AND    HPRED.IDTERCEROCA = CASE @TIPOANEXO WHEN  'Tercero' THEN @IDTERCERO
													WHEN  'TerceroPlan' THEN @IDTERCERO
													ELSE  HPRED.IDTERCEROCA
										END
			AND    HPRED.IDPLAN      = CASE @TIPOANEXO WHEN 'TerceroPlan' THEN @IDPLAN
														ELSE  HPRED.IDPLAN
										END
			AND    COALESCE(HPRED.NOCOBRABLE,0)  = CASE WHEN DBO.FNK_VALORVARIABLE('ANEXOIMPNOCOBRABLE') <> 'SI' THEN 0
														ELSE COALESCE(HPRED.NOCOBRABLE,0)
													END
			AND    ISNULL(HPRED.PAQUETE,'')      = CASE WHEN DBO.FNK_VALORVARIABLE('VISUALIZA_DETPAQUETE') = 'SI' THEN ''
														ELSE ISNULL(HPRED.PAQUETE,'')
													END
			AND    COALESCE(HPRED.IDCIRUGIA,'') = @IDCIRUGIA
			GROUP BY SER.PREFIJO
			OPEN C_PRE
			FETCH NEXT FROM C_PRE INTO @PREFIJO ,@TOTALPREFIJO ,@VECES
			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO #ANEXO(TIPORENGLON,IDCIRUGIA, PREFIJO, NOM_PREFIJO, TOTALPREFIJO)
				SELECT 2, @IDCIRUGIA, @PREFIJO, NOM_PREFIJO, CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@TOTALPREFIJO)) FROM PRE WHERE PREFIJO = @PREFIJO 

				INSERT INTO #ANEXO(TIPORENGLON, IDCIRUGIA, PREFIJO, FECHA  ,IDAREA, IDSERVICIO, DESCSERVICIO, CODCUPS, CANTIDAD, VALOR, VRITEM)
				SELECT 3, @IDCIRUGIA, @PREFIJO , COALESCE(CONVERT(DATE,HPRED.FECHA), CONVERT(DATE,HPRE.FECHA),''),HPRE.IDAREA
						,CASE WHEN @IMPRIMEIDALTERNA = 1 THEN SER.IDALTERNA
							ELSE HPRED.IDSERVICIO 
						END IDSERVICIO     
						,SER.DESCSERVICIO 
						,CASE WHEN COALESCE(HPRED.IDARTICULO,'') <> '' THEN IART.CODCUM
							ELSE A_SER.IDSERVICIO 
						END CODCUPS, CONVERT(VARCHAR,COALESCE(HPRED.CANTIDAD,0)), CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),COALESCE(HPRED.VALOR,0))), 
						CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),COALESCE(HPRED.CANTIDAD * HPRED.VALOR,0)))
				FROM   HPRED INNER JOIN HPRE ON HPRED.NOPRESTACION    = HPRE.NOPRESTACION
								LEFT JOIN SER  ON HPRED.IDSERVICIO      = SER.IDSERVICIO
								LEFT JOIN SER A_SER ON HPRED.CODCUPS    = A_SER.IDSERVICIO
								LEFT JOIN IART ON      HPRED.IDARTICULO = IART.IDARTICULO  
				WHERE  HPRE.NOADMISION             = @NOADMISION
				AND    COALESCE(HPRE.ANULADO, 0)   = 0 
				AND    COALESCE(HPRED.ANULADO, 0)  = 0 
				AND    COALESCE(HPRED.ENCARGOS, 0) = 0  
				AND    HPRED.IDTERCEROCA = CASE @TIPOANEXO WHEN  'Tercero' THEN @IDTERCERO
															WHEN  'TerceroPlan' THEN @IDTERCERO
															ELSE  HPRED.IDTERCEROCA
											END
				AND    HPRED.IDPLAN      = CASE @TIPOANEXO WHEN 'TerceroPlan' THEN @IDPLAN
															ELSE  HPRED.IDPLAN
											END
				AND    COALESCE(HPRED.NOCOBRABLE,0)  = CASE WHEN DBO.FNK_VALORVARIABLE('ANEXOIMPNOCOBRABLE') <> 'SI' THEN 0
															ELSE COALESCE(HPRED.NOCOBRABLE,0)
														END
				AND    ISNULL(HPRED.PAQUETE,'')      = CASE WHEN DBO.FNK_VALORVARIABLE('VISUALIZA_DETPAQUETE') = 'SI' THEN ''
															ELSE ISNULL(HPRED.PAQUETE,'')
														END
				AND    COALESCE(HPRED.IDCIRUGIA,'') = @IDCIRUGIA
				AND    SER.PREFIJO                  = @PREFIJO

				FETCH NEXT FROM C_PRE INTO @PREFIJO ,@TOTALPREFIJO ,@VECES
			END
			CLOSE C_PRE
			DEALLOCATE C_PRE

			FETCH NEXT FROM C_CX INTO @IDCIRUGIA
			END
			CLOSE C_CX
			DEALLOCATE C_CX
			--TOTALES DEL ANEXO
			IF (SELECT COUNT(*) FROM #ANEXO) > 0
			BEGIN
			   SELECT @VLR_COPAGOEXT = COALESCE(HADM.VLR_COPAGOEXTERNO,0), @OBSERVACION = HADM.OBS FROM HADM WHERE NOADMISION = @NOADMISION
			   SELECT @VRTOTAL       = SUM(COALESCE(HPRED.CANTIDAD,0)*COALESCE(HPRED.VALOR,0))
			   FROM   HPRED INNER JOIN HPRE ON HPRED.NOPRESTACION    = HPRE.NOPRESTACION
			   WHERE  HPRE.NOADMISION             = @NOADMISION
			   AND    COALESCE(HPRE.ANULADO, 0)   = 0 
			   AND    COALESCE(HPRED.ANULADO, 0)  = 0 
			   AND    COALESCE(HPRED.ENCARGOS, 0) = 0  
			   AND    HPRED.IDTERCEROCA = CASE @TIPOANEXO WHEN  'Tercero' THEN @IDTERCERO
															   WHEN  'TerceroPlan' THEN @IDTERCERO
															   ELSE  HPRED.IDTERCEROCA
										   END
			   AND    HPRED.IDPLAN      = CASE @TIPOANEXO WHEN 'TerceroPlan' THEN @IDPLAN
															   ELSE  HPRED.IDPLAN
										   END
			   AND    COALESCE(HPRED.NOCOBRABLE,0)  = CASE WHEN DBO.FNK_VALORVARIABLE('ANEXOIMPNOCOBRABLE') <> 'SI' THEN 0
															   ELSE COALESCE(HPRED.NOCOBRABLE,0)
													   END
			   AND    ISNULL(HPRED.PAQUETE,'')      = CASE WHEN DBO.FNK_VALORVARIABLE('VISUALIZA_DETPAQUETE') = 'SI' THEN ''
															   ELSE ISNULL(HPRED.PAQUETE,'') 
         END
		
			SELECT @VLRCOPAGO =SUM(COALESCE(HPRED.VALORCOPAGO,0)), @VLRPCOMP =SUM(COALESCE(HPRED.VALORPCOMP,0)) 
			FROM   HPRED INNER JOIN HPRE ON HPRED.NOPRESTACION = HPRE.NOPRESTACION
			WHERE  HPRE.NOADMISION         = @NOADMISION 
			AND    HPRED.IDTERCEROCA = CASE @TIPOANEXO WHEN  'Tercero' THEN @IDTERCERO
														WHEN  'TerceroPlan' THEN @IDTERCERO
														ELSE  HPRED.IDTERCEROCA
										END
			AND    HPRED.IDPLAN      = CASE @TIPOANEXO WHEN 'TerceroPlan' THEN @IDPLAN
														ELSE  HPRED.IDPLAN
										END

			--SELECT @VLRCOPAGO

			IF @VLR_COPAGOEXT > @VLRCOPAGO
				SELECT @TOTALCOPAGOS = 0
			ELSE
				SELECT @TOTALCOPAGOS = @VLRCOPAGO -@VLR_COPAGOEXT

			SELECT @VLRADMIN = @VRTOTAL - @VLRPCOMP - @TOTALCOPAGOS

			SELECT @VLRABONOS = SUM(COALESCE(QXDING.VALOR,0)) FROM QXDING WHERE NOINGRESO =@NOADMISION 
			AND    DEVUELTO   = 0 
			AND    IDTERCERO  = CASE @TIPOANEXO WHEN  'Tercero' THEN @IDTERCERO
												WHEN  'TerceroPlan' THEN @IDTERCERO
												ELSE  IDTERCERO
								END
            
			SELECT @VLRABONOS = COALESCE(@VLRABONOS,0)

			SELECT @DTO = SUM(CASE WHEN TIPODTO='V' THEN COALESCE(DESCUENTO,0) ELSE (@VLRADMIN * COALESCE(DESCUENTO,0))/100 END)  
			FROM   HADMDT 
			WHERE  NOADMISION = @NOADMISION
			AND    IDTERCERO  = CASE @TIPOANEXO WHEN  'Tercero' THEN @IDTERCERO
												WHEN  'TerceroPlan' THEN @IDTERCERO
												ELSE  IDTERCERO
								END
			SELECT @DTO = COALESCE(@DTO,0)
			SELECT @SALDO     = @VLRADMIN - @VLRABONOS -@DTO
			SELECT @VLRABONOS = @VLRABONOS+@DTO
			SELECT @TOTALCOPAGOS=@VLRCOPAGO + @VLR_COPAGOEXT
			IF @SALDO < 0
				SELECT @TITAF  = 'SALDO A FAVOR:' ,@SALDO  = 0 ,@AFAVOR = @VLRABONOS - @VLRADMIN
			ELSE
				SELECT @TITAF  = '', @AFAVOR = 0
			END --DEL IF DE TOTALES DEL ANEXO

			IF (SELECT COUNT(*) FROM #ANEXO) = 0
			BEGIN
			SELECT 'KO' OK, 'SIN REGISTROS' ERROR
			END
			ELSE
			BEGIN
			SELECT 'OK' OK, @NOADMISION ADMISION
			SELECT TIPORENGLON ,IDCIRUGIA ,NOMCIRUGIA ,PREFIJO ,NOM_PREFIJO ,FECHA ,IDAREA ,IDSERVICIO ,DESCSERVICIO ,CODCUPS ,CANTIDAD
					,VALOR ,VRITEM ,TOTALPREFIJO 
			FROM   #ANEXO ORDER BY IDCIRUGIA, PREFIJO
			DROP TABLE #ANEXO
			SELECT CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@VRTOTAL))  TOTALCOSTOSERVICIO  ,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@VLRCOPAGO)) COPAGOSINTERNOS           
					,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@VLR_COPAGOEXT)) COPAGOEXTERNO  ,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@TOTALCOPAGOS)) TOTALCOPAGOS
					,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@VLRPCOMP)) TOTALPAGOCOMPARTIDO ,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@VLRADMIN)) TOTALFACTURAADMINISTRADORA 
					,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@VLRABONOS)) TOTALABONOSYDESCUENTOS
					,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@SALDO))    SALDOPENDIENTE      ,@TITAF     TITULOAFAVOR              
					,CONVERT(VARCHAR,CONVERT(DECIMAL(18,2),@AFAVOR))    AFAVOR
			END
		END
		RETURN
	END
	IF @METODO = 'CRUD'
	BEGIN
		PRINT 'INGRESE A CRUD'
		SELECT @REGISTRO = REGISTRO 	, @DATOSITEDS = DATOSITEDS
		FROM OPENJSON (@PARAMETROS) WITH (REGISTRO	NVARCHAR(MAX) AS JSON 
										,DATOSITEDS NVARCHAR(MAX) AS JSON )

		SELECT  @FECHA               =FECHA                 , @HORA            =HORA            , @NOADMISION       =NOADMISION        , @TTRIAGE           =TTRIAGE              
			, @CNSTRIAGE             =CNSTRIAGE             , @EXPTRIAGE       =EXPTRIAGE       , @TIPO_DOC         =TIPO_DOC          , @DOCIDAFILIADO     =DOCIDAFILIADO        
			, @EDAD                  =EDAD                  , @IDAFILIADO      =IDAFILIADO      , @NOMBREAFI        =NOMBREAFI         , @NIVELSOCIEC       =NIVELSOCIEC          
			, @IDTERCERO             =IDTERCERO             , @RAZONSOCIALHADM =RAZONSOCIALHADM , @NITHADM          =NITHADM           , @IDPLAN            =IDPLAN               
			, @IDEMEDICAREMITE       =IDEMEDICAREMITE       , @CNSHACTRAN      =CNSHACTRAN      , @TIPOPOLIZA       =COALESCE(TIPOPOLIZA,'Vigente'), @NOPOLIZA          =NOPOLIZA             
			, @HABCAMA               =HABCAMA               , @IDTERCEROREMITE =IDTERCEROREMITE , @CIUREMITE        =CIUREMITE         , @RAZONSOCIALREMITE =RAZONSOCIALREMITE    
			, @NOMBRECIUREMITE       =NOMBRECIUREMITE       , @TIPOESTANCIA    =TIPOESTANCIA    , @TIPOESTANCIADESC =TIPOESTANCIADESC  , @URG_VINCULO       =URG_VINCULO          
			, @NOMBREIDEMEDICAREMITE =NOMBREIDEMEDICAREMITE , @URG_NOMBRE      =URG_NOMBRE      , @URG_TELE         =URG_TELE          , @RESPCUENTA        =RESPCUENTA  
			, @URG_DIR               =URG_DIR
			, @NOMBRERESPO           =NOMBRERESPO           , @TELEFONORESPO   =TELEFONORESPO   , @PARENTESCORESPO  =PARENTESCORESPO   
			, @TIPOADM               =(SELECT VALOR FROM OPENJSON(tipoadm)      WITH (VALOR VARCHAR(2) '$.value'))                         
			, @VIAINGRESO            =(SELECT VALOR FROM OPENJSON(viaingreso)   WITH (VALOR VARCHAR(1) '$.value'))                         
			, @CAUSAEXTERNA          =(SELECT VALOR FROM OPENJSON(causaexterna) WITH (VALOR VARCHAR(2) '$.value'))                             
			, @MANCOPAGOEXTERNO		 =MANCOPAGOEXTERNO		, @NOAUTORIZACIONEXT =NOAUTORIZACIONEXT    
			, @VLR_COPAGOEXTERNO     =VLR_COPAGOEXTERNO     , @PROCESO         = PROCESO
			, @IDSEDE					 =COALESCE(IDSEDE,@IDSEDE)
			, @NOAUTORIZACION		 =NOAUTORIZACION		, @ESEINST			=ESEINST		, @FECHAESEINST = REPLACE(FECHAESEINST,'-','')
			, @TOPECOPAGO_ANX6		 =IIF(COALESCE(TOPECOPAGO_ANX6,'')='',0,TOPECOPAGO_ANX6)		,@copagoConsulta = copagoConsulta		,@copagoFarmaco	= copagoFarmaco	
			, @copagoExamen		= copagoExamen, @EMBARAZADA = EMBARAZADA
		FROM OPENJSON (@REGISTRO)																	 
		WITH (              																		 	
				PROCESO               VARCHAR(20)   '$.modo',
				NOADMISION            VARCHAR(16)   '$.noadmision',
				FECHA                 VARCHAR(20)   '$.fecha',
				HORA                  VARCHAR(10)   '$.hora',                     
				TIPO_DOC              VARCHAR(3)    '$.tipo_doc',                 
				IDAFILIADO            VARCHAR(20)   '$.idafiliado',               
				DOCIDAFILIADO         VARCHAR(20)   '$.docidafiliado',            
				TTRIAGE               BIT           '$.ttriage'      ,                 
				CNSTRIAGE             VARCHAR(20)   '$.cnstriage'    ,                
				EXPTRIAGE             VARCHAR(100)  '$.exptriage'    ,                
				EDAD                  VARCHAR(20)   '$.edad'         ,                     
				NOMBREAFI             VARCHAR(100)  '$.nombreafi'    ,                
				NIVELSOCIEC           VARCHAR(2)    '$.nivelsociec'  , 
				URG_NOMBRE            VARCHAR(100)  '$.urg_nombre'   ,              
				URG_DIR               VARCHAR(60)   '$.urg_dir'      , 
				URG_VINCULO           VARCHAR(100)  '$.urg_vinculo'  ,              
				URG_TELE              VARCHAR(100)  '$.urg_tele'     ,                
				RAZONSOCIALHADM       VARCHAR(255)  '$.razonsocialhadm',          
				NITHADM               VARCHAR(20)   '$.nithadm',                  
				IDTERCERO             VARCHAR(20)   '$.idtercero',                
				IDPLAN                VARCHAR(6)    '$.idplan',                   
				RESPCUENTA            VARCHAR(45)  '$.respcuenta',              
				NOMBRERESPO           VARCHAR(100)  '$.nombrerespo',             
				PARENTESCORESPO       VARCHAR(100)  '$.parentescorespo',         
				TELEFONORESPO         VARCHAR(100)  '$.telefonorespo',           
				tipoadm               NVARCHAR(MAX) AS JSON,                 
				causaexterna          NVARCHAR(MAX) AS JSON,            
				viaingreso            NVARCHAR(MAX) AS JSON,             
				HABCAMA               VARCHAR(10)   '$.habcama',                  
				TIPOESTANCIA          VARCHAR(20)   '$.tipoestancia',             
				TIPOESTANCIADESC      VARCHAR(100)  '$.tipoestanciadesc',         
				CNSHACTRAN            VARCHAR(20)   '$.cnshactran',               
				NOPOLIZA              VARCHAR(20)   '$.nopoliza',                 
				IDSEDE                VARCHAR(20)   '$.idsede',                 
				--TITULARPOLIZA         
				TIPOPOLIZA            VARCHAR(13)   '$.tipopoliza',               
				MANCOPAGOEXTERNO      BIT           '$.mancopagoexterno',        
				NOAUTORIZACIONEXT     VARCHAR(20)   '$.noautorizacionext',       
				VLR_COPAGOEXTERNO     DECIMAL(14,2) '$.vlr_copagoexterno',
				IDTERCEROREMITE       VARCHAR(10)   '$.idterceroremite',          
				CIUREMITE             VARCHAR(5)    '$.ciuremite',                
				IDEMEDICAREMITE       VARCHAR(20)   '$.idemedicaremite',          
				RAZONSOCIALREMITE     VARCHAR(255)  '$.razonsocialremite',        
				NOMBRECIUREMITE       VARCHAR(200)  '$.nombreciuremite',
				NOMBREIDEMEDICAREMITE VARCHAR(100)  '$.nombreidemedicaremite', 
				NOAUTORIZACION		  VARCHAR(20)   '$.noautorizacion',
				ESEINST				  VARCHAR(50)   '$.eseinst',
				FECHAESEINST		  VARCHAR(12)   '$.fechaeseinst',
				TOPECOPAGO_ANX6		  VARCHAR(20)   '$.topecopago_anx6',
				TOPECOPAGO_ANX6		  VARCHAR(20)   '$.topecopago_anx6',
				TOPECOPAGO_ANX6		  VARCHAR(20)   '$.topecopago_anx6',
				copagoConsulta		  DECIMAL(14,2)   '$.copagoConsulta',
				copagoFarmaco		  DECIMAL(14,2)   '$.copagoFarmaco',
				copagoExamen		  DECIMAL(14,2)   '$.copagoExamen',
				EMBARAZADA			  BIT			  '$.embarazada'
		)

		SELECT * INTO #AFILIADOSITEDS FROM   
		OPENJSON (@DATOSITEDS) WITH (   
            apMaternoAse				VARCHAR(50)		'$.apMaternoAse',
            apMaternoContratante		VARCHAR(50)		'$.apMaternoContratante',
            apMaternoTitular			VARCHAR(50)		'$.apMaternoTitular',
            apPaternoAse				VARCHAR(50)		'$.apPaternoAse',
            apPaternoContratante		VARCHAR(100)	'$.apPaternoContratante', 
            apPaternoTitular			VARCHAR(50)		'$.apPaternoTitular',
            codiAse						VARCHAR(50)		'$.codiAse',
            codiErrorSW					VARCHAR(12)		'$.codiErrorSW',
            codiEstAse					VARCHAR(12)		'$.codiEstAse',
            codiEstadoMaritalAse		VARCHAR(12)		'$.codiEstadoMaritalAse',
            codiGeneroAse				VARCHAR(12)		'$.codiGeneroAse',
            codiIAFAS					VARCHAR(12)		'$.codiIAFAS',
            codiParentescoAse			VARCHAR(12)		'$.codiParentescoAse',
            codiProducto				VARCHAR(12)		'$.codiProducto',
            codiTipoAfiliacionAse		VARCHAR(12)		'$.codiTipoAfiliacionAse',
            codiTipoDocAse				VARCHAR(12)		'$.codiTipoDocAse',
            codiTipoDocContratante		VARCHAR(12)		'$.codiTipoDocContratante',
            codiTipoDocTitular			VARCHAR(12)		'$.codiTipoDocTitular',
            codiTipoPlanSaludAse		VARCHAR(12)		'$.codiTipoPlanSaludAse',
            codiTitular					VARCHAR(12)		'$.codiTitular',
            contratoAse					VARCHAR(12)		'$.contratoAse',
            descEstAse					VARCHAR(12)		'$.descEstAse',
            descEstadoMaritalAse		VARCHAR(50)		'$.descEstadoMaritalAse',
            descParentescoAse			VARCHAR(50)		'$.descParentescoAse',
            descProducto				VARCHAR(50)		'$.descProducto',
            descTipoAfiliacionAse		VARCHAR(50)		'$.descTipoAfiliacionAse',
            descTipoDocAse				VARCHAR(50)		'$.descTipoDocAse',
            descTipoDocContratante		VARCHAR(50)		'$.descTipoDocContratante',
            descTipoDocTitular			VARCHAR(50)		'$.descTipoDocTitular',
            descTipoPlanSaludAse		VARCHAR(50)		'$.descTipoPlanSaludAse',
            fecAfiliacionTitular		VARCHAR(12)		'$.fecAfiliacionTitular',
            fecFinVigenciaAse			VARCHAR(12)		'$.fecFinVigenciaAse',
            fecIniVigenciaAse			VARCHAR(12)		'$.fecIniVigenciaAse',
            fecNacimientoAse			VARCHAR(12)		'$.fecNacimientoAse',
            nombreAse					VARCHAR(50)		'$.nombreAse',
            nombreContratante			VARCHAR(12)		'$.nombreContratante',
            nombreTitular				VARCHAR(12)		'$.nombreTitular',
            nroPlanAse					VARCHAR(12)		'$.nroPlanAse',
            nroTipoDocAse				VARCHAR(12)		'$.nroTipoDocAse',
            nroTipoDocContratante		VARCHAR(20)		'$.nroTipoDocContratante',
            nroTipoDocTitular			VARCHAR(20)		'$.nroTipoDocTitular',
            polizaAse					VARCHAR(20)		'$.polizaAse',
			COPAGOCONSULTA				VARCHAR(20)		'$.COPAGOCONSULTA',
			ID_TIPO_COBERTURA			VARCHAR(20)		'$.ID_TIPO_COBERTURA',
			ID_COPAGOCONSULTA_DESC		VARCHAR(20)		'$.ID_COPAGOCONSULTA_DESC',
			COPAGOVARIABLECONSULTA		VARCHAR(20)		'$.COPAGOVARIABLECONSULTA',
			COPAGOEXAMEN				VARCHAR(20)		'$.COPAGOEXAMEN',
			COPAGODX					VARCHAR(20)		'$.COPAGODX',
			COPAGOCONSULTA_DESC			VARCHAR(200)	'$.COPAGOCONSULTA_DESC',
			CODIPRESS					VARCHAR(20)		'$.CODIPRESS',
			nroContratante				VARCHAR(20)		'$.nroContratante',
			DETALLE						NVARCHAR(MAX) AS JSON)

		 SELECT @DETALLESITEDS =	(SELECT DETALLE FROM #AFILIADOSITEDS )
		 SELECT * INTO #DETALLESITEDS 
		 FROM   OPENJSON (@DETALLESITEDS) WITH (   
                codiTipCobertura			VARCHAR(13)		'$.codiTipCobertura',
				codiSubTipCobertura		VARCHAR(20)		'$.codiSubTipCobertura',
				descSubTipCobertura		VARCHAR(100)    '$.descSubTipCobertura',
				coCalServicio			VARCHAR(20)     '$.coCalServicio',
				descCopagoFijo			VARCHAR(20)		'$.descCopagoFijo',
				copagoFijo				VARCHAR(10)		'$.copagoFijo',
				copagoVariable			VARCHAR(50)		'$.copagoVariable'
		)
		--SELECT TOP 100   * FROM #AFILIADOSITEDS
		--SELECT TOP 100   * FROM #DETALLESITEDS

		
		IF UPPER(@PROCESO)= 'INSERTAR'
		BEGIN
			-- ANTES DE INSERTAR SE HACE VALIDACIONES
			IF (  SELECT COUNT(*) FROM HADM 
				WHERE  HADM.IDAFILIADO  = @IDAFILIADO
				AND    HADM.CLASEING    = 'A'
				AND    HADM.CERRADA     = 0
				AND    COALESCE(HADM.PREADMISION,0) <> 1
			) > 0
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Usuario ya esta Admitido'

			IF ( SELECT ESTADO FROM AFI WHERE IDAFILIADO = @IDAFILIADO) <> 'Activo'
				INSERT INTO @TBLERRORES(ERROR) SELECT 'Paciente INACTIVO...'

			IF DBO.FNK_VALORVARIABLE('AFI_VALIDAPPT') = 'SI'
				IF (SELECT COUNT(*) FROM PPT 
					WHERE ESTADO='Activo' 
					AND   EXISTS (SELECT * FROM AFI WHERE AFI.IDADMINISTRADORA=PPT.IDTERCERO AND AFI.IDPLAN=PPT.IDPLAN AND AFI.IDAFILIADO=@IDAFILIADO)
					) = 0
				INSERT INTO @TBLERRORES(ERROR) SELECT 'El contrato para este afiliado esta inactivo, debe asignarle un nuevo contrato'

			IF @HABCAMA <> ''
				IF (SELECT ESTADOHAB FROM HHAB WHERE HHAB.HABCAMA = @HABCAMA) <> 'Libre'
				BEGIN
					IF (SELECT COUNT(1) FROM HHAB WHERE ESTADOHAB='Reservada' AND IDAFILIADO=@IDAFILIADO)<=0
					INSERT INTO @TBLERRORES(ERROR) SELECT 'La Habitaci? seleccionada No se encuentra Disponible'
				END	
			IF @TTRIAGE = 1
			BEGIN
				IF NOT EXISTS(SELECT CNSTRIAGE FROM HTRIAGE WHERE CNSTRIAGE = @CNSTRIAGE)
					INSERT INTO @TBLERRORES(ERROR) SELECT 'Consecutivo de Triage NO Existe.'
				IF (SELECT IDAFILIADO FROM HTRIAGE WHERE CNSTRIAGE = @CNSHACTRAN) <> @IDAFILIADO
					INSERT INTO @TBLERRORES(ERROR) SELECT 'Paciente de la Admisi?, no corresponde con el Paciente del Triage.'
				IF (SELECT ATENDIDO FROM HTRIAGE WHERE CNSTRIAGE = @CNSTRIAGE) = 1     
					INSERT INTO @TBLERRORES(ERROR) SELECT 'Consecutivo de Triage Ya fue Atendido.'
			END
			IF DBO.FNK_VALORVARIABLE('IDMANEJATRIAGE')='SI' AND @TTRIAGE=0
				IF EXISTS(SELECT * FROM HTRIAGE WHERE IDAFILIADO = @IDAFILIADO AND ATENDIDO=2 AND FECHA >= DATEADD(HOUR,-2,GETDATE()))
					INSERT INTO @TBLERRORES(ERROR) SELECT 'El paciente Tiene un Triage Realizado que no ha sido Traido Debe Traerlo'
			IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
			BEGIN
				SELECT 'KO' OK, '' CONSECUTIVO
				SELECT ERROR FROM @TBLERRORES
				RETURN
			END
			--SI CONTINUA ES PQ NO SE ENCONTRO ERROR
			--
			PRINT '@NOMBRERESPO: '+ @NOMBRERESPO
			BEGIN TRANSACTION
			BEGIN TRY
				EXEC SPK_GENCONSECUTIVO '01',@IDSEDE,'@HADM', @NVOCONSEC OUTPUT  
				SELECT @NVOCONSEC = @IDSEDE + REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0) 
				--EXEC SPQ_GENSEQUENCE @SEDE = @IDSEDE, @PREFIJO = '@HADM', @NVOCONSEC = @NVOCONSEC OUTPUT


				INSERT INTO HADM(  NOADMISION   ,IDSEDE ,FECHA   ,TTRIAGE      ,CNSTRIAGE     ,IDAFILIADO        ,NIVELSOCIOEC      ,IDTERCERO            
									,IDPLAN       ,IDEMEDICAREMITE ,CNSHACTRAN   ,TIPOPOLIZA    ,NOPOLIZA          ,HABCAMA           ,IDTERCEROREMITE ,CIUREMITE            
									,TIPOESTANCIA ,URG_VINCULO     ,URG_NOMBRE   ,URG_TELE      ,RESPCUENTA        ,NOMBRERESPO       ,TELEFONORESPO   ,PARENTESCORESPO      
									,TIPOADM      ,VIAINGRESO      ,CAUSAEXTERNA ,MANCOPAGOEXT  ,NOAUTORIZACIONEXT ,VLR_COPAGOEXTERNO ,CLASEING 
									,CERRADA      ,FACTURABLE      ,USUARIO      ,PCUBRIMIENTO  ,TIPODISCAP        ,GRADODISCAP
									--agrego campos faltantes de clarion OSOLANO-20230829
									,CAUSASALIDA  ,ESTADOPSALIDA   ,ESTADO		 ,FACTURADA     ,DESTINO		   ,ESTADOSALIDA	  ,RIPS				
									,TIPOTOPE	  ,TIPOCONT		   ,PYP			 ,FECHAPRE		,DECLARIESGOS		,ESINSTPROV		  ,TIPOADMINI
									,ESTADIO	  ,NOAUTORIZACION  ,ESEINST		 ,FECHAESEINST	,TOPECOPAGO_ANX6,	EMBARAZADA) --PENDIENTE HADM.TIPOAFILIADO
				SELECT @NVOCONSEC       ,@IDSEDE         ,GETDATE()        ,@TTRIAGE       ,@CNSTRIAGE        ,@IDAFILIADO        ,@NIVELSOCIEC     
						,@IDTERCERO       ,@IDPLAN       ,@IDEMEDICAREMITE ,COALESCE(@CNSHACTRAN,'')    ,@TIPOPOLIZA       ,@NOPOLIZA          ,@HABCAMA             ,@IDTERCEROREMITE  
						,@CIUREMITE       ,@TIPOESTANCIA ,@URG_VINCULO     ,@URG_NOMBRE    ,@URG_TELE         ,LEFT(@RESPCUENTA,45)        ,LEFT(@NOMBRERESPO,45)         ,@TELEFONORESPO    
						,@PARENTESCORESPO ,@TIPOADM      ,@VIAINGRESO      ,@CAUSAEXTERNA  ,@MANCOPAGOEXTERNO ,@NOAUTORIZACIONEXT ,@VLR_COPAGOEXTERNO   ,
                  CASE WHEN DBO.FNK_VALORVARIABLE('IXCOUNTRY')='PERU' THEN 'P' ELSE 'A' END
						,0                ,1             ,@USUARIO         ,100            ,'N'               ,'N'				
						,'OR'			  ,1			 ,''			   ,0			   ,4				  ,'N'				,0						
						,'Fecha'		  ,'I'			 ,0				   ,DBO.FNK_FECHA_SIN_MLS(GETDATE())	   ,'Manifiesto no ser Alérgico a ninguna Sustancia',3			,'02'
						,98				  ,@NOAUTORIZACION, @ESEINST	   ,CASE COALESCE(@FECHAESEINST,'') WHEN '' THEN NULL ELSE @FECHAESEINST END, @TOPECOPAGO_ANX6, @EMBARAZADA
					

				IF @TIPOADM =  DBO.FNK_VALORVARIABLE('IDTARIFASOAT')
				BEGIN
					SELECT  @SIRAS = COALESCE(SIRAS,'') ,@CONSECUTIVO= COALESCE(CONSECUTIVO,''),  @CNSHACTRAN =COALESCE(CNSHACTRAN,'')  , @VALORTOTAL = COALESCE(VALORTOTAL,0) 
					FROM OPENJSON(@REGISTRO) --PARA GUARDAR EL SIRAS EN HACTRAND
					WITH( SIRAS	VARCHAR(20) '$.SIRAS'
						,CONSECUTIVO		VARCHAR(20) '$.CONSECUTIVO'
						,CNSHACTRAN			VARCHAR(20) '$.cnshactran'
						,VALORTOTAL             DECIMAL(14,2) '$.VALORTOTAL'
						)
					PRINT 'AGREGO UN NUEVO DETALLE DE HACTRAND CON EL NUEVO CONSUMO'
					SELECT @ITEM = COUNT(ITEM)+1 FROM HACTRAND WHERE  CNSHACTRAN	=@CNSHACTRAN 
					INSERT INTO HACTRAND ( CNSHACTRAN, ITEM, PROCEDENCIA,  NOREFERENCIA , N_FCT_ASEG, VLRGASTADO, SIRAS	, ESTADOCONC, ESTADOEMBRIAGUEZ )
						VALUES  ( @CNSHACTRAN , 1 , 'QX' , @NVOCONSEC , NULL , @VALORTOTAL  , @SIRAS , 'Alerta', 'No'    )
				END
				IF(SELECT DBO.FNK_VALORVARIABLE ('IXCOUNTRY')) = 'PERU'
				BEGIN
					INSERT INTO HADMCOPAGO ( NOADMISION, CODOM, PORCENTAJE)
					SELECT @NVOCONSEC, (SELECT DBO.FNK_VALORVARIABLE('OMCODINTERCONSULTA')), @copagoConsulta UNION
					SELECT @NVOCONSEC, (SELECT DBO.FNK_VALORVARIABLE('PREFIJOMEDICAMENTOS')), @copagoFarmaco UNION
					SELECT @NVOCONSEC, (SELECT DBO.FNK_VALORVARIABLE('PREFIJOLABORATORIO')), @copagoExamen 

					UPDATE HADM SET COPAGOVALOR = COALESCE(@copagoConsulta,0) , COPA_VAR_PORC = COALESCE(@copagoFarmaco,0) WHERE HADM.NOADMISION = @NVOCONSEC
				END
				-- SE INGRESA REQUERIMIENTO CONFIGURADOS EN LA ADMISION
				INSERT INTO HREQ(NOADMISION,TIPOREQ, IDREQUERIMIENTO, CUMPLIDO)
				SELECT @NVOCONSEC, REQ.TIPOREQ, REQ.IDREQUERIMIENTO, 0
				FROM   REQ
				WHERE  REQ.IDTERCERO = @IDTERCERO
				AND    REQ.TIPOADM   = @TIPOADM
				-- NIVELES DE ATENCION
				INSERT INTO HNAT(NOADMISION ,NOITEM ,  FECHA,  NIVELATENCION ,USUARIO ,SYS_ComputerName ,FECHAREGISTRO,
									APLICADO, VALIDADO, USUARIOVAL, CCOSTO, HABCAMA,         TIPOESTANCIA)
				SELECT @NVOCONSEC, 1, GETDATE(), HTAD.NIVELATENCION, @USUARIO, USUSU.SYS_ComputerName, GETDATE(), 1,
						CASE WHEN DBO.FNK_VALORVARIABLE('MARCA_REVISADO_HNAT')='SI' THEN 1 ELSE 0 END,
						CASE WHEN DBO.FNK_VALORVARIABLE('MARCA_REVISADO_HNAT')='SI' THEN @USUARIO ELSE NULL END,
						CASE WHEN HTAD.REQHABCAMA = 1 AND COALESCE(HHAB.CCOSTO,'') = '' THEN HTAD.CCOSTO ELSE HHAB.CCOSTO END, HADM.HABCAMA, HADM.TIPOESTANCIA
				FROM   HADM INNER JOIN HTAD ON HTAD.TIPOADM = HADM.TIPOADM
								LEFT JOIN HHAB ON HADM.HABCAMA = HHAB.HABCAMA
						, USUSU
				WHERE  HADM.NOADMISION = @NVOCONSEC
					AND    USUSU.USUARIO   = @USUARIO

				UPDATE HNAT SET IDAREAFUNCIONAL = CEN.IDAREA, IDAREA = AFU.IDAREAH
				FROM   CEN INNER JOIN AFU ON CEN.IDAREA = AFU.IDAREA
				WHERE  CEN.CCOSTO = HNAT.CCOSTO
					AND    HNAT.NOADMISION = @NVOCONSEC
					AND    HNAT.NOITEM     = 1

				-- ESTADO DE LA HHAB
				UPDATE HHAB SET ESTADOHAB='Ocupada', NOADMISION=@NVOCONSEC,IDAFILIADO =HADM.IDAFILIADO, TIPOESTANCIA=HADM.TIPOESTANCIA
				FROM   HADM
				WHERE  HHAB.HABCAMA = HADM.HABCAMA
				AND    HADM.NOADMISION = @NVOCONSEC

				-- TRIAGE
				UPDATE HTRIAGE SET ATENDIDO = 1 
				FROM   HADM
				WHERE  HTRIAGE.CNSTRIAGE = HADM.CNSTRIAGE
				AND    HADM.NOADMISION = @NVOCONSEC

				-- CREA EPICRISIS
				IF DBO.FNK_VALORVARIABLE('EPI_CREADAENADMI') = 'SI'
					EXEC SPK_CREA_EPICRISIS @NVOCONSEC, '01', @IDSEDE

				-- INSERTA DATOS COMO ESTA EN AFI
				UPDATE HADM SET IDPLAN_AFI = AFI.IDPLAN, IDTERCERO_AFI = AFI.IDADMINISTRADORA
				FROM   AFI
				WHERE  HADM.IDAFILIADO = AFI.IDAFILIADO
				AND    HADM.NOADMISION = @NVOCONSEC

				-- ACTUALIZA CAMPOS DE HADM PARA CTC Y TIPOHTX
				UPDATE HADM SET USACTC  = CASE WHEN DBO.FNK_VALORVARIABLE('UTILIZACTC') = 'SI' THEN 1 ELSE 0 END,
								TIPOHTX = CASE WHEN DBO.FNK_VALORVARIABLE('TIPOHTX') = 'HORIZONTAL' THEN 1 ELSE 0 END
				WHERE  HADM.NOADMISION = @NVOCONSEC

				--REQ 6602  SELECT * FROM RCONREF
				IF EXISTS (SELECT 1 FROM RCONREF INNER JOIN TGEN ON TABLA='RCONREF' AND CAMPO='ESTADO' AND DESCRIPCION=RCONREF.ESTADO WHERE IDPACIENTE=@IDAFILIADO AND CLASE='Referencia' AND TGEN.VALOR1<>'2') --TGEN VALOR1 1 Pendiente, 2.Finalizada, 3.Pendiente cama
				BEGIN
					SELECT TOP 1 @CNSREFE=CNSREFE FROM RCONREF INNER JOIN TGEN ON TABLA='RCONREF' AND CAMPO='ESTADO' AND DESCRIPCION=RCONREF.ESTADO WHERE IDPACIENTE=@IDAFILIADO AND CLASE='Referencia' AND TGEN.VALOR1<>'2' ORDER BY FECHA DESC
				
					INSERT INTO RCONREFD (CNSREFE, FECHA, OBSERVACION, DECISION, USUARIOREG, FECHAREG)
					SELECT @CNSREFE, CONVERT(DATE,GETDATE()), 'Paciente admitido en IPS, Registro Automatico desde admisiones','Admitido', @USUARIO, GETDATE()

					UPDATE RCONREF SET ESTADO='Admitido' WHERE CNSREFE=@CNSREFE
				END	
				IF EXISTS (SELECT   * FROM #AFILIADOSITEDS)
				BEGIN
					SELECT @IDTERCERO = IDTERCERO, @IDAFILIADO = IDAFILIADO, @IDSEDE = IDSEDE FROM HADM WHERE  NOADMISION = @NVOCONSEC

					INSERT INTO CITSITEDS (CONSECUTIVO,SEDE_SITEDS,IDTERCERO_SITEDS, USUARIO, FECHA,COPAGOCONSULTA, COPAGOVARIABLECONSULTA, ID_COPAGOCONSULTA_DESC, COPAGOCONSULTA_DESC, ID_TIPO_COBERTURA  , IDAFILIADO, PROCEDENCIA , ESTADO)
					SELECT @NVOCONSEC, @IDSEDE , @IDTERCERO, @USUARIO, DBO.FNK_GETDATE(),CAST( COALESCE(COPAGOCONSULTA,0) AS DECIMAL(14,2)), CAST( COALESCE(COPAGOVARIABLECONSULTA,0) AS DECIMAL(14,2)), ID_COPAGOCONSULTA_DESC, COPAGOCONSULTA_DESC, ID_TIPO_COBERTURA, @IDAFILIADO , 'HADM', 'Activo'
					FROM #AFILIADOSITEDS
					--polizaAse
					INSERT INTO CONSSITEDS  ( CONSECUTIVO,  IDAFILIADO, IDTERCERO, USUARIO, FECHA,  AFIapMaternoAse, AFIapMaternoContratante, AFIapMaternoTitular
						, AFIapPaternoAse, AFIapPaternoContratante, AFIapPaternoTitular, AFIcodiAse, AFIcodiErrorSW, AFIcodiEstAse, AFIcodiEstadoMaritalAse, AFIcodiGeneroAse, AFIcodiIAFAS, AFIcodiParentescoAse
						, AFIcodiProducto, AFIcodiTipoAfiliacionAse, AFIcodiTipoDocAse, AFIcodiTipoDocContratante, AFIcodiTipoDocTitular, AFIcodiTipoPlanSaludAse, AFIcodiTitular, AFIcontratoAse, AFIdescEstAse, AFIdescEstadoMaritalAse, AFIdescParentescoAse
						, AFIdescProducto, AFIdescTipoAfiliacionAse, AFIdescTipoDocAse, AFIdescTipoDocContratante, AFIdescTipoDocTitular, AFIdescTipoPlanSaludAse
						, AFIfecAfiliacionTitular, AFIfecFinVigenciaAse, AFIfecIniVigenciaAse, AFIfecNacimientoAse, AFInombreAse
						, AFInombreContratante, AFInombreTitular, AFInroPlanAse, AFInroTipoDocAse, AFInroTipoDocContratante, AFInroTipoDocTitular, AFIpolizaAse
						, ASEGURADORA, CODIPRESS, codiIAFAS, codiProducto, codiAse, codiParentescoAse, nroContratante, codiEstAse, fecNacimientoAse, codiGeneroAse, nroPlanAse, PROCEDENCIA)
					SELECT  @NVOCONSEC,@IDAFILIADO, @IDTERCERO, @USUARIO, DBO.FNK_GETDATE(), apMaternoAse, apMaternoContratante, apMaternoTitular, apPaternoAse, apPaternoContratante, apPaternoTitular, codiAse, codiErrorSW, codiEstAse, codiEstadoMaritalAse, codiGeneroAse
						, codiIAFAS, codiParentescoAse, codiProducto, codiTipoAfiliacionAse, codiTipoDocAse, codiTipoDocContratante, codiTipoDocTitular, codiTipoPlanSaludAse, codiTitular, contratoAse, descEstAse, descEstadoMaritalAse
						, descParentescoAse, descProducto, descTipoAfiliacionAse, descTipoDocAse, descTipoDocContratante, descTipoDocTitular, descTipoPlanSaludAse
						,CASE WHEN  fecAfiliacionTitular = '00000000' THEN NULL ELSE CONVERT(DATE, fecAfiliacionTitular) END
						,CASE WHEN  fecFinVigenciaAse = '00000000' THEN NULL ELSE CONVERT(DATE, fecFinVigenciaAse) END
						,CASE WHEN  fecIniVigenciaAse = '00000000' THEN NULL ELSE CONVERT(DATE, fecIniVigenciaAse) END
						,CASE WHEN  fecNacimientoAse = '00000000' THEN NULL ELSE CONVERT(DATE, fecNacimientoAse) END
						, nombreAse, nombreContratante, nombreTitular, nroPlanAse, nroTipoDocAse, nroTipoDocContratante, nroTipoDocTitular, polizaAse
						, @IDTERCERO,CODIPRESS, codiIAFAS, codiProducto, codiAse, codiParentescoAse, nroContratante, codiEstAse, fecNacimientoAse, codiGeneroAse, nroPlanAse , 'HADM'
					FROM #AFILIADOSITEDS
			
					SET @IDCONSSITEDS = @@IDENTITY
         
					INSERT INTO CONSSITEDSD  ( CONSECUTIVO, codiTipCobertura, codiSubTipCobertura, descSubTipCobertura, coCalServicio, descCopagoFijo, copagoFijo, copagoVariable)
					SELECT   @NVOCONSEC, codiTipCobertura, codiSubTipCobertura, descSubTipCobertura, coCalServicio, descCopagoFijo, copagoFijo, copagoVariable FROM #DETALLESITEDS
				END
			END TRY
			BEGIN CATCH
				IF @@TRANCOUNT > 0  
					ROLLBACK TRANSACTION; 
				INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()          
			END CATCH
			IF @@TRANCOUNT > 0  
				COMMIT TRANSACTION; 
			IF(SELECT COUNT(*) FROM @TBLERRORES) >0
			BEGIN
				SELECT 'KO' OK, '' CONSECUTIVO
				SELECT ERROR FROM @TBLERRORES
				RETURN
			END
			SELECT 'OK' OK, @NVOCONSEC CONSECUTIVO        

		END
		ELSE IF UPPER(@PROCESO) = 'EDITAR'
		BEGIN
			IF COALESCE(@FECHA,'')<>''
			BEGIN
				IF COALESCE(@HORA,'')<>''
				BEGIN
					SET @FECHA = REPLACE(@FECHA,'-','')+' '+@HORA					
				END
				ELSE
					SET @FECHA = REPLACE(@FECHA,'-','')
					
			END
			ELSE
				SET @FECHA = ''

			PRINT 'EDITAR REGISTRO'
			BEGIN TRY
			UPDATE HADM SET  IDSEDE = @IDSEDE, TTRIAGE = @TTRIAGE ,CNSTRIAGE = @CNSTRIAGE, IDAFILIADO = @IDAFILIADO, NIVELSOCIOEC = @NIVELSOCIEC, IDTERCERO = @IDTERCERO
								,IDPLAN = @IDPLAN, IDEMEDICAREMITE = @IDEMEDICAREMITE,CNSHACTRAN = @CNSHACTRAN   ,TIPOPOLIZA = @TIPOPOLIZA ,NOPOLIZA = @NOPOLIZA ,HABCAMA = @HABCAMA
								,IDTERCEROREMITE = @IDTERCEROREMITE, CIUREMITE = @CIUREMITE ,TIPOESTANCIA = @TIPOESTANCIA ,URG_VINCULO = @URG_VINCULO ,URG_NOMBRE = @URG_NOMBRE 
								,URG_TELE = @URG_TELE ,RESPCUENTA = @RESPCUENTA ,NOMBRERESPO = @NOMBRERESPO, TELEFONORESPO = @TELEFONORESPO ,PARENTESCORESPO = @PARENTESCORESPO      
								,TIPOADM  = @TIPOADM ,VIAINGRESO = @VIAINGRESO, CAUSAEXTERNA = @CAUSAEXTERNA ,MANCOPAGOEXT = @MANCOPAGOEXTERNO ,NOAUTORIZACIONEXT = @NOAUTORIZACIONEXT 
								,VLR_COPAGOEXTERNO = @VLR_COPAGOEXTERNO, NOAUTORIZACION = @NOAUTORIZACION, ESEINST = @ESEINST, FECHAESEINST = CASE COALESCE(@FECHAESEINST,'') WHEN '' THEN FECHAESEINST ELSE @FECHAESEINST END
								,TOPECOPAGO_ANX6 = @TOPECOPAGO_ANX6, EMBARAZADA=@EMBARAZADA, FECHA=IIF(@FECHA='', FECHA, @FECHA)
			WHERE   NOADMISION   = @NOADMISION
			IF(SELECT DBO.FNK_VALORVARIABLE ('IXCOUNTRY')) = 'PERU'
			BEGIN
				UPDATE HADMCOPAGO SET PORCENTAJE = @copagoConsulta WHERE HADMCOPAGO.NOADMISION = @NOADMISION AND HADMCOPAGO.CODOM = (SELECT DBO.FNK_VALORVARIABLE('OMCODINTERCONSULTA'))
				UPDATE HADMCOPAGO SET PORCENTAJE = @copagoFarmaco WHERE HADMCOPAGO.NOADMISION = @NOADMISION AND HADMCOPAGO.CODOM = (SELECT DBO.FNK_VALORVARIABLE('PREFIJOMEDICAMENTOS'))
				UPDATE HADMCOPAGO SET PORCENTAJE = @copagoFarmaco WHERE HADMCOPAGO.NOADMISION = @NOADMISION AND HADMCOPAGO.CODOM = (SELECT DBO.FNK_VALORVARIABLE('PREFIJOLABORATORIO'))
				--UPDATE HADMCOPAGO SET PORCENTAJE = @copagoExamen WHERE HADMCOPAGO.NOADMISION = @NOADMISION AND HADMCOPAGO.CODOM = (SELECT DBO.FNK_VALORVARIABLE('PREFIJOLABORATORIO'))

				UPDATE HADM SET COPAGOVALOR = COALESCE(@copagoConsulta,0) , COPA_VAR_PORC = COALESCE(@copagoFarmaco,0) WHERE HADM.NOADMISION = @NOADMISION
			END
			-- PARA EL ACCIDENTE DE TRANSITO					
			SELECT  @SIRAS = COALESCE(SIRAS,'') ,  @CNSHACTRAN =COALESCE(CNSHACTRAN,'')  , @VALORTOTAL = COALESCE(VALORTOTAL,0) 
			FROM OPENJSON(@REGISTRO) --PARA GUARDAR EL SIRAS EN HACTRAND
			WITH( SIRAS	VARCHAR(20) '$.SIRAS'
				,CNSHACTRAN			VARCHAR(20) '$.cnshactran'
				,VALORTOTAL             DECIMAL(14,2) '$.VALORTOTAL'
				)
			IF ( COALESCE(@CNSHACTRAN ,'' ) <>'' )
			BEGIN
				IF ( SELECT COUNT(*) FROM HACTRAND WHERE  CNSHACTRAN	=@CNSHACTRAN AND PROCEDENCIA='QX'	AND NOREFERENCIA = @NOADMISION ) >0  
					BEGIN
						PRINT 'ACTUALIZO EL CONSUMO DEL ACCIDENTE DE TRANSITO'
						UPDATE HACTRAND SET VLRGASTADO = @VALORTOTAL  , SIRAS = @SIRAS  WHERE  CNSHACTRAN	=@CNSHACTRAN AND PROCEDENCIA='QX'	AND NOREFERENCIA = @NOADMISION
					END
				ELSE
					BEGIN
						PRINT 'AGREGO UN NUEVO DETALLE DE HACTRAND CON EL NUEVO CONSUMO'
						SELECT @ITEM = COUNT(ITEM)+1 FROM HACTRAND WHERE  CNSHACTRAN	=@CNSHACTRAN 
						INSERT INTO HACTRAND ( CNSHACTRAN, ITEM, PROCEDENCIA,  NOREFERENCIA , N_FCT_ASEG, VLRGASTADO, SIRAS , ESTADOCONC, ESTADOEMBRIAGUEZ 	)
							VALUES  ( @CNSHACTRAN ,  @ITEM , 'QX' , @NOADMISION , NULL , @VALORTOTAL  , @SIRAS ,  'Alerta', 'No'    )
					END
			END
			IF EXISTS (SELECT   * FROM #AFILIADOSITEDS)
			BEGIN
				SELECT @IDTERCERO = IDTERCERO, @IDAFILIADO = IDAFILIADO, @IDSEDE = IDSEDE FROM HADM WHERE  NOADMISION = @NOADMISION

				INSERT INTO CITSITEDS (CONSECUTIVO,SEDE_SITEDS,IDTERCERO_SITEDS, USUARIO, FECHA,COPAGOCONSULTA, COPAGOVARIABLECONSULTA, ID_COPAGOCONSULTA_DESC, COPAGOCONSULTA_DESC, ID_TIPO_COBERTURA  , IDAFILIADO, PROCEDENCIA, ESTADO )
				SELECT @NOADMISION, @IDSEDE , @IDTERCERO, @USUARIO, DBO.FNK_GETDATE(),CAST( COALESCE(COPAGOCONSULTA,0) AS DECIMAL(14,2)), CAST( COALESCE(COPAGOVARIABLECONSULTA,0) AS DECIMAL(14,2)), ID_COPAGOCONSULTA_DESC, COPAGOCONSULTA_DESC, ID_TIPO_COBERTURA, @IDAFILIADO , 'HADM', 'Activo'
				FROM #AFILIADOSITEDS
				--polizaAse
				INSERT INTO CONSSITEDS  ( CONSECUTIVO,  IDAFILIADO, IDTERCERO, USUARIO, FECHA,  AFIapMaternoAse, AFIapMaternoContratante, AFIapMaternoTitular
					, AFIapPaternoAse, AFIapPaternoContratante, AFIapPaternoTitular, AFIcodiAse, AFIcodiErrorSW, AFIcodiEstAse, AFIcodiEstadoMaritalAse, AFIcodiGeneroAse, AFIcodiIAFAS, AFIcodiParentescoAse
					, AFIcodiProducto, AFIcodiTipoAfiliacionAse, AFIcodiTipoDocAse, AFIcodiTipoDocContratante, AFIcodiTipoDocTitular, AFIcodiTipoPlanSaludAse, AFIcodiTitular, AFIcontratoAse, AFIdescEstAse, AFIdescEstadoMaritalAse, AFIdescParentescoAse
					, AFIdescProducto, AFIdescTipoAfiliacionAse, AFIdescTipoDocAse, AFIdescTipoDocContratante, AFIdescTipoDocTitular, AFIdescTipoPlanSaludAse
					, AFIfecAfiliacionTitular, AFIfecFinVigenciaAse, AFIfecIniVigenciaAse, AFIfecNacimientoAse, AFInombreAse
					, AFInombreContratante, AFInombreTitular, AFInroPlanAse, AFInroTipoDocAse, AFInroTipoDocContratante, AFInroTipoDocTitular, AFIpolizaAse
					, ASEGURADORA, CODIPRESS, codiIAFAS, codiProducto, codiAse, codiParentescoAse, nroContratante, codiEstAse, fecNacimientoAse, codiGeneroAse, nroPlanAse, PROCEDENCIA)
				SELECT  @NOADMISION,@IDAFILIADO, @IDTERCERO, @USUARIO, DBO.FNK_GETDATE(), apMaternoAse, apMaternoContratante, apMaternoTitular, apPaternoAse, apPaternoContratante, apPaternoTitular, codiAse, codiErrorSW, codiEstAse, codiEstadoMaritalAse, codiGeneroAse
					, codiIAFAS, codiParentescoAse, codiProducto, codiTipoAfiliacionAse, codiTipoDocAse, codiTipoDocContratante, codiTipoDocTitular, codiTipoPlanSaludAse, codiTitular, contratoAse, descEstAse, descEstadoMaritalAse
					, descParentescoAse, descProducto, descTipoAfiliacionAse, descTipoDocAse, descTipoDocContratante, descTipoDocTitular, descTipoPlanSaludAse
					,CASE WHEN  fecAfiliacionTitular = '00000000' THEN NULL ELSE CONVERT(DATE, fecAfiliacionTitular) END
					,CASE WHEN  fecFinVigenciaAse = '00000000' THEN NULL ELSE CONVERT(DATE, fecFinVigenciaAse) END
					,CASE WHEN  fecIniVigenciaAse = '00000000' THEN NULL ELSE CONVERT(DATE, fecIniVigenciaAse) END
					,CASE WHEN  fecNacimientoAse = '00000000' THEN NULL ELSE CONVERT(DATE, fecNacimientoAse) END
					, nombreAse, nombreContratante, nombreTitular, nroPlanAse, nroTipoDocAse, nroTipoDocContratante, nroTipoDocTitular, polizaAse
					, @IDTERCERO,CODIPRESS, codiIAFAS, codiProducto, codiAse, codiParentescoAse, nroContratante, codiEstAse, fecNacimientoAse, codiGeneroAse, nroPlanAse , 'HADM'
				FROM #AFILIADOSITEDS
			
				SET @IDCONSSITEDS = @@IDENTITY
         
				INSERT INTO CONSSITEDSD  ( CONSECUTIVO, codiTipCobertura, codiSubTipCobertura, descSubTipCobertura, coCalServicio, descCopagoFijo, copagoFijo, copagoVariable)
				SELECT   @NOADMISION, codiTipCobertura, codiSubTipCobertura, descSubTipCobertura, coCalServicio, descCopagoFijo, copagoFijo, copagoVariable FROM #DETALLESITEDS
			END

			END TRY
				BEGIN CATCH
				INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()
			END CATCH

			IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
			BEGIN
				SELECT 'KO' OK, '' CONSECUTIVO
				SELECT ERROR FROM @TBLERRORES
				RETURN
			END
			ELSE
				SELECT 'OK' OK, @NOADMISION CONSECUTIVO

			RETURN
      
		END
		RETURN
	END
--QUERY3
--QUERY3
	IF @METODO = 'SELUNO'
	BEGIN
		SELECT @NOADMISION = NOADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH ( NOADMISION VARCHAR(20) '$.NOADMISION' )
		SELECT HADM.NOADMISION       ,HADM.IDSEDE          ,HADM.FECHA             ,HADM.TTRIAGE           ,HADM.CNSTRIAGE        
			,HTRIAGE.TRIAGE + ' '+CONVERT(VARCHAR(10), HTRIAGE.FECHA,103)+ ' '+  CONVERT(VARCHAR(10), HTRIAGE.FECHA,108) EXPTRIAGE         
			,AFI.TIPO_DOC     ,AFI.DOCIDAFILIADO   ,
			CONVERT(VARCHAR(20),CASE WHEN DATEDIFF(MONTH,FNACIMIENTO,GETDATE())<=0 THEN DATEDIFF(DAY,FNACIMIENTO,GETDATE()) 
									ELSE CASE WHEN DATEDIFF(YEAR,FNACIMIENTO,GETDATE())<=0 THEN DATEDIFF(MONTH,FNACIMIENTO,GETDATE()) 
											ELSE DATEDIFF(YEAR,FNACIMIENTO,GETDATE()) 
										END 
								END) + ' ('+ 
								CASE WHEN DATEDIFF(MONTH,FNACIMIENTO,GETDATE())<=0 THEN 'Dias'
									ELSE CASE WHEN DATEDIFF(YEAR,FNACIMIENTO,GETDATE())<=0 THEN 'Meses' 
											ELSE 'Años' 
										END 
								END +')' EDAD              
			,HADM.IDAFILIADO  ,AFI.NOMBREAFI  ,HADM.NIVELSOCIOEC NIVELSOCIEC ,HADM.IDTERCERO ,TER.RAZONSOCIAL RAZONSOCIALHADM ,TER.NIT NITHADM, HADM.IDPLAN 
			,HADM.IDEMEDICAREMITE ,HADM.CNSHACTRAN ,HADM.TIPOPOLIZA ,HADM.NOPOLIZA  ,HADM.HABCAMA ,HADM.IDTERCEROREMITE   ,HADM.CIUREMITE ,TE1.RAZONSOCIAL RAZONSOCIALREMITE 
			,CIU.NOMBRE NOMBRECIUREMITE  ,HADM.TIPOESTANCIA    ,TGEN.DESCRIPCION TIPOESTANCIADESC  ,HADM.URG_VINCULO      ,MES.DESCRIPCION NOMBREIDEMEDICAREMITE ,HADM.URG_NOMBRE        
			,HADM.URG_TELE   ,HADM.RESPCUENTA      ,HADM.NOMBRERESPO       ,HADM.TELEFONORESPO     ,HADM.PARENTESCORESPO  
			,TIPOADM      = (SELECT HADM.TIPOADM      value, HTAD.DESCRIPCION label, HTAD.TIPOATENCION, HTAD.REQHABCAMA FROM HTAD WHERE HADM.TIPOADM  = HTAD.TIPOADM FOR JSON AUTO)
			,VIAINGRESO   = (SELECT HADM.VIAINGRESO   value, TGEN.DESCRIPCION label, TGEN.CODIGO , TGEN.DESCRIPCION , TGEN.DATO1 , TGEN.DATO2, TGEN.DATO3, TGEN.DATO4, TGEN.DATO5
								FROM TGEN WHERE TGEN.TABLA= 'General' AND CAMPO = 'VIADEINGRESO' AND TGEN.CODIGO = HADM.VIAINGRESO FOR JSON AUTO)
			,CAUSAEXTERNA = (SELECT HADM.CAUSAEXTERNA value, TGEN.DESCRIPCION label , TGEN.CODIGO , TGEN.DESCRIPCION , TGEN.DATO1 , TGEN.DATO2, TGEN.DATO3, TGEN.DATO4, TGEN.DATO5
								FROM TGEN WHERE TGEN.TABLA= 'General' AND CAMPO = 'CAUSAEXTERNA' AND TGEN.CODIGO = HADM.CAUSAEXTERNA FOR JSON AUTO)
			,HADM.MANCOPAGOEXT MANCOPAGOEXTERNO  ,HADM.NOAUTORIZACIONEXT ,HADM.VLR_COPAGOEXTERNO   
			,HTAD.TIPOATENCION ,HADM.CERRADA ,HADM.FACTURABLE,COALESCE( HADM.NOAUTORIZACION,'') NOAUTORIZACION, HADM.ESEINST, HADM.FECHAESEINST , COALESCE(HACTRAND.SIRAS,'') SIRAS
			,HADM.IDMEDICOTRA ,HADM.DXINGRESO ,HADM.DXEGRESO ,HADM.DXSALIDA1 ,HADM.DXSALIDA2 ,HADM.DXSALIDA3 ,HADM.CCOSTO_ALTA ,HADM.ESTADOPSALIDA ,HADM.DESTINO ,HADM.OBS 
			,HADM.CAUSABMUERTE ,HADM.FECHAALTAMED ,HADM.FECHAALTAENF ,HADM.FECHAALTA ,TOPECOPAGO_ANX6
			,(SELECT TOP 1 HADMCOPAGO.PORCENTAJE FROM HADMCOPAGO WHERE HADM.NOADMISION = HADMCOPAGO.NOADMISION AND (SELECT DBO.FNK_VALORVARIABLE('PREFIJOMEDICAMENTOS')) = HADMCOPAGO.CODOM) copagoFarmaco 
			,(SELECT TOP 1 HADMCOPAGO.PORCENTAJE FROM HADMCOPAGO WHERE HADM.NOADMISION = HADMCOPAGO.NOADMISION AND (SELECT DBO.FNK_VALORVARIABLE('PREFIJOLABORATORIO')) = HADMCOPAGO.CODOM) copagoExamen 
			,(SELECT TOP 1 HADMCOPAGO.PORCENTAJE FROM HADMCOPAGO WHERE HADM.NOADMISION = HADMCOPAGO.NOADMISION AND (SELECT DBO.FNK_VALORVARIABLE('OMCODINTERCONSULTA')) = HADMCOPAGO.CODOM) copagoConsulta
			,COALESCE(HADM.N_FACTURA,'') N_FACTURA, CASE WHEN COALESCE(HADM.N_FACTURA,'') = '' AND COALESCE(HADM.COPAGOVALOR,0)> 0  THEN 0 WHEN COALESCE(HADM.N_FACTURA,'') <> '' AND COALESCE(HADM.COPAGOVALOR,0)> 0 THEN 1  ELSE 2 END [ESTADO_N_FACTURA]  
			,CASE WHEN EXISTS (SELECT 1 FROM CITSITEDS WHERE CITSITEDS.CONSECUTIVO = @NOADMISION AND ESTADO = 'Activo' ) THEN 'SI' ELSE 'NO' END [ESTADO_SITEDS]
			,CASE WHEN PREADMISION = 1 THEN                'Preadmitido'
                WHEN CERRADA = 0 AND FACTURABLE = 1 THEN 'Admitido'
                WHEN CERRADA = 0 AND FACTURABLE = 0 THEN 'No Facturable'
                WHEN CERRADA = 2 AND FACTURABLE = 1 THEN 'Alta Médica'
                WHEN CERRADA = 2 AND FACTURABLE = 0 THEN 'No Facturable'
                WHEN CERRADA = 3 AND FACTURABLE = 1 THEN 'Alta Enfermeria'
                WHEN CERRADA = 3 AND FACTURABLE = 0 THEN 'No Facturable'
                WHEN CERRADA = 1 AND FACTURABLE = 1 THEN 'Alta Administrativa'
                WHEN CERRADA = 1 AND FACTURABLE = 0 THEN 'NO PROC.('+CLASENOPROC+')'
                ELSE 'Desconocido'
            END ESTADO
			,HADM.ESTADOSALIDA
         ,FORMAT( HADM.FECHAALTAMED, 'dd/MM/yyyy') FECHAAM, FORMAT( HADM.FECHAALTAMED, 'HH:mm' ) HORAAM
         ,FORMAT( HADM.FECHAALTAENF, 'dd/MM/yyyy') FECHAAE, FORMAT( HADM.FECHAALTAENF, 'HH:mm' ) HORAAE
         ,FORMAT( HADM.FECHAALTA, 'dd/MM/yyyy')    FECHAAA, FORMAT( HADM.FECHAALTA, 'HH:mm' ) HORAAA
		 ,CAST(COALESCE(HADM.EMBARAZADA,0) AS BIT) EMBARAZADA
		FROM   HADM LEFT JOIN HTRIAGE ON HADM.CNSTRIAGE  = HTRIAGE.CNSTRIAGE
					LEFT JOIN AFI     ON HADM.IDAFILIADO = AFI.IDAFILIADO

					LEFT JOIN TER     ON HADM.IDTERCERO  = TER.IDTERCERO
					LEFT JOIN TER TE1 ON HADM.IDTERCEROREMITE = TE1.IDTERCERO
					LEFT JOIN CIU     ON HADM.CIUREMITE       = CIU.CIUDAD
					LEFT JOIN TGEN    ON HADM.TIPOESTANCIA    = TGEN.CODIGO
									AND TGEN.TABLA = 'GENERAL'
									AND TGEN.CAMPO = 'CLASEHOSP'
					LEFT JOIN MES     ON HADM.IDEMEDICAREMITE = MES.IDEMEDICA
					LEFT JOIN HTAD    ON HADM.TIPOADM         = HTAD.TIPOADM
					LEFT OUTER JOIN HACTRAND ON HADM.NOADMISION =  HACTRAND.NOREFERENCIA AND HACTRAND.PROCEDENCIA='QX'
		WHERE  HADM.NOADMISION = @NOADMISION
		--NOAUTORIZACION	
		RETURN   
	END
	IF @METODO = 'CONSULTAHADM'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')

		SELECT 'OK' AS OK, @NOADMISION AS NOADMISION
		SELECT HADM.NOADMISION
			,HADM.IDPLAN
			,HADM.HABCAMA
			,HADM.FECHA
			,PLN.DESCPLAN
			,PLN.TIPOSISTEMA
			,COALESCE(HADM.CERRADA,0) CERRADA
			,CASE WHEN COALESCE(PPT.CAPITADO,0)=1 THEN 'Capita' WHEN COALESCE(PPT.PGP,0)=1 THEN 'PGP'  ELSE 'Evento' END CONTRATO
			,DBO.FN_EDAD_PACIENTE(HADM.FECHA, COALESCE(HADM.FECHAALTAMED,GETDATE()) ,'DMH') DIAS_ESTANCIA
			,COALESCE(TGEN.DESCRIPCION,'') VIA_INGRESO
			,ESTADOHADM = CASE COALESCE(HADM.CERRADA,0) WHEN 1 THEN 'Alta Administrativa' WHEN 2 THEN 'Alta Medica' WHEN 3 THEN 'Alta Enfermeria' ELSE 'Admitido' END
		FROM HADM INNER JOIN AFI ON AFI.IDAFILIADO=HADM.IDAFILIADO
			LEFT JOIN PLN ON PLN.IDPLAN=HADM.IDPLAN
			LEFT JOIN PPT ON PPT.IDTERCERO=HADM.IDTERCERO AND PPT.IDPLAN=HADM.IDPLAN
			LEFT JOIN TGEN ON TGEN.TABLA='General' AND TGEN.CAMPO='VIADEINGRESO' AND TGEN.CODIGO=HADM.VIAINGRESO
		WHERE NOADMISION = @NOADMISION
		RETURN
	END
	IF @METODO = 'COMPROBANTE_PRESTACION'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		SELECT @METODO =  JSON_VALUE(@PARAMETROS,'$.METODO')
		SELECT @IDFIRMA =  JSON_VALUE(@PARAMETROS,'$.FIRMA')
		SELECT @TIPOESTANCIA =  JSON_VALUE(@PARAMETROS,'$.TIPO')
		IF @METODO = 'FIRMAR'
		BEGIN
			UPDATE HADM SET IDFIRMAPTE=IIF(@TIPOESTANCIA='PRESTACION_PACIENTE', @IDFIRMA,IDFIRMAPTE), 
					IDFIRMARESP=IIF(@TIPOESTANCIA='PRESTACION_ACUDIENTE', @IDFIRMA,IDFIRMARESP)
			WHERE NOADMISION=@NOADMISION
			SELECT 'OK' AS OK
			RETURN
		END
		SELECT 'OK' AS OK
		PRINT 'ANTES DEL ERROR'
		SELECT SED.DESCRIPCION SED_NOMBRE, SED.NIT SED_NIT, SED.DV SED_DV, SED.DIRECCION SED_DIRECCION, SED.TELEFONOS SED_TELEFONOS,
			CIU.NOMBRE SED_CIUDAD, HADM.NOADMISION CONSECUTIVO, CONVERT(VARCHAR, HADM.FECHA, 103)+' '+LEFT(CONVERT(VARCHAR, HADM.FECHA, 8),5) FECHA_HORARIO
			,IIF(HADM.FECHAALTAMED IS NULL,NULL, CONVERT(VARCHAR, HADM.FECHAALTAMED, 103)+' '+LEFT(CONVERT(VARCHAR, HADM.FECHAALTAMED, 8),5)) FECHA_ALTA
			,AFI.NOMBREAFI, CONVERT(varchar,DBO.FNK_EDAD_ARS(AFI.FNACIMIENTO,HADM.FECHA,'A'))+' Años' EDAD, HADM.URG_NOMBRE ACOMPANANTE,
			AFI.TIPO_DOC, AFI.DOCIDAFILIADO, 
			(SELECT DocFS FROM DOCS WHERE COALESCE(HADM.IDFIRMAPTE,'')<>'' AND COALESCE(DocumentoID,'')=COALESCE(HADM.IDFIRMAPTE,'')) FIRMA_PACIENTE, 
			(SELECT DocFS FROM DOCS WHERE COALESCE(HADM.IDFIRMARESP,'')<>'' AND COALESCE(DocumentoID,'')=COALESCE(HADM.IDFIRMARESP,'')) FIRMA_ACUDIENTE
			,TEXTO_COMPROBANTE ='Yo '+AFI.NOMBREAFI+', confirmo que recibí la prestación efectiva de los servicios médicos de esta institución'
			,CONTRATANTE = LEFT(TER.RAZONSOCIAL,80), FECHAACTUAL = CONVERT(VARCHAR, GETDATE(), 103)+' '+LEFT(CONVERT(VARCHAR, GETDATE(), 8),5)
			,CONTRA_CONFPRESER = dbo.FNK_VALORVARIABLE('CONTRA_CONFPRESER')
		FROM HADM INNER JOIN AFI ON AFI.IDAFILIADO=HADM.IDAFILIADO
			LEFT JOIN SED ON SED.IDSEDE=HADM.IDSEDE
			LEFT JOIN CIU ON CIU.CIUDAD=SED.CIUDAD
			LEFT JOIN TER ON TER.IDTERCERO=HADM.IDTERCERO
		WHERE NOADMISION = @NOADMISION
		PRINT 'DESPUES DEL ERROR'

		RETURN
	END
	IF @METODO = 'CONSULTAHHAB'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.HABCAMA')

		SELECT 'OK' AS OK, @NOADMISION AS HABCAMA

		SELECT HHABCNF.OPCION, TGEN.DESCRIPCION
		FROM HHABCNF LEFT JOIN TGEN ON TGEN.TABLA='GENERAL' AND TGEN.CAMPO='CLASEHOSP' AND TGEN.CODIGO=HHABCNF.OPCION
		WHERE HABCAMA=@NOADMISION
		RETURN
	END
	IF @METODO = 'VALIDACIONES'
	BEGIN
		SELECT @METODO = JSON_VALUE(@PARAMETROS,'$.METODO')
		SELECT @FILTRO = 'A.CERRADA=0 AND '
		SELECT @FILTRO = COALESCE(@FILTRO,'')+COALESCE(JSON_VALUE(@PARAMETROS,'$.FILTRO'),'')
		IF @METODO = 'VALIDA_AUT' AND DBO.FNK_VALORVARIABLE('HADM_ALER_NOAUTORIZA')='SI'
		BEGIN	
			SELECT @CMD='
			SELECT ERROR = ''Admision: '' + A.NOADMISION + '', sin autorizacion hace '' + CONVERT(VARCHAR, DATEDIFF(MINUTE, A.FECHA, GETDATE()))+ '' minutos''
            FROM HADM A INNER JOIN AFI B ON B.IDAFILIADO=A.IDAFILIADO 
			WHERE '+REPLACE(COALESCE(@FILTRO,'1=1'),'HADM.','A.')+' AND COALESCE(A.NOAUTORIZACION,'''')='''' AND DATEDIFF(MINUTE, COALESCE(A.FECHAALERTA,''01/01/2001''), GETDATE())>110'
			EXEC (@CMD)
			RETURN
		END
		RETURN
	END	
	IF @METODO = 'COMPROBANTE_INGRESO'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		
		IF NOT EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION)
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe indicar la admision a consultar'
			RETURN
		END
		SELECT 'OK' AS OK
		
		SELECT HADM.NOADMISION, AFI.TIPO_DOC, AFI.DOCIDAFILIADO, CONVERT(VARCHAR,HADM.FECHA,103) AS FECHA, 
			LEFT(CONVERT(VARCHAR,HADM.FECHA,8),5) AS HORA, AFI.ESTADO, AFI.NOMBREAFI,
			TIPOAFILIADO = CASE WHEN COALESCE(HADM.TIPOAFILIADO,'') <> '' THEN 
									CASE COALESCE(HADM.TIPOAFILIADO,'') WHEN 'B' THEN 'Benecifiario'
																		WHEN 'C' THEN 'Cotizante'
																		WHEN 'A' THEN 'Adicional'
									ELSE 'Otro' END
				ELSE CASE COALESCE(AFI.TIPOAFILIADO,'') WHEN 'B' THEN 'Benecifiario'
														WHEN 'C' THEN 'Cotizante'
														WHEN 'A' THEN 'Adicional'
					ELSE 'Otro' END
				END,			
			NIVELSOCIO = IIF(COALESCE(HADM.NIVELSOCIOEC,'')='', COALESCE(AFI.NIVELSOCIOEC,''), COALESCE(HADM.NIVELSOCIOEC,'')),
			AFI.SEXO, AFI.ESTADO_CIVIL, OCUPACION = LEFT(COALESCE(OCU.DESCRIPCION,''),50), DIRECCION = LEFT(COALESCE(AFI.DIRECCION,''),50),
			TELEFONORES = LEFT(COALESCE(AFI.TELEFONORES,''),50), FECHA_NAC = CONVERT(varchar,AFI.FNACIMIENTO,103),
			EDAD = CONVERT(varchar,DBO.FNK_EDAD_ARS(AFI.FNACIMIENTO,HADM.FECHA,'A'))+' Años', 
			HADM.URG_NOMBRE,  HADM.URG_VINCULO, URG_DIRECCION = HADM.URG_DIR, CONTRATANTE = TER.NIT+'  '+TER.RAZONSOCIAL,
			[PLAN] = HADM.IDPLAN +' '+PLN.DESCPLAN, TARIFA_BASE = PPT.IDTARIFA + ' ' +TAR.DESCTARIFA,
			IPS_ASIGNADA = COALESCE(T2.NIT,'')+' '+COALESCE(T2.RAZONSOCIAL,''), HABITACION =  COALESCE(HADM.HABCAMA,''),
			AUTORIZACION = COALESCE(HADM.NOAUTORIZACION,''), COPAGO_EXTERNO = COALESCE(HADM.COPAGONOAUTORIZACION,''),
			SEDE_AFILIADO = COALESCE(CIU.NOMBRE,''), TIPO_ADMISION = COALESCE(HTAD.DESCRIPCION,''), 
			VALOR_COPAGO_EXTERNO = COALESCE(HADM.VLR_COPAGOEXTERNO,0), CAUSA_EXTERNA = COALESCE(HADM.CAUSAEXTERNA,'')+' '+COALESCE(TGEN.DESCRIPCION,''),
			TRIAGE = IIF(COALESCE(HTRIAGE.TRIAGE,'')='','','PACIENTE CON '+HTRIAGE.TRIAGE), 
			VIA_INGRESO = COALESCE(HADM.VIAINGRESO,'')+' '+COALESCE(T3.DESCRIPCION,''),
			DXINGRESO = COALESCE(HADM.DXINGRESO,'')+' '+COALESCE(MDX.DESCRIPCION,''), MEDICO_INGRESO = COALESCE(MED.NOMBRE,''),
			MEDICO_TRATANTE = COALESCE(M2.NOMBRE,''), NOPOLIZA = COALESCE(HADM.NOPOLIZA,''), OBSERVACIONES = COALESCE(HADM.OBS,''),
			A24H = COALESCE(HADM.A24H,0), A2448H = COALESCE(HADM.A2448H,0), A4872H = COALESCE(HADM.A4872H,0), A72H30D = COALESCE(HADM.A72H30D,0), 
			HORAST30D = 0, --Se pone en 0 porque si sumo tocaria agrupar, SUMO EN QUASAR -- OSOLANO 20240224
			ULTIMA_CONSULTA = (SELECT CONVERT(VARCHAR,MAX(FECHA),103) FROM HADM A WHERE IDAFILIADO = A.IDAFILIADO AND A.NOADMISION<>HADM.NOADMISION),
			COALESCE(USUSU.NOMBRE,'') USUARIO_INGRESO
		FROM HADM INNER JOIN AFI ON AFI.IDAFILIADO=HADM.IDAFILIADO
			LEFT JOIN OCU ON AFI.IDOCUPACION=OCU.OCUPACION
			LEFT JOIN TER ON TER.IDTERCERO=HADM.IDTERCERO
			LEFT JOIN PLN ON PLN.IDPLAN=HADM.IDPLAN
			LEFT JOIN PPT ON PPT.IDTERCERO=HADM.IDTERCERO AND PPT.IDPLAN=HADM.IDPLAN
			LEFT JOIN TAR ON PPT.IDTARIFA=TAR.IDTARIFA
			LEFT JOIN TER T2 ON T2.IDTERCERO=HADM.IDPROVEEDOR
			LEFT JOIN CIU ON CIU.CIUDAD=AFI.CIUDAD
			LEFT JOIN HTAD ON HTAD.TIPOADM=HADM.TIPOADM
			LEFT JOIN TGEN ON TGEN.TABLA='General' AND TGEN.CAMPO='CAUSAEXTERNA' AND TGEN.CODIGO=HADM.CAUSAEXTERNA
			LEFT JOIN TGEN T3 ON T3.TABLA='General' AND T3.CAMPO='VIADEINGRESO' AND T3.CODIGO=HADM.VIAINGRESO
			LEFT JOIN HTRIAGE ON HADM.CNSTRIAGE=HTRIAGE.CNSTRIAGE
			LEFT JOIN MDX ON HADM.DXINGRESO=MDX.IDDX
			LEFT JOIN MED ON HADM.IDMEDICOING=MED.IDMEDICO
			LEFT JOIN MED M2 ON HADM.IDMEDICOTRA=M2.IDMEDICO
			LEFT JOIN USUSU ON HADM.USUARIO=USUSU.USUARIO
		WHERE HADM.NOADMISION = @NOADMISION
		RETURN
	END
	IF @METODO = 'ORDEN_SALIDA'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		SELECT @METODO = JSON_VALUE(@PARAMETROS,'$.METODO')
		
		IF NOT EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION)
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe indicar la admision a consultar'
			RETURN
		END
		IF (SELECT COALESCE(CERRADA,0) FROM HADM WHERE NOADMISION=@NOADMISION)=0
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Paciente No ha sido dado de alta'
			RETURN
		END
		IF dbo.FNK_VALORVARIABLE('VALIDAPAGOBOLETASAL')='SI'
		BEGIN
			IF (SELECT SUM(VALORCOPAGO)FROM HPRE WHERE NOADMISION=@NOADMISION)>0
			BEGIN
				IF (SELECT COALESCE(HADM.COPAGO,0) FROM HADM WHERE NOADMISION=@NOADMISION)=0
				BEGIN
					SELECT 'KO' OK
					SELECT ERROR = 'No Se ha Enviado a Caja el Valor del Copago... Debe Generar el Recibo y Recaudar'
					RETURN
				END
				ELSE
				BEGIN
					IF (SELECT COUNT(1) FROM TFCJ WHERE NOADMISION=@NOADMISION AND CLASE_FAC='COBRO' AND IDENTIFICADOR='FACTURA QX' AND COALESCE(ESTADO,'') <> 'A')>0
					BEGIN
						SELECT 'KO' OK
						SELECT ERROR = 'Ya Se Envio el Recibo a la Caja, pero no se ha Recaudado, Es Necesario Recaudar'
						RETURN						
					END
					ELSE
					BEGIN
						IF (SELECT COUNT(1) FROM FCJ WHERE NOADMISION=@NOADMISION AND CLASE_FAC = 'COBRO' AND CERRADA=1 AND COALESCE(ESTADO,'') <> 'A' AND PROCEDENCIA='SALUD')<=0
						BEGIN
							SELECT 'KO' OK
							SELECT ERROR = 'El Copago esta en la Caja pero Aun no se Ha Confirmado, Es Necesario Confirmar'
							RETURN						
						END
					END
				END
			END
		END
		IF COALESCE(@METODO,'')='PRINT'
		BEGIN
			IF (SELECT COALESCE(ESTADO,'') FROM HADM WHERE NOADMISION =@NOADMISION) NOT IN ('SP01','SP02','SP03','SP04')
			BEGIN
				UPDATE HADM SET ESTADO = 'SP01', USUIMPSAL=@USUARIO, FIMPSALIDA=DBO.FNK_FECHA_SIN_MLS(GETDATE()) WHERE NOADMISION = @NOADMISION
				INSERT INTO HEVEN (NOADMISION, EVENTO, USUARIO, SYS_COMPUTERNAME, CONSECUTIVOGEN, FECHA, CLASE)
				SELECT @NOADMISION, 'BOLETA DE SALIDA', @USUARIO, @SYS_COMPUTERNAME, 'ADMISIONES', GETDATE(), 'SALIDA_PACIENTE'
			END
			RETURN
		END
		SELECT @ESEINST = COALESCE(ESTADO,'') FROM HADM WHERE NOADMISION=@NOADMISION
		IF @ESEINST ='' AND dbo.FNK_VALORVARIABLE('LIBCAMANOTACIERRE')='SI'
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'No se ha solicitado la Boleta/Orden de Salida.'
			RETURN
		END

		SELECT 'OK' AS OK, @ESEINST AS ESTADO
		
		SELECT HADM.NOADMISION, AFI.TIPO_DOC, AFI.DOCIDAFILIADO, CONVERT(VARCHAR,HADM.FECHA,103) AS FECHA, 
			LEFT(CONVERT(VARCHAR,HADM.FECHA,8),5) AS HORA, AFI.NOMBREAFI, HADM.HABCAMA, 
			FECHAALTAMED = CONVERT(VARCHAR,HADM.FECHAALTAMED,103)+' '+LEFT(CONVERT(VARCHAR,HADM.FECHAALTAMED,8),5),
			USUARIOALTA = IIF(COALESCE(HADM.USUIMPSAL,'')='', @USUARIO,HADM.USUIMPSAL), 
			SERVICIO = COALESCE(HHAB.SECTOR,'') + ' - '+COALESCE(H2.DESCRIPCION,''), NOMBREMED = COALESCE(MED.NOMBRE,''),
			REGISTROMED = COALESCE(MED.NO_REGISTRO,''), NOMBREUSU=USUSU.NOMBRE
		FROM HADM INNER JOIN AFI ON AFI.IDAFILIADO=HADM.IDAFILIADO
			LEFT JOIN USUSU ON USUSU.USUARIO=IIF(COALESCE(HADM.USUIMPSAL,'')='', @USUARIO,HADM.USUIMPSAL)
			LEFT JOIN HHAB ON HHAB.HABCAMA=HADM.HABCAMA
			LEFT JOIN HHAB H2 ON H2.HABCAMA=HHAB.SECTOR
			LEFT JOIN MED ON MED.IDMEDICO=COALESCE(HADM.IDMEDICOING, HADM.IDMEDICOTRA)
		WHERE HADM.NOADMISION = @NOADMISION
		RETURN
	END
	IF @METODO = 'RETIRO_VOLUNTARIO'
	BEGIN
		SELECT @CAUSAEXTERNA = JSON_VALUE(@PARAMETROS,'$.CAUSARET')
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		SELECT @METODO = JSON_VALUE(@PARAMETROS,'$.METODO')
		
		IF NOT EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION)
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe indicar la admision a consultar'
			RETURN
		END
		IF COALESCE(@METODO,'')='PRINT'
		BEGIN
			IF (SELECT COALESCE(ESTADO,'') FROM HADM WHERE NOADMISION =@NOADMISION) NOT IN ('SP01','SP02','SP03','SP04')
			BEGIN
				UPDATE HADM SET ESTADO = 'SP01', USUIMPSAL=@USUARIO, FIMPSALIDA=GETDATE() WHERE NOADMISION = @NOADMISION
				INSERT INTO HEVEN (NOADMISION, EVENTO, USUARIO, SYS_COMPUTERNAME, CONSECUTIVOGEN, FECHA, CLASE)
				SELECT @NOADMISION, 'BOLETA DE SALIDA', @USUARIO, @SYS_COMPUTERNAME, 'ADMISIONES', GETDATE(), 'SALIDA_PACIENTE'
			END
			RETURN
		END
		IF @METODO IN ('VOLUNTARIO','FUGA')
		BEGIN
			IF COALESCE(@CAUSAEXTERNA,'')=''
			BEGIN
				SELECT 'KO' OK
				SELECT ERROR = 'Debe especificar la causa de retiro'
				RETURN				
			END
			UPDATE HADM SET ESTADOSALIDA=IIF(@METODO='FUGA','F','V'), CAUSARET=@CAUSAEXTERNA WHERE NOADMISION=@NOADMISION
		END
		SELECT 'OK' AS OK
		
		SELECT HADM.NOADMISION, AFI.TIPO_DOC, AFI.DOCIDAFILIADO, AFI.NOMBREAFI, COALESCE(ESTADOSALIDA,'N') ESTADOSALIDA, COALESCE(CAUSARET,'') CAUSARET,
			EDAD = DATEDIFF(YEAR,AFI.FNACIMIENTO,COALESCE(HADM.FECHAALTAMED,GETDATE())),
			RESPONSABLE = HADM.URG_NOMBRE, FECHA = CONVERT(VARCHAR,HADM.FECHA,103), HORA = LEFT(CONVERT(VARCHAR,HADM.FECHA,108),5)
		FROM HADM INNER JOIN AFI ON AFI.IDAFILIADO=HADM.IDAFILIADO
		WHERE HADM.NOADMISION = @NOADMISION
		RETURN
	END
	IF @METODO = 'CENSO'
	BEGIN
		SELECT @IDTERCERO = JSON_VALUE(@PARAMETROS,'$.IDTERCERO')
		SELECT @IDSEDE = JSON_VALUE(@PARAMETROS,'$.IDSEDE')
		SELECT 'OK' OK
		SELECT HHAB.PISO, HHAB_1.DESCRIPCION DESCSECTOR, HADM.NOADMISION, HADM.FECHA, AFI.DOCIDAFILIADO, AFI.NOMBREAFI, 
				(CASE WHEN DBO.FNK_EDAD_ARS(AFI.FNACIMIENTO,GETDATE(),'A') < 1 THEN 
						CASE WHEN DBO.FNK_EDAD_ARS(AFI.FNACIMIENTO,GETDATE(),'M') < 1 
							THEN CONVERT(VARCHAR(20),DBO.FNK_EDAD_ARS(AFI.FNACIMIENTO,GETDATE(),'D'))+' DIAS'
							ELSE CONVERT(VARCHAR(20),DBO.FNK_EDAD_ARS(AFI.FNACIMIENTO,GETDATE(),'M'))+' MESES' 
					END
        				ELSE CONVERT(VARCHAR(20),DBO.FNK_EDAD_ARS(AFI.FNACIMIENTO,GETDATE(),'A'))+' AÑOS' 
				END) EDAD, HADM.HABCAMA, IIF((DATEDIFF(DAY, HADM.FECHA, GETDATE()) -1)<=0, 0, DATEDIFF(DAY, HADM.FECHA, GETDATE()) -1) DIAS_ESTANCIA,
				COALESCE(MDX.IDDX,'') DXINGRESO, COALESCE(MDX.DESCRIPCION,'') DESC_DX, TGEN.DESCRIPCION TIPO_ESTANCIA, TER.RAZONSOCIAL, HADM.IDPLAN, HADM.CERRADA, HHAB.ESTADOHAB, GETDATE() HOY, 
				HADM.IDSEDE, AFI.DIRECCION
		FROM   HADM INNER JOIN AFI  ON HADM.IDAFILIADO    = AFI.IDAFILIADO 
					INNER JOIN TER  ON HADM.IDTERCERO     = TER.IDTERCERO                
					INNER JOIN HHAB ON HADM.NOADMISION    = HHAB.NOADMISION
					LEFT JOIN TGEN ON HHAB.TIPOESTANCIA  = TGEN.CODIGO AND TGEN.TABLA = 'General' AND TGEN.CAMPO = 'CLASEHOSP'
					LEFT JOIN MED  ON HADM.IDMEDICOTRA   = MED.IDMEDICO
					LEFT JOIN HHAB HHAB_1 ON HHAB.SECTOR = HHAB_1.HABCAMA
					LEFT JOIN CEN  ON HADM.CCOSTOULTIMO  = CEN.CCOSTO
					LEFT JOIN (SELECT ROW_NUMBER() OVER (PARTITION BY HCA.NOADMISION ORDER BY HCA.FECHA DESC) ITEM, HCA.NOADMISION, HCA.IDDX 
								FROM HCA WHERE PROCEDENCIA='QX' AND HCA.CLASE='HC' AND COALESCE(ANULADA,0)=0 AND COALESCE(HCA.IDDX,'')<>'' 
								) X ON X.NOADMISION = HADM.NOADMISION AND X.ITEM=1
					LEFT JOIN MDX ON MDX.IDDX = IIF(DBO.FNK_VALORVARIABLE('ASISMDXDIARIO')='SI',HADM.IDDXULTIMO,COALESCE(X.IDDX,HADM.DXINGRESO))
		WHERE  HHAB.ESTADOHAB  = 'Ocupada'  AND COALESCE(HADM.CERRADA,0) = 0
		AND HADM.NOADMISION NOT  LIKE 'C%' AND HADM.FACTURABLE = 1
		AND HADM.IDTERCERO=IIF(COALESCE(@IDTERCERO,'')='',HADM.IDTERCERO,@IDTERCERO)
		AND HADM.IDSEDE=IIF(COALESCE(@IDSEDE,'')='',HADM.IDSEDE,@IDSEDE)
		ORDER BY HHAB.PISO, HHAB_1.DESCRIPCION, HADM.HABCAMA
		RETURN
	END
	IF @METODO = 'RETIRAR_ALTAS'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		SELECT @METODO = UPPER(JSON_VALUE(@PARAMETROS,'$.TIPOALTA'))
		SELECT @NOMCIRUGIA = JSON_VALUE(@PARAMETROS,'$.RAZON')
		IF COALESCE(@NOADMISION,'')=''
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe especificar el Noadmision'
			RETURN
		END	
		IF COALESCE(@NOMCIRUGIA,'')=''
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe especificar la razon por la cual retira el alta'
			RETURN
		END	
		IF @METODO='MEDICA' OR @METODO='ENFERMERIA'
		BEGIN
			IF @METODO='MEDICA'
			BEGIN
				UPDATE HCA SET ALTA=0 WHERE NOADMISION=@NOADMISION AND ALTA=1
				UPDATE HADM SET CERRADA=0, USUALTAMED=NULL, FECHAALTAMED=NULL WHERE NOADMISION=@NOADMISION AND CERRADA=2
			END
			ELSE
			BEGIN
				UPDATE HADM SET CERRADA=2, IDUSUARIOALTAENF=NULL, FECHAALTAENF=NULL WHERE NOADMISION=@NOADMISION AND CERRADA=3
			END
		END
		IF @METODO='ADMINISTRATIVA'
		BEGIN
			IF NOT EXISTS (SELECT 1 FROM HPRE INNER JOIN HPRED ON HPRE.NOPRESTACION=HPRED.NOPRESTACION WHERE HPRE.NOADMISION=@NOADMISION AND COALESCE(FACTURADA,0)=0)
			BEGIN
				SELECT 'KO' OK
				SELECT ERROR = 'Admisión Totalmente Facturada, No se puede quitar el ALTA'
				RETURN
			END
			UPDATE HADM SET CERRADA=3 WHERE NOADMISION=@NOADMISION AND CERRADA=1			
		END
		IF @METODO='NO_PROCESAR'
		BEGIN
			IF NOT EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND COALESCE(FACTURADA,0)=0)
			BEGIN
				SELECT 'KO' OK
				SELECT ERROR = 'Admisión Facturada, No se pudo quitar el No Procesar'
				RETURN				
			END
		END	
		
		SELECT TOP 1 @CMD=DB_LOG FROM BDIX..CIA WHERE DB_BASE=DB_NAME()
		EXEC SPK_GENCONSECUTIVO '01', @IDSEDE, '@LOG',  @CNSLOG OUTPUT  
		SELECT @CNSLOG = @IDSEDE + REPLACE(SPACE(8 - LEN(@CNSLOG))+LTRIM(RTRIM(@CNSLOG)),SPACE(1),0)

		IF @METODO='NO_PROCESAR'
		BEGIN
			SELECT @CMD='INSERT INTO '+@CMD+'..USLOG (CNSLOG, COMPANIA, NOADMISION, PROCESO, REQUEST, REFERENCIA, USUARIO, FECHA, SYS_ComputerName, TABLA)
				SELECT '''+@CNSLOG+''', ''01'', '''+@NOADMISION+''', LEFT(''QUITAR NO PROCESAR'',20),''PROCESS'', '''+@NOMCIRUGIA+''', '''+@USUARIO+''', GETDATE(), '''+@SYS_ComputerName+''', ''HADM'''
		END
		ELSE
		BEGIN
			SELECT @CMD='INSERT INTO '+@CMD+'..USLOG (CNSLOG, COMPANIA, NOADMISION, PROCESO, REQUEST, REFERENCIA, USUARIO, FECHA, SYS_ComputerName, TABLA)
				SELECT '''+@CNSLOG+''', ''01'', '''+@NOADMISION+''', LEFT(''Quitar Alta '+@METODO+''',20),''PROCESS'', '''+@NOMCIRUGIA+''', '''+@USUARIO+''', GETDATE(), '''+@SYS_ComputerName+''', ''HADM'''
		END

		PRINT @CMD
		EXEC (@CMD)
		
		SELECT 'OK' OK
		RETURN
	END
	IF @METODO = 'TRASLADAR'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		SELECT @METODO = UPPER(JSON_VALUE(@PARAMETROS,'$.CAMANUEVA'))
		IF COALESCE(@NOADMISION,'')=''
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe especificar el Noadmision'
			RETURN
		END	
		IF COALESCE(@METODO,'')=''
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe especificar la Cama Nueva'
			RETURN
		END
		IF NOT EXISTS (SELECT 1 FROM HHAB WHERE HABCAMA=COALESCE(@METODO,'') AND CLASE='Cama' AND ESTADOHAB='Libre')
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'La cama no se encuentra o no está disponible'
			RETURN
		END
		IF DBO.FNK_VALORVARIABLE('MENTREGAPACIENTE')='SI'
		BEGIN
			IF DBO.FNK_VALORVARIABLE('TIPOHTX')='HORIZONTAL'
			BEGIN
				IF (SELECT COUNT(1) FROM IZSOL WHERE NOADMISION=@NOADMISION AND CLASE<>'CE' AND ESTADO<>2)>0
					INSERT INTO @TBLERRORES(ERROR)
					SELECT 'Existen '+ CONVERT(varchar, COUNT(1)) + ' Solicitudes Realizadas a Farmacia sin Definir' 
					FROM IZSOL  WHERE NOADMISION=@NOADMISION AND CLASE<>'CE' AND ESTADO<>2

				IF (SELECT COUNT(1) FROM HBALI A INNER JOIN HBALID B ON A.CNSHBALI=B.CNSHBALI 
						INNER JOIN HBALIDD C ON A.CNSHBALI=C.CNSHBALI AND B.IDSERVICIO=C.IDSERVICIO
						WHERE A.NOADMISION=@NOADMISION AND C.FECHA<=GETDATE() AND COALESCE(C.MARCA,0)=0)>0
					INSERT INTO @TBLERRORES(ERROR)
					SELECT 'Existen Items De la Hoja de Tratamiento sin Definir a la Hora de Traslado'
			END
			ELSE
			BEGIN
				IF (SELECT COUNT(1) FROM IMOV WHERE NODOCUMENTO=@NOADMISION AND ESTADO=0 AND COALESCE(CLASEPED,'')<>'24H')>0
					INSERT INTO @TBLERRORES(ERROR)
					SELECT 'Existen Movimientos En Farmacia Sin Confirmar...'

				IF (SELECT COUNT(1) FROM HTX WHERE NOADMISION=@NOADMISION AND COALESCE(ANULADA,0)=0
						AND ENCARGOS=0 AND COALESCE(INDDEV,0)=0 AND FECHAREQ <GETDATE())>0
					INSERT INTO @TBLERRORES (ERROR)
					SELECT 'Existen Items en la hoja de Tratamiento  sin Definir'
	
			END
		END
		IF (SELECT COUNT(1) FROM @TBLERRORES)>0
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT @MODELO=HABCAMA FROM HADM WHERE NOADMISION=@NOADMISION

		BEGIN TRY
			EXEC SPK_TRASLADO_CAMA  @MODELO, @NOADMISION, @METODO
		END TRY
		BEGIN CATCH
			SELECT 'KO' OK
			SELECT ERROR='Error al trastladar al paciente: '+ERROR_MESSAGE()
			RETURN			
		END CATCH

		SELECT 'OK' OK
		RETURN
	END
	IF @METODO = 'REENVIAR_CAJA'
	BEGIN
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		IF COALESCE(@NOADMISION,'')=''
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe especificar el Noadmision'
			RETURN
		END	
		IF EXISTS (SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND (CERRADA=1 OR FACTURABLE=0))
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Admision totalmente Cerrada, no es posible el reenvio'
			RETURN
		END
		IF NOT EXISTS (SELECT COUNT(1) FROM TFCJ WHERE NOADMISION=@NOADMISION AND CLASE_FAC='COBRO' AND IDENTIFICADOR='FACTURA QX')
		BEGIN
			UPDATE HADM SET COPAGO=0 WHERE NOADMISION=@NOADMISION
		END
		ELSE
		BEGIN
			IF DBO.FNK_VALORVARIABLE('ENVIOCAJAXHADM')='SI'
			BEGIN
				SELECT 'KO' OK
				SELECT ERROR = 'El recibo de esta admisión ya se encuentra enviado a caja'
				RETURN
			END
			ELSE
			BEGIN
				UPDATE HADM SET COPAGO=0 WHERE NOADMISION=@NOADMISION
			END
		END
		SELECT @IDTERCERO= IDTERCERO FROM HADM WHERE NOADMISION=@NOADMISION
		BEGIN TRY
			EXEC SPK_PAGOSCAJA_QX @NOADMISION, @SYS_COMPUTERNAME, '01', @IDSEDE, @USUARIO, @IDTERCERO
		END TRY
		BEGIN CATCH
			SELECT 'KO' OK
			SELECT ERROR = 'Error al reenviar el recibo a caja, error:'+ERROR_MESSAGE()
			RETURN			
		END CATCH
		SELECT 'OK' OK
		RETURN
	END
	IF @METODO = 'DISPONIBILIDAD'
	BEGIN
		SELECT 'OK' OK
		SELECT SEC.DESCRIPCION SECTOR, COALESCE(HHAB.ESTADOHAB,'')+'s' ESTADOHAB, COUNT(1) CANTIDAD 
		FROM HHAB
		LEFT JOIN HHAB SEC ON HHAB.SECTOR=SEC.HABCAMA
		WHERE HHAB.CLASE='Cama'
		GROUP BY SEC.DESCRIPCION, HHAB.ESTADOHAB
		ORDER BY SEC.DESCRIPCION, HHAB.ESTADOHAB
	END
	IF @METODO = 'DEPOSITOS'
	BEGIN		
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		IF COALESCE(@NOADMISION,'')=''
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe especificar el Noadmision'
			RETURN
		END	
		SELECT 'OK' OK
		SELECT NOINGRESO, CODCAJA, CNSFACJ, FECHA, VALOR, TER.NIT, TER.RAZONSOCIAL, CAST(COALESCE(DEVUELTO,0) AS BIT) DEVUELTO, 
			CAST(COALESCE(LEGALIZADO,0) AS BIT) LEGALIZADO, CODCAJALG, CNSFACJLG
		FROM QXDING A
		LEFT JOIN TER ON TER.IDTERCERO=A.IDTERCERO
		WHERE NOINGRESO=@NOADMISION
		ORDER BY FECHA
	END
	IF @METODO = 'ALTAS'
	BEGIN
		SELECT @METODO = JSON_VALUE(@PARAMETROS,'$.ALTA')
		
		SELECT @PARAMETROS = ADMISION
		FROM OPENJSON (@PARAMETROS)
		WITH (ADMISION NVARCHAR(MAX) AS JSON)
		


		SELECT @NOADMISION = NOADMISION
			,@IDMEDICOTRA	= IDMEDICOTRA  ,@DXINGRESO		= DXINGRESO		,@DXEGRESO		= DXEGRESO
			,@DXSALIDA1		= DXSALIDA1	   ,@DXSALIDA2		= DXSALIDA2		,@DXSALIDA3		= DXSALIDA3		
			,@CCOSTO_ALTA	= CCOSTO_ALTA  ,@ESTADOPSALIDA  = ESTADOPSALIDA 
			,@DESTINO		= DESTINO	   ,@OBS			= OBS			,@CAUSABMUERTE	= CAUSABMUERTE	
			,@FECHAALTAMED	= FECHAALTAMED ,@HORAALTAMED	= HORAALTAMED	,@FECHAALTAENF	= FECHAALTAENF 
			,@HORAALTAENF	= HORAALTAENF  ,@FECHAALTA		= FECHAALTA		,@HORAALTA		= HORAALTA		
		FROM OPENJSON (@PARAMETROS)
		WITH (
		 NOADMISION    VARCHAR(20) '$.NOADMISION'
		,IDMEDICOTRA   VARCHAR(12) '$.IDMEDICOTRA'
		,DXINGRESO	   VARCHAR(10) '$.DXINGRESO'
		,DXEGRESO	   VARCHAR(10) '$.DXEGRESO'
		,DXSALIDA1	   VARCHAR(10) '$.DXSALIDA1'
		,DXSALIDA2	   VARCHAR(10) '$.DXSALIDA2'
		,DXSALIDA3	   VARCHAR(10) '$.DXSALIDA3'
		,CCOSTO_ALTA   VARCHAR(20) '$.CCOSTO_ALTA'
		,ESTADOPSALIDA VARCHAR(6) '$.ESTADOPSALIDA'
		,DESTINO	   VARCHAR(1) '$.DESTINO'
		,OBS		   VARCHAR(254) '$.OBS'
		,CAUSABMUERTE  VARCHAR(10) '$.CAUSABMUERTE'
		,FECHAALTAMED  VARCHAR(20) '$.FECHAALTAMED'
		,HORAALTAMED   VARCHAR(20) '$.HORAALTAMED'
		,FECHAALTAENF  VARCHAR(20) '$.FECHAALTAENF'
		,HORAALTAENF   VARCHAR(20) '$.HORAALTAENF'
		,FECHAALTA	   VARCHAR(20) '$.FECHAALTA'
		,HORAALTA	   VARCHAR(20) '$.HORAALTA'
		) HADM
		
		SELECT @METODO = REPLACE(@METODO,'ALTA_','')

		IF COALESCE(@METODO,'')=''
		BEGIN
			INSERT INTO @TBLERRORES (ERROR)
			SELECT ERROR = 'Debe especificar el tipo de Alta'
		END
		IF COALESCE(@NOADMISION,'')=''
		BEGIN
			INSERT INTO @TBLERRORES (ERROR)
			SELECT ERROR = 'Debe especificar la admision a procesar'
		END
		IF NOT EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION)
		BEGIN
			INSERT INTO @TBLERRORES (ERROR)
			SELECT ERROR = 'La admision escogida no se encuentra registrada'
		END



		SELECT @TIPOADM = TIPOADM, @CNSHACTRAN = HADM.CNSHACTRAN, @NATUREVENTO = HACTRAN.NATUREVENTO, @TIPOPOLIZA = HACTRAN.TIPOPOLIZA, @IDAFILIADO = HADM.IDAFILIADO, @CERRADA=CERRADA, @CMD = PPT.CUOTATRIAGE, @IDTERCERO=HADM.IDTERCERO
		FROM HADM 
			LEFT JOIN HACTRAN ON HACTRAN.CNSHACTRAN=HADM.CNSHACTRAN 
			LEFT JOIN PPT ON PPT.IDTERCERO=HADM.IDTERCERO AND PPT.IDPLAN=HADM.IDPLAN
		WHERE NOADMISION=@NOADMISION
		BEGIN TRY
			IF dbo.FNK_VALORVARIABLE('VALIDA_EPIANTESALTA')='SI'
			BEGIN
				IF (SELECT COUNT(1) FROM HCA WHERE NOADMISION=@NOADMISION AND CLASEPLANTILLA=dbo.FNK_VALORVARIABLE('HCPLANTILLAEPI'))<=0
					AND (SELECT DATEDIFF(MINUTE,FECHA,CASE WHEN CERRADA=0 THEN GETDATE() ELSE FECHAALTAMED END) FROM HADM WHERE NOADMISION=@NOADMISION)>@MINTOSMAXSINEPI
				BEGIN
					SELECT 'KO' OK
					SELECT ERROR = 'El tiempo transcurrido entre la admision y el alta medica es mayor a:'+ CONVERT(VARCHAR,@MINTOSMAXSINEPI)+' minutos, Se debe realizar la epicrisis..'
					RETURN
				END			
			END
			IF @METODO='ADMINISTRATIVA'
			BEGIN
				IF @TIPOADM=dbo.FNK_VALORVARIABLE('IDTARIFASOAT')
				BEGIN
					IF dbo.FNK_VALORVARIABLE('NATEVEACCTRANSITO')=@NATUREVENTO
					BEGIN 
						IF EXISTS(SELECT 1 FROM HACTRAN A WHERE CNSHACTRAN=@CNSHACTRAN 
									AND (COALESCE(A.SITIOACC,'')='' OR A.FECHAACC IS NULL OR COALESCE(A.CIUDAD,'')='' OR COALESCE(A.ZONA,'')='' OR COALESCE(A.INFORME,'')='')
								)
						BEGIN
							INSERT INTO @TBLERRORES (ERROR)
							SELECT ERROR = 'Debe llenar el formulario soat para poder dar de alta'
						END
						ELSE
						BEGIN
							IF @TIPOPOLIZA='Auto Fantasma'
							BEGIN
								IF EXISTS(SELECT 1 FROM HACTRAN A WHERE CNSHACTRAN=@CNSHACTRAN 
									AND (COALESCE(A.MARCA,'')='' OR A.PLACA IS NULL OR COALESCE(A.TIPO,'')='' OR COALESCE(A.CONDUCTOR,'')='' OR COALESCE(A.EDAD,'')='')
								)
								BEGIN
									INSERT INTO @TBLERRORES (ERROR)
									SELECT ERROR = 'Debe llenar el formulario soat para poder dar de alta, Auto Fantasma'							
								END
							END
						END
					END
				END
				IF DBO.FNK_VALORVARIABLE('VALIDADESATRASOFAC')='NO'
				BEGIN
					IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND HADM.HABCAMA<>'' AND NOT EXISTS(SELECT 1 FROM HHAB WHERE HHAB.HABCAMA=HADM.HABCAMA))
					BEGIN
						INSERT INTO @TBLERRORES (ERROR)
						SELECT ERROR = 'Cama inexistente debe arreglar esta inconsistencia, para dar de alta'					
					END
				END
				IF DBO.FNK_VALORVARIABLE('PERMITEALTA_CONCAMA')='NO'
				BEGIN
					IF EXISTS(SELECT 1 FROM HHAB WHERE NOADMISION=@NOADMISION)
					BEGIN
						INSERT INTO @TBLERRORES (ERROR)
						SELECT ERROR = 'La cama ocupada con esta admision no ha sido liberada, es necesario que se cumpla todo el proceso de salida'					
					END
				END
				ELSE
				BEGIN
					UPDATE HHAB SET NOADMISION=NULL,IDAFILIADO=NULL,ESTADOHAB='Libre' WHERE NOADMISION=@NOADMISION
				END
			
				SELECT @IDSEDE = COALESCE(@IDSEDE,'01')
				EXEC SPK_GENCONSECUTIVO '01', @IDSEDE, '@RPDX', @CNSRPDX OUTPUT  
				SELECT @CNSRPDX = @IDSEDE + REPLACE(SPACE(8 - LEN(@CNSRPDX))+LTRIM(RTRIM(@CNSRPDX)),SPACE(1),0) 
			
				EXEC SPK_ESTADO_ADMI @NOADMISION, @CNSRPDX, 'A'
				
				IF (SELECT COUNT(1) FROM RPDX WHERE CNS = @CNSRPDX) >0
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT NOMBRE FROM RPDX WHERE CNS = @CNSRPDX
				END
			END

			IF dbo.FNK_VALORVARIABLE('IXCOUNTRY')='PERU'
			BEGIN
				PRINT 'PENDIENTE, POR HACER'
			END

			IF NOT EXISTS(SELECT 1 FROM AFI WHERE IDAFILIADO=@IDAFILIADO)
			BEGIN
				INSERT INTO @TBLERRORES (ERROR)
				SELECT ERROR = 'Paciente no existe, en base de datos'
			END

			IF dbo.FNK_VALORVARIABLE('ALTAMED_VALI_RESLAB')='SI' AND @METODO='MEDICA'
			BEGIN
				IF (SELECT COUNT(1) FROM HPRE A INNER JOIN HPRED B ON A.NOPRESTACION=B.NOPRESTACION
						WHERE A.NOADMISION=@NOADMISION AND B.APOYODG_AMBITO='LX' AND (B.ENCARGOS<>0 OR COALESCE(B.ENLAB,0)=0))>0
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'No puede dar alta medica al paciente hasta no registrar los resultados de los laboratorios'
				END
			END
		
			IF @ESTADOPSALIDA='2'
			BEGIN
				IF NOT EXISTS (SELECT 1 FROM MDX WHERE IDDX=@CAUSABMUERTE)
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Debe ingresar la causa básica de la muerte'
				END
				UPDATE AFI SET ESTADO='Muerto' WHERE IDAFILIADO=@IDAFILIADO
			END
		
			IF NOT EXISTS (SELECT 1 FROM MDX WHERE IDDX=@DXEGRESO)
			BEGIN
				INSERT INTO @TBLERRORES (ERROR)
				SELECT ERROR = 'Debe ingresar el diagnóstico de egreso'
			END
			IF COALESCE(@ESTADOPSALIDA,'')=''
			BEGIN
				SELECT 'KO' OK
				SELECT ERROR = 'Debe ingresar el estado del paciente al salir'
				RETURN
			END
			IF COALESCE(@FECHAALTAMED,'')=''
			BEGIN
				INSERT INTO @TBLERRORES (ERROR)
				SELECT ERROR = 'Fecha de alta medica no puede ser vacio'
			END
			IF @METODO='MEDICA'
			BEGIN
				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND FECHA>REPLACE(@FECHAALTAMED,'-','')+' '+COALESCE(@HORAALTAMED,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta no puede ser menor a la de ingreso FECHAACTUAL='+CONVERT(VARCHAR,GETDATE(),103)+' '+CONVERT(VARCHAR,GETDATE(),108)

				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND GETDATE()<REPLACE(@FECHAALTAMED,'-','')+' '+COALESCE(@HORAALTAMED,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta no puede ser mayor a la de hoy FECHAACTUAL='+CONVERT(VARCHAR,GETDATE(),103)+' '+CONVERT(VARCHAR,GETDATE(),108)

				IF COALESCE(@CERRADA,0)=1
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admisión ya esta de alta definitiva'
				END
				ELSE IF COALESCE(@CERRADA,0)=2
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admision ya le dieron de alta en otra historia clinica'				
				END
				ELSE IF COALESCE(@CERRADA,0)=3
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admisión ya se encuentra en Alta Enfermería...'				
				END
				IF (SELECT COUNT(1) FROM @TBLERRORES)>0
				BEGIN
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
				ELSE
				BEGIN
					UPDATE HADM SET CERRADA=2, IDMEDICOALTA = @IDMEDICO, USUALTAMED=@USUARIO, FECHAALTAMED  = REPLACE(@FECHAALTAMED,'-','')+' '+COALESCE(@HORAALTAMED,'00:00') 
					WHERE NOADMISION = @NOADMISION
					IF DBO.FNK_VALORVARIABLE('LIBCAMAALTAMED')='SI'
					BEGIN
						UPDATE HHAB SET ESTADOHAB='Libre', NOADMISION=NULL,IDAFILIADO=NULL  WHERE NOADMISION = @NOADMISION
					END
				END
				IF DBO.FNK_VALORVARIABLE('ALTAMEDYALTAENFDEUNA')='SI'
				BEGIN
					UPDATE HADM SET CERRADA =3, IDMEDICOALTA = @IDMEDICO, IDUSUARIOALTAENF =@USUARIO, FECHAALTAMED  = REPLACE(@FECHAALTAMED,'-','')+' '+COALESCE(@HORAALTAMED,'00:00')
					WHERE NOADMISION = @NOADMISION
				
					IF DBO.FNK_VALORVARIABLE('LIBCAMAALTAENF')='SI' OR DBO.FNK_VALORVARIABLE('LIBCAMANOTACIERRE')='SI'
						UPDATE HHAB SET ESTADOHAB='Libre', NOADMISION=NULL,IDAFILIADO=NULL  WHERE NOADMISION = @NOADMISION

				END
			END
			ELSE
			BEGIN			
				IF COALESCE(@FECHAALTAENF,'')=''
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta de enfermeria no puede ser vacio'
			END
			IF @METODO='ENFERMERIA'
			BEGIN
				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND FECHA>REPLACE(@FECHAALTAENF,'-','')+' '+COALESCE(@HORAALTAENF,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta no puede ser menor a la de ingreso'

				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND FECHAALTAMED>REPLACE(@FECHAALTAENF,'-','')+' '+COALESCE(@HORAALTAENF,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta no puede ser menor a la del alta medica'

				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND GETDATE()<REPLACE(@FECHAALTAENF,'-','')+' '+COALESCE(@HORAALTAENF,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta no puede ser menor a la de ingreso'

				IF COALESCE(@CERRADA,0)=1
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admisión ya esta de alta definitiva'
				END
				ELSE IF COALESCE(@CERRADA,0)=0
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admision no le han dado alta medica'				
				END
				ELSE IF COALESCE(@CERRADA,0)=3
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admisión ya se encuentra en Alta Enfermería...'				
				END
				IF (SELECT COUNT(1) FROM @TBLERRORES)>0
				BEGIN
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
				ELSE
				BEGIN
					UPDATE HADM SET CERRADA=3, ESTADO='SP00', IDMEDICOALTA = @IDMEDICO, USUALTAMED=@USUARIO, FECHAALTAMED=REPLACE(@FECHAALTAMED,'-','')+' '+COALESCE(@HORAALTAMED,'00:00')
						,FECHAALTAENF=REPLACE(@FECHAALTAENF,'-','')+' '+COALESCE(@HORAALTAENF,'00:00')
					WHERE NOADMISION = @NOADMISION
					IF DBO.FNK_VALORVARIABLE('LIBCAMAALTAENF')='SI'
					BEGIN
						UPDATE HHAB SET ESTADOHAB='Libre', NOADMISION=NULL,IDAFILIADO=NULL  WHERE NOADMISION = @NOADMISION
					END
				END
			END
			IF @METODO='ADMINISTRATIVA'
			BEGIN
				IF COALESCE(@FECHAALTA,'')=''
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta de administrativa no puede ser vacio'

				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND FECHA>REPLACE(@FECHAALTA,'-','')+' '+COALESCE(@HORAALTA,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta administrativa no puede ser menor a la de ingreso'

				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND FECHAALTAENF>REPLACE(@FECHAALTA,'-','')+' '+COALESCE(@HORAALTA,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta administrativa no puede ser menor a la del alta medica'

				IF EXISTS(SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND GETDATE()<REPLACE(@FECHAALTA,'-','')+' '+COALESCE(@HORAALTA,'00:00'))
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Fecha de alta administrativa no puede ser menor a la de ingreso'

				IF COALESCE(@CERRADA,0)=1
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admisión ya esta de alta definitiva'
				END
				ELSE IF COALESCE(@CERRADA,0)=0
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Ningun medico ha ordenada el alta, mediante historia clinica'				
				END
				ELSE IF COALESCE(@CERRADA,0)=2
				BEGIN
					INSERT INTO @TBLERRORES (ERROR)
					SELECT ERROR = 'Esta admisión no cuenta con Alta Enfermería...'				
				END
				IF (SELECT COUNT(1) FROM @TBLERRORES)>0
				BEGIN
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
				ELSE
				BEGIN
					UPDATE HADM SET CERRADA=1, USUARIOALTA=@USUARIO, FECHAALTAMED=REPLACE(@FECHAALTAMED,'-','')+' '+COALESCE(@HORAALTAMED,'00:00')
						,FECHAALTAENF=REPLACE(@FECHAALTAENF,'-','')+' '+COALESCE(@HORAALTAENF,'00:00'),FECHAALTA=REPLACE(@FECHAALTA,'-','')+' '+COALESCE(@HORAALTA,'00:00') 
					WHERE NOADMISION = @NOADMISION
					IF DBO.FNK_VALORVARIABLE('LIBCAMAALTAADM')='SI'
					BEGIN
						UPDATE HHAB SET ESTADOHAB='Libre', NOADMISION=NULL,IDAFILIADO=NULL  WHERE NOADMISION = @NOADMISION
					END
					IF @TIPOADM=DBO.FNK_VALORVARIABLE('IDURGRIPS')
					BEGIN
						IF COALESCE(@CMD,'')<>'Ninguno'
						BEGIN
							SELECT TOP 1 @NOPRESTACION = HPRED.NOPRESTACION, @NOITEM = HPRED.NOITEM FROM HPRED INNER JOIN HPRE ON HPRED.NOPRESTACION=HPRE.NOPRESTACION
							WHERE HPRE.NOADMISION=@NOADMISION ORDER BY HPRED.VALOREXCEDENTE DESC
							IF COALESCE(@CMD,'')<>'Todos'
							BEGIN
								IF (SELECT TRIAGE FROM HTRIAGE INNER JOIN HADM ON HADM.CNSTRIAGE=HTRIAGE.CNSTRIAGE WHERE HADM.NOADMISION=@NOADMISION)>=@CMD
								BEGIN
									EXEC SPK_COPAGOQX_TRIAGE @NOADMISION,@NOPRESTACION , @NOITEM
									UPDATE HADM SET COPAGO = 0 WHERE NOADMISION = @NOADMISION
									EXEC SPK_PAGOSCAJA_QX @NOADMISION,  @SYS_COMPUTERNAME, '01', @IDSEDE , @USUARIO, @IDTERCERO
								END
							END
							ELSE
							BEGIN
								EXEC SPK_COPAGOQX_TRIAGE @NOADMISION,@NOPRESTACION , @NOITEM
								UPDATE HADM SET COPAGO = 0 WHERE NOADMISION = @NOADMISION
								EXEC SPK_PAGOSCAJA_QX @NOADMISION,  @SYS_COMPUTERNAME, '01', @IDSEDE , @USUARIO, @IDTERCERO
							END
						END
					END
				END
			END
			UPDATE HADM SET  IDMEDICOTRA = @IDMEDICOTRA ,DXINGRESO = @DXINGRESO ,DXEGRESO = @DXEGRESO ,DXSALIDA1 = @DXSALIDA1 ,DXSALIDA2 = @DXSALIDA2
					,DXSALIDA3 = @DXSALIDA3  ,CCOSTO_ALTA = @CCOSTO_ALTA ,ESTADOPSALIDA = @ESTADOPSALIDA ,DESTINO = @DESTINO ,OBS = @OBS ,CAUSABMUERTE = @CAUSABMUERTE
			FROM HADM WHERE NOADMISION=@NOADMISION
		END TRY
		BEGIN CATCH
			SELECT 'KO' OK
			SELECT ERROR = 'Error al procesar el alta, error:'+ERROR_MESSAGE()
			RETURN
		END CATCH
		SELECT 'OK' OK, COALESCE(CERRADA,0) CERRADA FROM HADM WHERE NOADMISION=@NOADMISION
		RETURN
	END
	IF @METODO = 'NOPROCESAR'
	BEGIN		
		SELECT @NOADMISION = JSON_VALUE(@PARAMETROS,'$.NOADMISION')
		SELECT @METODO = JSON_VALUE(@PARAMETROS,'$.METODO')
		SELECT @CLASEANEXO = JSON_VALUE(@PARAMETROS,'$.CLASENOPROC')

		IF COALESCE(@NOADMISION,'')=''
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR = 'Debe especificar el Noadmision'
			RETURN
		END	
		IF @METODO='NP'
		BEGIN
			IF EXISTS (SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND COALESCE(IDMEDICOING,'')='' AND COALESCE(IDMEDICOTRA,'')='')
			BEGIN
				INSERT INTO @TBLERRORES(ERROR)
				SELECT ERROR = 'Debe ingresar el médico de ingeso y/o tratante'
			END	
			IF NOT EXISTS (SELECT 1 FROM HADM WHERE NOADMISION=@NOADMISION AND CERRADA=0)
			BEGIN
				INSERT INTO @TBLERRORES(ERROR)
				SELECT ERROR = 'Esta admisión ya tiene alta'
			END	
			IF (SELECT COUNT(1) FROM HPRE WHERE NOADMISION=@NOADMISION)>0
			BEGIN
				INSERT INTO @TBLERRORES(ERROR)
				SELECT ERROR = 'Esta admisión ya tiene cargos, por lo tanto nopuede darse no procesar.'
			END
			IF COALESCE(@CLASEANEXO,'')=''
			BEGIN
				INSERT INTO @TBLERRORES(ERROR)
				SELECT ERROR = 'Debe especificar la razon de no procesar'
			END
		END
		ELSE
		BEGIN
			IF (SELECT CERRADA FROM HADM WHERE NOADMISION=@NOADMISION) NOT IN (0,2,3)
			BEGIN
				INSERT INTO @TBLERRORES(ERROR)
				SELECT ERROR = 'Debe especificar la razon de no procesar'
				UPDATE HADM SET FACTURABLE = 0, USUARIONOP = @USUARIO, FECHANOP = GETDATE() , CERRADA = 1 WHERE  NOADMISION = @NOADMISION
				UPDATE HHAB SET ESTADOHAB='Libre',NOADMISION=NULL,IDAFILIADO=NULL, TIPOESTANCIA= NULL WHERE NOADMISION=@NOADMISION
			END
		END

		IF (SELECT COUNT(1) FROM @TBLERRORES)>0
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END

		IF @METODO='NP'
		BEGIN
			UPDATE HADM SET FACTURABLE = 0, CERRADA = 1, CLASENOPROC = @CLASEANEXO, USUARIONOP = @USUARIO, FECHANOP = GETDATE()  WHERE NOADMISION = @NOADMISION
		END
		ELSE
		BEGIN
			UPDATE HADM SET FACTURABLE = 0, USUARIONOP = @USUARIO, FECHANOP = GETDATE() , CERRADA = 1 WHERE  NOADMISION = @NOADMISION
			UPDATE HHAB SET ESTADOHAB='Libre',NOADMISION=NULL,IDAFILIADO=NULL, TIPOESTANCIA= NULL WHERE NOADMISION=@NOADMISION
		END
		SELECT 'OK' OK
		RETURN
	END
END
