CREATE OR ALTER PROCEDURE DBO.SPQ_IMOV
@JSON NVARCHAR(MAX)
WITH ENCRYPTION
AS
DECLARE   @PARAMETROS       NVARCHAR(MAX)		   ,@MODELO			   VARCHAR(100)	,@METODO			      VARCHAR(100)
        ,@USUARIO			    VARCHAR(12)			,@NVOCONSEC			VARCHAR(20)		,@CANTIDAD			   INT
        ,@SEDE				    VARCHAR(5)			   ,@NOADMISION		VARCHAR(16)		,@FECHA				   VARCHAR(20)         
        ,@HORA				    VARCHAR(10)			,@ITEM				SMALLINT		   ,@OBS				      VARCHAR(2048)
        ,@SYS_COMPUTERNAME	 VARCHAR(254)		   ,@GRUPO				VARCHAR(8)		,@PENDIENTES		   SMALLINT
        ,@CNSMOV			    VARCHAR(20)			,@FIRMA				VARBINARY(MAX)	,@IDBODEGA			   VARCHAR(20)
		  ,@CNSITRA			    VARCHAR(20)			,@datoIMOVH			NVARCHAR(MAX)	,@PROCESO			   VARCHAR(50)
		  ,@NOLOTE			    VARCHAR(50)			,@datoIMOV			NVARCHAR(MAX)	,@IDTIPOMOV			   VARCHAR(20) 
		  ,@IDBODEGAEXTERNA	 VARCHAR(20)			,@IDSEDE			   VARCHAR(10)		,@COMPANIA			   VARCHAR(10)
		  ,@CNSRPDX			    VARCHAR(20)			,@IDARTICULO		VARCHAR(20)		,@IDAFILIADO		   VARCHAR(20)		,@ID                   INT	
		  ,@CODIGOBARRA		 VARCHAR(20)			,@ERROR				INT				,@IART_DESCRIPCION	VARCHAR(500)
		  ,@FVENCE			    DATE				      ,@IDARTICULO_REAL	VARCHAR(20)		,@TOTAL				   BIT		
		  ,@IDARTICULOTF		 VARCHAR(20)			,@CANTIDADTF		INT				,@EXIST				   INT				,@TRANS                INT
		  ,@ACCION			    VARCHAR(20)			,@ISAL				NVARCHAR(MAX)	,@PROCEDENCIA		   VARCHAR(20)		,@IDITAR               VARCHAR(20)
		  ,@ESTADO			    VARCHAR(20)			,@FECHA_TIME		DATETIME		   ,@NODOCUMENTO		   VARCHAR(50)		,@IDSERVICIO_NUEVO     VARCHAR(20)
		  ,@IDARTICULO_IMOVH  VARCHAR(20)			,@CNSIZSOL			VARCHAR(20)		,@SECTOR			      VARCHAR(20)		,@CNSTRAN              VARCHAR(20)
		  ,@PREFIJO		       VARCHAR(20)			,@sel_IART_fab		NVARCHAR(MAX)	,@IDSERVICIO		   VARCHAR(20)		,@IDAUT  	           VARCHAR(20)
        ,@CODCAJA           VARCHAR(20)         ,@OK              SMALLINT       ,@CNSACJ             VARCHAR(20)	   ,@VALORTOTAL           DECIMAL(14,2)	
        ,@CONTADOR          INT	               ,@DESCSERVICIO    VARCHAR(200)   ,@IDALTERNA          VARCHAR(50)
        ,@ITEM_AUTD         INT		            ,@LIMITE_AU       INT
BEGIN   
   SET DATEFORMAT dmy
   --SELECT @JSON
   SELECT *
   INTO #JSON
   FROM OPENJSON (@json)
   WITH (
      MODELO  VARCHAR(100) '$.MODELO',
      METODO  VARCHAR(100) '$.METODO',
      USUARIO VARCHAR(20) '$.USUARIO',
      PARAMETROS NVARCHAR(MAX) AS JSON
   )
   SELECT @MODELO = MODELO , @METODO = METODO , @PARAMETROS = PARAMETROS, @USUARIO = USUARIO
   FROM #JSON
	SELECT @SYS_COMPUTERNAME = SYS_COMPUTERNAME FROM USUSU WHERE USUARIO = @USUARIO
	SELECT @IDSEDE = IDSEDE, @SEDE = IDSEDE, @COMPANIA=COMPANIA, @IDBODEGA = COALESCE(IDBODEGA, IDBODEGA2, IDBODEGANOCHE, IDBODEGACONSUMO) FROM UBEQ WHERE SYS_ComputerName = @SYS_COMPUTERNAME
	SELECT @GRUPO = (SELECT DBO.FNK_DESCIFRAR(USUSU.GRUPO) FROM USUSU WHERE  USUARIO = @USUARIO)

   --DEFINICION DE TABLA DE ERRORES
   DECLARE @TBLERRORES TABLE(ERROR VARCHAR(200));
   --  
   IF @METODO = 'CONSULTAR_HADM'
   BEGIN
      
      SELECT  @NOADMISION = NOADMISION, @PENDIENTES = PENDIENTES      
      FROM OPENJSON (@PARAMETROS)
      WITH ( 
             NOADMISION            VARCHAR(16)   '$.NOADMISION',
             PENDIENTES            SMALLINT      '$.PENDIENTES'
      )
       -- ANTES DE INSERTAR SE HACE VALIDACIONES
      --IF ( @FECHAHNAT < @FECHAADM ) 
      --     INSERT INTO @TBLERRORES(ERROR) SELECT 'Fecha No puede ser Anterior a la Fecha de Admisi?...'
      
      IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
      BEGIN
         SELECT 'KO' OK, '' CONSECUTIVO
         SELECT ERROR FROM @TBLERRORES
         RETURN
      END
      --SI CONTINUA ES PQ NO SE ENCONTRO ERROR
      --
      SELECT 'OK' OK

      SELECT IMOV.CNSMOV, IMOV.IDBODEGA, IMOV.IDTIPOMOV, ITMO.DESCRIPCION, CONVERT(VARCHAR(10), IMOV.FECHAMOV, 103) FECHA, IMOV.IDSOLICITA,
             IMOV.USUARIOCONF, CONVERT(VARCHAR(10),FECHACONF,103) FECHACONF, CLASEPED, 
             CASE IMOV.ESTADO WHEN 0 THEN 'Pendiente' WHEN 1 THEN 'Confirmado' WHEN 2 THEN 'Anulado' END ESTADO 
      FROM   IMOV INNER JOIN ITMO ON IMOV.IDTIPOMOV = ITMO.IDTIPOMOV
      WHERE  IMOV.NODOCUMENTO = @NOADMISION
      AND    IMOV.ESTADO      = CASE @PENDIENTES WHEN 1 THEN 0 ELSE IMOV.ESTADO END

      RETURN
   END
   IF @METODO = 'CONSULTARDET_HADM'
   BEGIN 
      SELECT  @CNSMOV = CNSMOV
      FROM OPENJSON (@PARAMETROS)
      WITH ( 
             CNSMOV            VARCHAR(16)   '$.CNSMOV'
      )
      SELECT 'OK' OK

      SELECT IMOVH.CNSMOV, IMOVH.IDARTICULO, IART.DESCRIPCION, IMOVH.CANTPEDIDA, IMOVH.CANTIDAD
      FROM   IMOVH INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO
      WHERE  IMOVH.CNSMOV = @CNSMOV

      RETURN
   END
   IF @METODO = 'FIRMA'
	BEGIN
		BEGIN TRY

			SELECT @FIRMA = (
				SELECT DICOM FROM ARCHIVOS WHERE ID = (
					SELECT IDFIRMA 
					FROM IMOV INNER JOIN USUSU ON USUSU.USUARIO = COALESCE(IMOV.USUARIOCONF,IMOV.IDSOLICITA,IMOV.IDRECIBE)
					WHERE CNSMOV=JSON_VALUE(@PARAMETROS,'$.CNSMOV')
					)
				)

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()          
		END CATCH

		IF(SELECT COUNT(*) FROM @TBLERRORES) >0
		BEGIN
			SELECT 'KO' OK, NULL FIRMA
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END

		SELECT @FIRMA AS FIRMA, 'OK' AS OK
	END
	IF @METODO = 'REGRESAR_TRANSITO'
	BEGIN 
		SELECT  @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA
		FROM OPENJSON (@PARAMETROS)
		WITH ( 
             CNSMOV				VARCHAR(16)   '$.CNSMOV'
             ,IDBODEGA			VARCHAR(16)   '$.IDBODEGA'
		)
		SELECT @CNSITRA = CNSITRA FROM IMOV WHERE  CNSMOV = @CNSMOV
		IF  NOT EXISTS (SELECT  * FROM IBODS WHERE VALOR = @USUARIO AND UPPER(ACCESO) = 'SI' AND IDBODEGA = @IDBODEGA)
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Usted no tiene privilegios para realizar ésta acción. Si ésto es un error, comuníquese por favor con el departamento de tecnología'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END	
		IF  EXISTS (SELECT * FROM IMOV WHERE CNSMOV = @CNSMOV AND ESTADO = '2')
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro esta anulado.'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END	
		BEGIN TRY 
			
			UPDATE IMOVH SET ESTADO=2 WHERE CNSMOV = @CNSMOV
			UPDATE IMOV SET ESTADO=2 WHERE CNSMOV=@CNSMOV
			UPDATE ITRA SET ESTADO=0 WHERE CNSITRA=@CNSITRA
			UPDATE ITRAH SET ESTADO=0 WHERE CNSITRA=@CNSITRA

			IF (SELECT DBO.FNK_VALORVARIABLE ('CODIGOUNICOICBU')) = 'SI' 
			BEGIN
				EXEC DBO.SPK_REGRESARENTTRANSITO @CNSITRA
			END

			DELETE FROM ICBU WHERE CNSMOV=@CNSMOV

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
   END
	IF @METODO = 'CRUD_IMOVH'
	BEGIN
		SELECT @datoIMOVH =  datoIMOVH
	   FROM OPENJSON (@PARAMETROS)
	   WITH		 (
		datoIMOVH		NVARCHAR(MAX) AS JSON
		)
		
		SELECT @PROCESO =UPPER( JSON_VALUE(@datoIMOVH,'$.PROCESO'))
		SELECT * INTO #datoIMOVH FROM OPENJSON (@datoIMOVH)
		WITH(
		CNSMOV			VARCHAR(20)		'$.CNSMOV'			,IDARTICULO		VARCHAR(20)		'$.IDARTICULO'
		,CANTIDAD		INT				'$.CANTIDAD'		,PCOSTO			DECIMAL(14,2)	'$.PCOSTO'
		,PVENTA			DECIMAL(14,2)	'$.PVENTA'			,IDITAR			VARCHAR(20)		'$.IDITAR'
		,NOLOTEPEDIDO	VARCHAR(50)		'$.NOLOTEPEDIDO'	,NOLOTE			VARCHAR(20)		'$.NOLOTE'
		,FECHAVENCE		DATE			'$.FECHAVENCE'		,ESTADO			VARCHAR(20)		'$.ESTADO'
		,DETALLE		VARCHAR(200)	'$.DETALLE'			,VLRDTO			DECIMAL(14,2)	'$.VLRDTO'
		,PDTO			DECIMAL(14,2)	'$.PDTO'			,VLRIVA			DECIMAL(14,2)	'$.VLRIVA'
		,PIVA			DECIMAL(14,2)	'$.PIVA'			,IDIMPUESTO		VARCHAR(20)		'$.IDIMPUESTO'
		,IDCLASE		VARCHAR(20)		'$.IDCLASE'			,VLRIMPCONSUMO	DECIMAL(14,2)	'$.VLRIMPCONSUMO'
		,IDFABRICANTE	VARCHAR(20)		'$.IDFABRICANTE'	,CODCUM			VARCHAR(20)		'$.CODCUM'
		,PROCESO		VARCHAR(20)		'$.PROCESO'			,CONSINIVA		BIT				'$.CONSINIVA'
		,TOTAL			DECIMAL(14,2)	'$.TOTAL' )

		BEGIN TRY 
			IF UPPER(@PROCESO)='EDITAR'
			BEGIN
				UPDATE IMOVH SET
				 --CNSMOV			= #datoIMOVH.CNSMOV		
				IDARTICULO		= #datoIMOVH.IDARTICULO	
				,CANTIDAD		= #datoIMOVH.CANTIDAD	
				,PCOSTO			= #datoIMOVH.PCOSTO		
				,PVENTA			= #datoIMOVH.PVENTA		
				,IDITAR			= COALESCE(#datoIMOVH.IDITAR, (SELECT IDITAR FROM IART WHERE IDARTICULO = #datoIMOVH.IDARTICULO	))
				,NOLOTEPEDIDO	= #datoIMOVH.NOLOTEPEDIDO
				--,NOLOTE			= #datoIMOVH.NOLOTE		
				,FECHAVENCE		= COALESCE( REPLACE(JSON_VALUE(@datoIMOVH ,'$.FECHAVENCE'),'-','') , DBO.FNK_GETDATE()) 
				--,FECHAVENCE		= datoIMOVH.FECHAVENCE	
				,ESTADO			= #datoIMOVH.ESTADO		
				,DETALLE		= #datoIMOVH.DETALLE	
				,VLRDTO			= #datoIMOVH.VLRDTO		
				,PDTO			= #datoIMOVH.PDTO		
				,VLRIVA			= #datoIMOVH.VLRIVA		
				,PIVA			= #datoIMOVH.PIVA		
				,IDIMPUESTO		= #datoIMOVH.IDIMPUESTO	
				,IDCLASE		= #datoIMOVH.IDCLASE	
				,VLRIMPCONSUMO	= #datoIMOVH.VLRIMPCONSUMO
				,IDFABRICANTE	= #datoIMOVH.IDFABRICANTE
				,CODCUM			= #datoIMOVH.CODCUM		
				FROM IMOVH , #datoIMOVH WHERE IMOVH.CNSMOV = #datoIMOVH.CNSMOV AND IMOVH.NOLOTE = #datoIMOVH.NOLOTE
			END
			IF UPPER(@PROCESO)='NUEVO'
			BEGIN
				SET @NOLOTE=SPACE(20)
				EXEC SPK_GENCONSECUTIVO '01',@SEDE,'@ICBU',@NOLOTE OUTPUT
				SELECT @NOLOTE = @SEDE + 'L' + REPLACE(SPACE(8 - LEN(@NOLOTE))+LTRIM(RTRIM(@NOLOTE)),SPACE(1),0)

				INSERT INTO IMOVH (
				CNSMOV			
				,IDARTICULO		
				,CANTIDAD		
				,PCOSTO			
				,PVENTA			
				,IDITAR			
				,NOLOTEPEDIDO	
				,NOLOTE			
				,FECHAVENCE		
				,ESTADO			
				,DETALLE		
				,VLRDTO			
				,PDTO			
				,VLRIVA			
				,PIVA			
				,IDIMPUESTO		
				,IDCLASE		
				,VLRIMPCONSUMO	
				,IDFABRICANTE	
				,CODCUM			
				)
				SELECT
				  #datoIMOVH.CNSMOV			
				 ,#datoIMOVH.IDARTICULO		
				 ,#datoIMOVH.CANTIDAD		
				 ,#datoIMOVH.PCOSTO			
				 ,#datoIMOVH.PVENTA			
				 ,COALESCE(#datoIMOVH.IDITAR, (SELECT IDITAR FROM IART WHERE IDARTICULO = #datoIMOVH.IDARTICULO	))		
				 ,#datoIMOVH.NOLOTEPEDIDO	
				 ,@NOLOTE		
				 ,#datoIMOVH.FECHAVENCE		
				 ,#datoIMOVH.ESTADO			
				 ,#datoIMOVH.DETALLE		
				 ,#datoIMOVH.VLRDTO			
				 ,#datoIMOVH.PDTO			
				 ,#datoIMOVH.VLRIVA			
				 ,#datoIMOVH.PIVA			
				 ,#datoIMOVH.IDIMPUESTO		
				 ,#datoIMOVH.IDCLASE		
				 ,#datoIMOVH.VLRIMPCONSUMO	
				 ,#datoIMOVH.IDFABRICANTE	
				 ,#datoIMOVH.CODCUM			
				FROM #datoIMOVH
				
			END
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'CRUD_IMOV'
	BEGIN
		SELECT @datoIMOV =  datoIMOV, @IDBODEGA = IDBODEGA --CNSTRAN
	   FROM OPENJSON (@PARAMETROS)
	   WITH		 (
		datoIMOV		NVARCHAR(MAX) AS JSON
		,IDBODEGA		VARCHAR(20) '$.IDBODEGA'
		)
		
		SELECT @PROCESO =UPPER( JSON_VALUE(@datoIMOV,'$.PROCESO'))
		SELECT * INTO #datoIMOV FROM OPENJSON (@datoIMOV)
		WITH(
		CNSMOV				VARCHAR(20)		'$.CNSMOV'			,PROCESO			VARCHAR(20)		'$.PROCESO'
		,VLRCOMPRA			DECIMAL(14,2)	'$.VLRCOMPRA'		,IDRECIBE			VARCHAR(20)		'$.IDRECIBE'
		,FECHAMOV			DATE			'$.FECHAMOV'		,TIPO_DOC_COMPRA	VARCHAR(20)		'$.TIPO_DOC_COMPRA'
		,IDITAR				VARCHAR(20)		'$.IDITAR'			,IDTIPOMOV			VARCHAR(20)		'$.IDTIPOMOV'
		,VLR_FLETE			DECIMAL(14,2)	'$.VLR_FLETE'		,IDTERCERO			VARCHAR(20)		'$.IDTERCERO'
		,NODOCUMENTO		VARCHAR(20)		'$.NODOCUMENTO'		,CCOSTO				VARCHAR(20)		'$.CCOSTO'
		,IDAREA				VARCHAR(20)		'$.IDAREA'			,IDSOLICITA			VARCHAR(20)		'$.IDSOLICITA'
		,CNSFCOM			VARCHAR(20)		'$.CNSFCOM'			,OBSERVACION		VARCHAR(200)	'$.OBSERVACION'
		,CNSTRAN			VARCHAR(20)		'$.CNSTRAN'	)

		IF (SELECT DBO.FNK_VALORVARIABLE('IDINVTPROPIA')) = (SELECT IDTIPOMOV FROM #datoIMOV) AND (SELECT COALESCE(CNSTRAN,'') FROM #datoIMOV ) = ''
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Debe de seleccionar al paciente.'
			
		END
		IF @PROCESO = 'NUEVO'
		BEGIN
			SELECT @NVOCONSEC = NULL
			--EXEC SPK_GENCONSECUTIVO '01', @SEDE,'@MOV',@NVOCONSEC OUTPUT  
			--SELECT @NVOCONSEC = @SEDE + REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0)
			EXEC SPQ_GENSEQUENCE @SEDE = @SEDE, @PREFIJO = '@MOV', @LONGITUD = 8, @NVOCONSEC = @NVOCONSEC OUTPUT
		END

		IF (SELECT #datoIMOV.FECHAMOV FROM #datoIMOV ) > CONVERT(DATE,GETDATE())
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'La Fecha de Movimiento no puede ser mayor a la fecha Actual.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
		 IF @PROCESO = 'NUEVO' AND (SELECT DBO.FNK_VALORVARIABLE('MOV_PERIODOS_ANT')) = 'NO' AND NOT EXISTS (SELECT * FROM #datoIMOV WHERE YEAR(#datoIMOV.FECHAMOV) = YEAR(GETDATE())  AND MONTH(#datoIMOV.FECHAMOV) = MONTH(GETDATE())    )
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No se Permiten hacer Movimientos de Periodos Anteriores.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
		 IF @PROCESO = 'NUEVO' AND ((SELECT DBO.FNK_VALORVARIABLE('IDINVMOV_COMPRAS')) = (SELECT IDTIPOMOV FROM #datoIMOV) OR (SELECT DBO.FNK_VALORVARIABLE('IDINVMOV_REMISION_EN')) = (SELECT IDTIPOMOV FROM #datoIMOV)) 
		 AND EXISTS (SELECT  * FROM IMOV,#datoIMOV  WHERE IMOV.NODOCUMENTO = #datoIMOV.NODOCUMENTO AND IMOV.IDTERCERO = #datoIMOV.IDTERCERO AND COALESCE(IMOV.ESTADO,0) = 1    )
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'Número de Factura Duplicado.... revisar'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
		 --SELECT TOP 100 NODOCUMENTO,IDTERCERO, CNSMOV,   * FROM #datoIMOV
		 
		 --SELECT  * FROM IMOV,#datoIMOV  WHERE IMOV.NODOCUMENTO = #datoIMOV.NODOCUMENTO AND IMOV.IDTERCERO = #datoIMOV.IDTERCERO AND IMOV.CNSFCOM <>  #datoIMOV.CNSFCOM
		 IF @PROCESO = 'EDITAR' AND EXISTS (SELECT * FROM IMOV,#datoIMOV WHERE IMOV.CNSMOV = #datoIMOV.CNSMOV AND COALESCE(IMOV.ESTADO,0) = 1 )
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No se puede Editar, el regsitro ya se encuentra Confirmado'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
		 IF @PROCESO = 'EDITAR' AND ((SELECT DBO.FNK_VALORVARIABLE('IDINVMOV_COMPRAS')) = (SELECT IDTIPOMOV FROM #datoIMOV) OR (SELECT DBO.FNK_VALORVARIABLE('IDINVMOV_REMISION_EN')) = (SELECT IDTIPOMOV FROM #datoIMOV)) 
		 AND EXISTS (SELECT  * FROM IMOV,#datoIMOV  WHERE IMOV.NODOCUMENTO = #datoIMOV.NODOCUMENTO AND IMOV.IDTERCERO = #datoIMOV.IDTERCERO AND IMOV.CNSFCOM <>  #datoIMOV.CNSFCOM AND COALESCE(IMOV.ESTADO,0) = 1  )
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'Número de Factura Duplicado.... revisar'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
		 IF @PROCESO = 'NUEVO' AND EXISTS (SELECT * FROM PRI,#datoIMOV WHERE YEAR(#datoIMOV.FECHAMOV) = PRI.ANO AND MONTH(#datoIMOV.FECHAMOV) = PRI.MES AND PRI.CERRADO_INV = 1 )
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No se Permiten hacer Movimientos de Periodos Cerrados.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
		 IF @PROCESO = 'NUEVO' AND EXISTS (SELECT * FROM IMOV WHERE  IMOV.CNSMOV = @NVOCONSEC)
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'Consecutivo Utilizado por otro Movimiento, Verificar Contadores.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
		 IF (SELECT DBO.FNK_VALORVARIABLE('ASI_VAL_CCAF_CARGOS')) = 'SI' AND EXISTS (SELECT * FROM ITMO,#datoIMOV WHERE ITMO.IDTIPOMOV = #datoIMOV.IDTIPOMOV AND ITMO.SECONTABILIZA = 1)
		 AND (SELECT COUNT(*) FROM KMCOM,#datoIMOV WHERE KMCOM.IDTIPOCONT = 'MOV_INVENTARIO' AND KMCOM.PREFIJO = #datoIMOV.IDTIPOMOV AND KMCOM.CCOSTO = #datoIMOV.CCOSTO  AND  KMCOM.IDAREA = #datoIMOV.IDAREA ) = 0
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No existe configuracion contable para este prefijo, centro de costo y Area funcional.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END

		BEGIN TRY 
			IF UPPER(@PROCESO)='EDITAR' --F_FACTURA
			BEGIN
				SELECT @FECHA_TIME =  (SELECT DATEADD(HOUR,(datepart(hh, IMOV.FECHAMOV)),DATEADD(minute,(datepart(mi, IMOV.FECHAMOV)),DATEADD(SECOND,(datepart(ss, IMOV.FECHAMOV)),   REPLACE(JSON_VALUE(@datoIMOV ,'$.FECHAMOV'),'-','')   ))))
				FROM IMOV , #datoIMOV WHERE IMOV.CNSMOV = #datoIMOV.CNSMOV

				UPDATE IMOV SET
				 --CNSMOV			    = #datoIMOV.CNSMOV	 IDITAR		
				VLRCOMPRA			= #datoIMOV.VLRCOMPRA		
				,IDRECIBE			= #datoIMOV.IDRECIBE
				,IDITAR				= #datoIMOV.IDITAR
				,FECHAMOV			= @FECHA_TIME	
				,TIPO_DOC_COMPRA	= #datoIMOV.TIPO_DOC_COMPRA
				,IDTIPOMOV			= #datoIMOV.IDTIPOMOV		
				,VLR_FLETE			= #datoIMOV.VLR_FLETE		
				,IDTERCERO			= #datoIMOV.IDTERCERO		
				,NODOCUMENTO		= #datoIMOV.NODOCUMENTO	
				,CCOSTO				= #datoIMOV.CCOSTO			
				,IDAREA				= #datoIMOV.IDAREA			
				,IDSOLICITA			= #datoIMOV.IDSOLICITA		
				,OBSERVACION		= #datoIMOV.OBSERVACION	
				,CNSTRAN			= #datoIMOV.CNSTRAN	
				,F_FACTURA			= COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.F_FACTURA'),'-','') , NULL) 
				,F_VENCE			= COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.F_VENCE'),'-','') , NULL) 
				FROM IMOV , #datoIMOV WHERE IMOV.CNSMOV = #datoIMOV.CNSMOV
				SELECT @NVOCONSEC = #datoIMOV.CNSMOV FROM #datoIMOV
			END
			IF UPPER(@PROCESO)='NUEVO'
			BEGIN
				--SELECT @NVOCONSEC = NULL
				--EXEC SPK_GENCONSECUTIVO '01', @SEDE,'@MOV',@NVOCONSEC OUTPUT  
				--SELECT @NVOCONSEC = @SEDE + REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0)

				INSERT INTO IMOV (
				CNSMOV			
				,VLRCOMPRA
				,IDITAR
				,IDRECIBE		
				,FECHAMOV		
				,TIPO_DOC_COMPRA
				,IDTIPOMOV		
				,VLR_FLETE		
				,IDTERCERO		
				,NODOCUMENTO	
				,CCOSTO			
				,IDAREA			
				,IDSOLICITA		
				,OBSERVACION	
				,IDBODEGA
				,PROCEDENCIA
				,USUARIO
				,CONTABILIZADA
				,SYS_ComputerName
				,ESTADO
				,F_FACTURA
				,F_VENCE, CNSTRAN
				)
				SELECT
				   @NVOCONSEC		
				  ,#datoIMOV.VLRCOMPRA
				  ,#datoIMOV.IDITAR
				  ,#datoIMOV.IDRECIBE		
				  --,COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.FECHAMOV'),'-','') , DBO.FNK_GETDATE()) 
				  --,(SELECT DATEADD(HOUR,(datepart(hh, GETDATE())),DATEADD(minute,(datepart(mi, GETDATE())),DATEADD(SECOND,(datepart(ss, GETDATE())),(COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.FECHAMOV'),'-','') , DBO.FNK_GETDATE()) )))))
				  , CASE WHEN (SELECT  JSON_VALUE(@datoIMOV ,'$.FECHAMOV') ) IS NOT NULL 
						THEN  (SELECT DATEADD(HOUR,(datepart(hh, GETDATE())),DATEADD(minute,(datepart(mi, GETDATE())),DATEADD(SECOND,(datepart(ss, GETDATE())), REPLACE(JSON_VALUE(@datoIMOV ,'$.FECHAMOV'),'-','')  )))) 
						WHEN (SELECT  JSON_VALUE(@datoIMOV ,'$.FECHAMOV') ) IS NULL THEN DBO.FNK_GETDATE()
						END
				  ,#datoIMOV.TIPO_DOC_COMPRA
				  ,#datoIMOV.IDTIPOMOV		
				  ,#datoIMOV.VLR_FLETE		
				  ,#datoIMOV.IDTERCERO		
				  ,#datoIMOV.NODOCUMENTO	
				  ,#datoIMOV.CCOSTO			
				  ,#datoIMOV.IDAREA			
				  ,#datoIMOV.IDSOLICITA		
				  ,#datoIMOV.OBSERVACION	
				  ,@IDBODEGA
				  ,'INV'
				  ,@USUARIO
				  ,0
				  ,@SYS_ComputerName
				  ,0
				  ,COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.F_FACTURA'),'-','') , NULL) 
				  ,COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.F_VENCE'),'-','') , NULL) 
				  ,#datoIMOV.CNSTRAN
				FROM #datoIMOV
			END
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK, @NVOCONSEC CNSMOV
		RETURN
	END
	IF @METODO = 'CRUD_IMOV_SAL'
	BEGIN
		SELECT @datoIMOV =  datoIMOV, @IDBODEGA = IDBODEGA
	   FROM OPENJSON (@PARAMETROS)
	   WITH		 (
		datoIMOV		NVARCHAR(MAX) AS JSON
		,IDBODEGA		VARCHAR(20) '$.IDBODEGA'
		)
		
		SELECT @PROCESO =UPPER( JSON_VALUE(@datoIMOV,'$.PROCESO'))
		SELECT * INTO #datoIMOV_SAL FROM OPENJSON (@datoIMOV)
		WITH(
		CNSMOV				VARCHAR(20)		'$.CNSMOV'				,PROCESO			VARCHAR(20)		'$.PROCESO'
		,VLRCOMPRA			DECIMAL(14,2)	'$.VLRCOMPRA'			,IDRECIBE			VARCHAR(20)		'$.IDRECIBE'
		,FECHAMOV			VARCHAR(10)		'$.FECHAMOV'			,TIPO_DOC_COMPRA	VARCHAR(20)		'$.TIPO_DOC_COMPRA'
		,IDITAR				VARCHAR(20)		'$.IDITAR'				,IDTIPOMOV			VARCHAR(20)		'$.IDTIPOMOV'
		,VLR_FLETE			DECIMAL(14,2)	'$.VLR_FLETE'			,IDTERCERO			VARCHAR(20)		'$.IDTERCERO'
		,NODOCUMENTO		VARCHAR(20)		'$.NODOCUMENTO'			,CCOSTO				VARCHAR(20)		'$.CCOSTO'
		,IDAREA				VARCHAR(20)		'$.IDAREA'				,IDSOLICITA			VARCHAR(20)		'$.IDSOLICITA'
		,IDBODEGAEXTERNA	VARCHAR(20)		'$.IDBODEGAEXTERNA'		,CNSTRAN			VARCHAR(20)		'$.CNSTRAN'
		,IDTERCERORESP		VARCHAR(20)		'$.IDTERCERORESP'		,PROCEDENCIA		VARCHAR(20)		'$.PROCEDENCIA'
		,IDARTICULODESTINO	VARCHAR(20)		'$.IDARTICULODESTINO'	,CANTIDADDESTINO	VARCHAR(20)		'$.CANTIDADDESTINO'
		,TIPOENT			VARCHAR(20)		'$.TIPOENT'				,FACTURADA			BIT				'$.FACTURADA'
		,OBSERVACION		VARCHAR(200)	'$.OBSERVACION'	)

		SELECT @IDTIPOMOV = IDTIPOMOV, @IDBODEGAEXTERNA = IDBODEGAEXTERNA FROM #datoIMOV_SAL
		
		IF (SELECT DBO.FNK_ACCESO_CAMPO (@GRUPO,'ITMO','IDTIPOMOV', @IDTIPOMOV)) = 1
		BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No tiene Permisos para Seleccionar este Tipo de Movimiento.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
		END
		IF (SELECT DBO.FNK_ACCESO_CAMPO (@GRUPO,'IMOV','IDBODEGAEXTERNA', @IDBODEGAEXTERNA)) = 1
		BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No tiene Permisos para Seleccionar esta Bodega Destino.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
		END
		IF @IDBODEGA = (SELECT IDBODEGAEXTERNA FROM #datoIMOV_SAL) AND (SELECT IDTIPOMOV FROM #datoIMOV_SAL) = (SELECT DBO.FNK_VALORVARIABLE('IDTS'))
		BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No puede Seleccionar la misma Bodega Destino Para Los Traslados.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
		END
		IF (SELECT #datoIMOV_SAL.FECHAMOV FROM #datoIMOV_SAL ) > CONVERT(DATE,GETDATE())
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'La Fecha de Movimiento no puede ser mayor a la fecha Actual.'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		IF (SELECT YEAR( #datoIMOV_SAL.FECHAMOV ) FROM #datoIMOV_SAL ) < YEAR(GETDATE()) AND (SELECT MONTH( #datoIMOV_SAL.FECHAMOV ) FROM #datoIMOV_SAL ) < MONTH(GETDATE())
			AND DBO.FNK_VALORVARIABLE('MOV_PERIODOS_ANT') = 'NO'
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'No se Permiten hacer Movimientos de Periodos Anteriores.'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		IF EXISTS (SELECT * FROM PRI,#datoIMOV_SAL WHERE PRI.ANO = YEAR( #datoIMOV_SAL.FECHAMOV ) AND PRI.MES = MONTH( #datoIMOV_SAL.FECHAMOV ) AND PRI.CERRADO = 1 )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'No se Permiten hacer Movimientos de Periodos Cerrados.'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END

		BEGIN TRY 
			IF @PROCESO = 'NUEVO'
			BEGIN
				SELECT @NVOCONSEC = NULL
				--EXEC SPK_GENCONSECUTIVO '01', @SEDE,'@MOV',@NVOCONSEC OUTPUT  
				--SELECT @NVOCONSEC = @SEDE + REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0)
				--EXEC SPQ_GENSEQUENCE @SEDE,'@MOV',NULL,@NVOCONSEC OUTPUT 
				EXEC SPQ_GENSEQUENCE @SEDE = @SEDE, @PREFIJO = '@MOV', @LONGITUD = 8, @NVOCONSEC = @NVOCONSEC OUTPUT
			END

			IF UPPER(@PROCESO)='EDITAR'
			BEGIN
				SELECT @FECHA_TIME =  (SELECT IMOV.FECHAMOV FROM IMOV, #datoIMOV_SAL WHERE IMOV.CNSMOV = #datoIMOV_SAL.CNSMOV)
				--SELECT @FECHA_TIME
				--SELECT GETDATE()
				--SELECT TOP 100 FECHAMOV,   * FROM #datoIMOV_SAL
				UPDATE #datoIMOV_SAL SET #datoIMOV_SAL.FECHAMOV = REPLACE(#datoIMOV_SAL.FECHAMOV, '-', '') WHERE 1 = 1
				--SELECT TOP 100   * FROM  #datoIMOV_SAL
				UPDATE IMOV SET
				VLRCOMPRA			= #datoIMOV_SAL.VLRCOMPRA		
				,IDRECIBE			= #datoIMOV_SAL.IDRECIBE
				,IDITAR				= #datoIMOV_SAL.IDITAR
				,FECHAMOV			= (SELECT DATEADD(HOUR,(datepart(hh, @FECHA_TIME)),DATEADD(minute,(datepart(mi, @FECHA_TIME)),DATEADD(SECOND,(datepart(ss, @FECHA_TIME)),#datoIMOV_SAL.FECHAMOV))))	
				--,FECHAMOV			= (SELECT DATEADD(HOUR,(datepart(hh, GETDATE())),DATEADD(minute,(datepart(mi, GETDATE())),DATEADD(SECOND,(datepart(ss, GETDATE())),#datoIMOV_SAL.FECHAMOV))))	
				,TIPO_DOC_COMPRA	= #datoIMOV_SAL.TIPO_DOC_COMPRA
				,IDTIPOMOV			= #datoIMOV_SAL.IDTIPOMOV		
				,VLR_FLETE			= #datoIMOV_SAL.VLR_FLETE		
				,IDTERCERO			= #datoIMOV_SAL.IDTERCERO		
				,NODOCUMENTO		= #datoIMOV_SAL.NODOCUMENTO	
				,CCOSTO				= #datoIMOV_SAL.CCOSTO			
				,IDAREA				= #datoIMOV_SAL.IDAREA			
				,IDSOLICITA			= #datoIMOV_SAL.IDSOLICITA		
				,OBSERVACION		= #datoIMOV_SAL.OBSERVACION	
				,IDBODEGAEXTERNA	= #datoIMOV_SAL.IDBODEGAEXTERNA	
				,CNSTRAN			= #datoIMOV_SAL.CNSTRAN	
				,IDTERCERORESP		= #datoIMOV_SAL.IDTERCERORESP	
				,PROCEDENCIA		= #datoIMOV_SAL.PROCEDENCIA	
				,IDARTICULODESTINO	= #datoIMOV_SAL.IDARTICULODESTINO	
				,CANTIDADDESTINO	= #datoIMOV_SAL.CANTIDADDESTINO	
				,TIPOENT			= #datoIMOV_SAL.TIPOENT	
				,FACTURADA			= #datoIMOV_SAL.FACTURADA	
				FROM IMOV , #datoIMOV_SAL WHERE IMOV.CNSMOV = #datoIMOV_SAL.CNSMOV
				SELECT @NVOCONSEC = #datoIMOV_SAL.CNSMOV FROM #datoIMOV_SAL
			END
			IF UPPER(@PROCESO)='NUEVO'
			BEGIN

				INSERT INTO IMOV (
				CNSMOV			
				,VLRCOMPRA
				,IDITAR
				,IDRECIBE		
				,FECHAMOV		
				,TIPO_DOC_COMPRA
				,IDTIPOMOV		
				,VLR_FLETE		
				,IDTERCERO		
				,NODOCUMENTO	
				,CCOSTO			
				,IDAREA			
				,IDSOLICITA		
				,OBSERVACION	
				,IDBODEGA
				,PROCEDENCIA
				,USUARIO
				,CONTABILIZADA
				,SYS_ComputerName
				,ESTADO
				,IDBODEGAEXTERNA
				,CNSTRAN
				,IDTERCERORESP
				,IDARTICULODESTINO
				,CANTIDADDESTINO
				,TIPOENT
				,FACTURADA
				
				)
				SELECT
					@NVOCONSEC		
					,#datoIMOV_SAL.VLRCOMPRA
					,#datoIMOV_SAL.IDITAR
					,#datoIMOV_SAL.IDRECIBE		
					--,COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.FECHAMOV'),'-','') , DBO.FNK_GETDATE()) 
					--,(SELECT DATEADD(HOUR,(datepart(hh, GETDATE())),DATEADD(minute,(datepart(mi, GETDATE())),DATEADD(SECOND,(datepart(ss, GETDATE())),(COALESCE( REPLACE(JSON_VALUE(@datoIMOV ,'$.FECHAMOV'),'-','') , DBO.FNK_GETDATE()) )))))
					, CASE WHEN (SELECT  JSON_VALUE(@datoIMOV ,'$.FECHAMOV') ) IS NOT NULL 
					THEN  (SELECT DATEADD(HOUR,(datepart(hh, GETDATE())),DATEADD(minute,(datepart(mi, GETDATE())),DATEADD(SECOND,(datepart(ss, GETDATE())), REPLACE(JSON_VALUE(@datoIMOV ,'$.FECHAMOV'),'-','')  )))) 
					WHEN (SELECT  JSON_VALUE(@datoIMOV ,'$.FECHAMOV') ) IS NULL THEN DBO.FNK_GETDATE()
					END
					,#datoIMOV_SAL.TIPO_DOC_COMPRA
					,#datoIMOV_SAL.IDTIPOMOV		
					,#datoIMOV_SAL.VLR_FLETE		
					,#datoIMOV_SAL.IDTERCERO		
					,#datoIMOV_SAL.NODOCUMENTO	
					,#datoIMOV_SAL.CCOSTO			
					,#datoIMOV_SAL.IDAREA			
					,#datoIMOV_SAL.IDSOLICITA		
					,#datoIMOV_SAL.OBSERVACION	
					,@IDBODEGA
					,'INV'
					,@USUARIO
					,0
					,@SYS_ComputerName
					,0
					,#datoIMOV_SAL.IDBODEGAEXTERNA
					,#datoIMOV_SAL.CNSTRAN
					,#datoIMOV_SAL.IDTERCERORESP
					,#datoIMOV_SAL.IDARTICULODESTINO
					,#datoIMOV_SAL.CANTIDADDESTINO
					,#datoIMOV_SAL.TIPOENT
					,#datoIMOV_SAL.FACTURADA
				FROM #datoIMOV_SAL
			END
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK, @NVOCONSEC CNSMOV
		RETURN
	END
	IF @METODO = 'SEL_IART_SAL'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)					'$.CNSMOV'
		,IDBODEGA			VARCHAR(20)					'$.IDBODEGA'
		)
		
		BEGIN TRY 
			SELECT 'OK' AS OK
			SELECT IMOVH.CNSMOV, IMOVH.IDARTICULO,  IART.DESCRIPCION, IMOVH.CANTPEDIDA, IMOVH.CANTIDAD,  IMOVH.NOLOTE,  IMOVH.ITEM , IART.IDSERVICIO FROM  IMOVH 
				INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO
			WHERE  CNSMOV = @CNSMOV
			ORDER BY   IMOVH.ITEM ASC

			SELECT CNSMOV,ISAL.IDARTICULO,NOLOTE,CANTIDAD, FECHAVENCE,HERMANO_MAYOR,1 DATO, IART.DESCRIPCION, IART.IDSERVICIO, IART.IDALTERNA
			FROM ISAL 
			INNER JOIN VWK_HERMANOS_INVENTARIO B ON ISAL.IDARTICULO=B.IDARTICULO 
			INNER JOIN IART ON B.HERMANO_MAYOR = IART.IDARTICULO
			WHERE CNSMOV = @CNSMOV

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'SEL_IEXI_SAL'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA, @IDARTICULO = IDARTICULO, @ITEM = ITEM, @PROCEDENCIA = PROCEDENCIA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV			VARCHAR(20)		'$.CNSMOV'		,IDARTICULO		VARCHAR(20)		'$.IDARTICULO'
		,IDBODEGA		VARCHAR(20)		'$.IDBODEGA'	,PROCEDENCIA	VARCHAR(20)		'$.PROCEDENCIA'
		,ITEM			INT				'$.ITEM')
		
		BEGIN TRY 
			SELECT 'OK' AS OK
			IF @PROCEDENCIA <> 'INV'
				SELECT @IDARTICULO = (SELECT HERMANO_MAYOR FROM VWK_HERMANOS_INVENTARIO WHERE IDARTICULO = @IDARTICULO)

			IF (SELECT DBO.FNK_VALORVARIABLE('IXCOUNTRY')) <> 'PERU'
			BEGIN
				SELECT NOLOTE,NOLOTEPEDIDO,EXISLOTE,FECHAVENCE,IEXI.PCOSTO, IEXI.IDARTICULO, IART.IDALTERNA, IART.IDSERVICIO, COALESCE(SELLOCALIDAD,'') SELLOCALIDAD, COALESCE(NROUNIDAD,'') NROUNIDAD, TER.RAZONSOCIAL, TER.IDTERCERO
				FROM IEXI 
				INNER JOIN IART ON IEXI.IDARTICULO = IART.IDARTICULO
				INNER JOIN DBO.VWK_HERMANOS_INVENTARIO H ON H.IDARTICULO=IEXI.IDARTICULO 
				LEFT JOIN TER ON IART.IDFABRICANTE = TER.IDTERCERO
				WHERE  H.HERMANO_MAYOR = @IDARTICULO
				AND EXISLOTE>0 AND IDBODEGA= @IDBODEGA
			END
			IF (SELECT DBO.FNK_VALORVARIABLE('IXCOUNTRY')) = 'PERU'
			BEGIN
				--SELECT  IEXI.NOLOTE,IEXI.NOLOTEPEDIDO,IEXI.EXISLOTE,IEXI.FECHAVENCE,IEXI.PCOSTO, IEXI.IDARTICULO, IART.IDALTERNA
				--, IART.IDSERVICIO
				--FROM  IEXI 
				--INNER JOIN IART ON IEXI.IDARTICULO = IART.IDARTICULO
				--WHERE IEXI.IDARTICULO =  @IDARTICULO AND IDBODEGA = @IDBODEGA AND IEXI.EXISLOTE > 0
				SELECT NOLOTE,NOLOTEPEDIDO,EXISLOTE,FECHAVENCE,IEXI.PCOSTO, IEXI.IDARTICULO, IART.IDALTERNA, IART.IDSERVICIO,COALESCE(SELLOCALIDAD,'') SELLOCALIDAD, COALESCE(NROUNIDAD,'') NROUNIDAD, TER.RAZONSOCIAL, TER.IDTERCERO
				FROM IEXI 
				INNER JOIN IART ON IEXI.IDARTICULO = IART.IDARTICULO
				INNER JOIN DBO.VWK_HERMANOS_INVENTARIO H ON H.IDARTICULO=IEXI.IDARTICULO 
				LEFT JOIN TER ON IART.IDFABRICANTE = TER.IDTERCERO
				WHERE  H.HERMANO_MAYOR = @IDARTICULO
				AND EXISLOTE>0 AND IDBODEGA= @IDBODEGA
			END

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'SEL_IEXI_2_SAL'
	BEGIN
		SELECT @IDBODEGA = IDBODEGA, @IDARTICULO = IDARTICULO
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		IDBODEGA			VARCHAR(20)					'$.IDBODEGA'
		,IDARTICULO			VARCHAR(20)					'$.IDARTICULO'
		)
		
		BEGIN TRY 
			SELECT 'OK' AS OK

			  SELECT NOLOTE,NOLOTEPEDIDO,EXISLOTE,FECHAVENCE,IEXI.PCOSTO, IEXI.IDARTICULO, IART.IDALTERNA, IART.IDSERVICIO
			 FROM IEXI 
			 INNER JOIN IART ON IEXI.IDARTICULO = IART.IDARTICULO
			 WHERE IART.IDSERVICIO= @IDARTICULO
			 AND EXISLOTE>0 AND IDBODEGA= @IDBODEGA

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'LEER_CODEBAR'
	BEGIN
		SELECT @CODIGOBARRA = CODIGOBARRA, @CNSMOV = CNSMOV
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CODIGOBARRA			VARCHAR(50)					'$.CODIGOBARRA'
		,CNSMOV				VARCHAR(20)					'$.CNSMOV'
		)
		

		SELECT 'OK' AS OK

		SELECT 
			--@ERROR = A.ERROR
			--,@IDARTICULO = LTRIM(RTRIM(A.IDARTICULO))
			--,@IART_DESCRIPCION = LTRIM(RTRIM(IART.DESCRIPCION))
			--,@NOLOTE = LTRIM(RTRIM(A.NOLOTE))
			--,@FVENCE = A.FECHAVENCE 
			--,@IDARTICULO_IMOVH = LTRIM(RTRIM(A.IDARTICULO_IMOVH))
			A.*,
			IART.DESCRIPCION
				
		FROM FNK_VLIDABARCODE (@CODIGOBARRA, @CNSMOV) A
			LEFT JOIN IART ON IART.IDARTICULO = A.IDARTICULO

		RETURN
		/*
		IF 1 = 2
		BEGIN 
			IF @ERROR = 1
			BEGIN
				SELECT 'OK' OK,'ERROR EN FORMATO DE CODIGO DE BARRAS.' ERROR , @IDARTICULO IDARTICULO,@IART_DESCRIPCION IART_DESCRIPCION, @NOLOTE NOLOTE, @FVENCE FVENCE, @IDARTICULO_IMOVH IDARTICULO_IMOVH
				RETURN
			END
			IF @ERROR = 2
			BEGIN
				SELECT 'OK' OK,'NO HAY EXISTENCIA SUFICIENTE.' ERROR, @IDARTICULO IDARTICULO,@IART_DESCRIPCION IART_DESCRIPCION, @NOLOTE NOLOTE, @FVENCE FVENCE, @IDARTICULO_IMOVH IDARTICULO_IMOVH
				RETURN
			END
			IF @ERROR = 3
			BEGIN
				SELECT 'OK' OK,'ESTE ARTICULO NO FUE SOLICITADO.' ERROR, @IDARTICULO IDARTICULO,@IART_DESCRIPCION IART_DESCRIPCION, @NOLOTE NOLOTE, @FVENCE FVENCE, @IDARTICULO_IMOVH IDARTICULO_IMOVH
				RETURN
			END

			PRINT '@ERROR:				' + CAST(@ERROR AS VARCHAR)
			PRINT '@IDARTICULO:		' + COALESCE(@IDARTICULO, '')
			PRINT '@IART_DESCRIPCION:	' + COALESCE(@IART_DESCRIPCION, '')
			PRINT '@NOLOTE:			' + COALESCE(@NOLOTE, '')
			PRINT '@FVENCE:			' + CONVERT(VARCHAR,@FVENCE)
			PRINT '@IDARTICULO_IMOVH:	' + COALESCE(@IDARTICULO_IMOVH, '')
		END
		*/
	
	END
	IF @METODO = 'ENTREGA_ISAL'
	BEGIN
		SELECT @CODIGOBARRA = CODIGOBARRA, @CNSMOV = CNSMOV, @NOLOTE = NOLOTE , @TOTAL = TOTAL, @CANTIDAD = CANTIDAD
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CODIGOBARRA			VARCHAR(50)			'$.CODIGOBARRA'
		,CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,NOLOTE				VARCHAR(20)			'$.NOLOTE'
		,TOTAL				BIT					'$.TOTAL'
		,CANTIDAD			INT					'$.CANTIDAD'
		)
		
		BEGIN TRY 
			
			IF COALESCE(@CODIGOBARRA,'')<> ''
			BEGIN
				SELECT 
					@ERROR = A.ERROR
				FROM FNK_VLIDABARCODE (@CODIGOBARRA, @CNSMOV) A
					LEFT JOIN IART ON IART.IDARTICULO = A.IDARTICULO

				IF @ERROR = 1
				BEGIN
					INSERT INTO @TBLERRORES(ERROR) SELECT 'ERROR EN FORMATO DE CODIGO DE BARRAS.'
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
				IF @ERROR = 2
				BEGIN
					INSERT INTO @TBLERRORES(ERROR) SELECT 'NO HAY EXISTENCIA SUFICIENTE.'
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
				IF @ERROR = 3
				BEGIN
					INSERT INTO @TBLERRORES(ERROR) SELECT 'ESTE ARTICULO NO FUE SOLICITADO.'
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
				IF @ERROR = 4
				BEGIN
					INSERT INTO @TBLERRORES(ERROR) SELECT 'EL ARTICULO YA FUE SELECCIONADO PREVIAMENTE.'
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
			END

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK, @IDARTICULO IDARTICULO, @NOLOTE NOLOTE, @FVENCE FVENCE
		RETURN
	END
	IF @METODO = 'CRUD_IART'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA , @CANTIDAD = CANTIDAD, @IDARTICULO = IDARTICULO, @IDARTICULOTF = IDARTICULOTF, @CANTIDADTF = CANTIDADTF
				,@ACCION = ACCION, @NOLOTE = NOLOTE
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDBODEGA			VARCHAR(50)			'$.IDBODEGA'
		,IDARTICULO			VARCHAR(50)			'$.IDARTICULO'
		,IDARTICULOTF		VARCHAR(20)			'$.IDARTICULOTF'
		,CANTIDAD			INT					'$.CANTIDAD'
		,CANTIDADTF			INT					'$.CANTIDADTF'
		,ACCION				VARCHAR(20)			'$.ACCION'
		,NOLOTE				VARCHAR(20)			'$.NOLOTE'

		)
		SELECT  @EXIST = CANTIDAD  FROM [dbo].[VWK_IEXI_IDBODEGA] 
		WHERE IDARTICULO = @IDARTICULO AND  VWK_IEXI_IDBODEGA.IDBODEGA = @IDBODEGA               
		SELECT @TRANS = 0

		IF (SELECT IDTIPOMOV FROM IMOV WHERE CNSMOV = @CNSMOV) = (SELECT DBO.FNK_VALORVARIABLE('IDINVTFSA'))
		BEGIN
			SELECT @TRANS = 1
		END

		IF @CANTIDAD <=0
		BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'La Cantidad No Puede ser Menor o Igual  que Cero(0)'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
		END
		IF @CANTIDAD > @EXIST
		BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'La Cantidad No Puede ser Mayor Que la Existencia'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
		END

		BEGIN TRY 
			IF (SELECT DBO.FNK_VALORVARIABLE ('IXCOUNTRY') ) <> 'PERU'
			BEGIN
				IF @TRANS = 1
					SELECT @CANTIDADTF = @CANTIDAD*@CANTIDADTF
			
				EXEC SPK_INSERTACAMBIABORRA_IMOVH @CNSMOV, @IDARTICULO, @CANTIDAD, @ACCION, @IDARTICULOTF, @CANTIDADTF
			END
			IF (SELECT DBO.FNK_VALORVARIABLE ('IXCOUNTRY') ) = 'PERU'
			BEGIN
				IF NOT EXISTS (SELECT   * FROM IMOVH WHERE CNSMOV = @CNSMOV AND IDARTICULO = @IDARTICULO)
				BEGIN
					PRINT 'INSERTA'
					SELECT @ITEM=COALESCE(MAX(ITEM),0)+1 FROM IMOVH WHERE CNSMOV=@CNSMOV
				
					INSERT INTO IMOVH (CNSMOV,IDARTICULO,CANTPEDIDA,ESTADO,ITEM,NOLOTE,IDARTICULOTF,CANTIDADTF, PCOSTOANTES, IDITAR, USUARIO)
					SELECT @CNSMOV,@IDARTICULO,@CANTIDAD,0,@ITEM,'Sin Definir',NULL,NULL, IART.PCOSTO, IART.IDITAR, IMOV.USUARIO
					FROM IART, IMOV WHERE  IART.IDARTICULO = @IDARTICULO AND IMOV.CNSMOV = @CNSMOV

					SELECT 'OK' AS OK

					SELECT IMOVH.CNSMOV, IMOVH.IDARTICULO,  IART.DESCRIPCION, IMOVH.CANTPEDIDA, IMOVH.CANTIDAD,  IMOVH.NOLOTE,  IMOVH.ITEM , IART.IDSERVICIO FROM  IMOVH 
						INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO
					WHERE  CNSMOV = @CNSMOV
					ORDER BY   IMOVH.ITEM ASC
					RETURN

				END
				IF EXISTS (SELECT   * FROM IMOVH WHERE CNSMOV = @CNSMOV AND IDARTICULO = @IDARTICULO)
				BEGIN
					PRINT 'ACTUALIZA'
					UPDATE IMOVH SET CANTPEDIDA = CANTPEDIDA + @CANTIDAD WHERE  CNSMOV = @CNSMOV AND IDARTICULO = @IDARTICULO
				END

			END
			SELECT 'OK' AS OK

--query2
--query2
			SELECT IMOVH.CNSMOV, IMOVH.IDARTICULO,  IART.DESCRIPCION, IMOVH.CANTPEDIDA, IMOVH.CANTIDAD,  IMOVH.NOLOTE,  IMOVH.ITEM , IART.IDSERVICIO  FROM  IMOVH 
				INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO
			WHERE  CNSMOV = @CNSMOV
			ORDER BY   IMOVH.ITEM ASC

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END

	IF @METODO = 'CONFIRMA_ENTREGA'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA, @ISAL = ISAL
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDBODEGA			VARCHAR(50)			'$.IDBODEGA'
		,ISAL				NVARCHAR(MAX)		AS JSON
		)

		SELECT ROW_NUMBER() OVER(ORDER BY NOLOTE DESC) AS FILA_DATO,  * INTO #datoISAL_2 FROM OPENJSON (@ISAL)
		WITH(
			IDARTICULO			VARCHAR(20)		'$.IDARTICULO'
			,NOLOTE				VARCHAR(20)		'$.NOLOTE'
			,CANTIDAD			INT				'$.CANTIDAD'
			,FECHAVENCE			DATE			'$.FECHAVENCE'
			,HERMANO_MAYOR		VARCHAR(20)		'$.HERMANO_MAYOR'
			,DESCRIPCION		VARCHAR(20)		'$.DESCRIPCION'
			,IDSERVICIO			VARCHAR(500)	'$.IDSERVICIO'
			,IDALTERNA			VARCHAR(200)	'$.IDALTERNA'
			)


		SELECT  ROW_NUMBER() OVER(ORDER BY NOLOTE DESC) AS FILA_DATO, IDARTICULO, NOLOTE,SUM(CANTIDAD)CANTIDAD,  FECHAVENCE, HERMANO_MAYOR, DESCRIPCION, IDSERVICIO, IDALTERNA 
		INTO #datoISAL
		FROM #datoISAL_2
		GROUP BY IDARTICULO, NOLOTE,  FECHAVENCE, HERMANO_MAYOR, DESCRIPCION, IDSERVICIO, IDALTERNA


		IF EXISTS (SELECT  * FROM IEXI , #datoISAL_2 WHERE IEXI.IDARTICULO = #datoISAL_2.IDARTICULO AND IEXI.NOLOTE = #datoISAL_2.NOLOTE AND IEXI.IDBODEGA =@IDBODEGA AND IEXI.EXISLOTE < #datoISAL_2.CANTIDAD )
		BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'No tiene existencia suficiente'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
			SELECT  #datoISAL_2.IDARTICULO, #datoISAL_2.NOLOTE, #datoISAL_2.CANTIDAD,IEXI.EXISLOTE, #datoISAL_2.FECHAVENCE, #datoISAL_2.HERMANO_MAYOR, #datoISAL_2.DESCRIPCION, #datoISAL_2.IDSERVICIO, #datoISAL_2.IDALTERNA  FROM IEXI , #datoISAL_2 WHERE IEXI.IDARTICULO = #datoISAL_2.IDARTICULO AND IEXI.NOLOTE = #datoISAL_2.NOLOTE AND IEXI.IDBODEGA =@IDBODEGA AND IEXI.EXISLOTE < #datoISAL_2.CANTIDAD
            RETURN
		END
		
		BEGIN TRY 
			
			SELECT @ITEM_AUTD=1,@LIMITE_AU=0
			SELECT @LIMITE_AU=COUNT(*) FROM  #datoISAL
			WHILE @ITEM_AUTD<=@LIMITE_AU
			BEGIN
				
				IF EXISTS (SELECT * FROM ISAL,#datoISAL  WHERE ISAL.CNSMOV = @CNSMOV AND ISAL.NOLOTE =  #datoISAL.NOLOTE AND #datoISAL.FILA_DATO = @ITEM_AUTD AND ISAL.IDARTICULO =  #datoISAL.IDARTICULO )
				BEGIN
					PRINT 'CTUALIZA'
					
					UPDATE ISAL SET ISAL.CANTIDAD =  #datoISAL.CANTIDAD FROM ISAL, #datoISAL WHERE ISAL.CNSMOV = @CNSMOV AND ISAL.NOLOTE =  #datoISAL.NOLOTE AND #datoISAL.FILA_DATO = @ITEM_AUTD  AND  #datoISAL.IDARTICULO = ISAL.IDARTICULO
				END
				IF NOT EXISTS (SELECT * FROM ISAL,#datoISAL  WHERE ISAL.CNSMOV = @CNSMOV AND ISAL.NOLOTE =  #datoISAL.NOLOTE AND #datoISAL.FILA_DATO = @ITEM_AUTD AND ISAL.IDARTICULO =  #datoISAL.IDARTICULO )
				BEGIN
					PRINT 'INSERTA'
					INSERT INTO ISAL (CNSMOV,NOLOTE,IDARTICULO,CANTIDAD,FECHA,NOLOTEPEDIDO,FECHAVENCE,PCOSTO,IDARTICULO_IMOVH)
					SELECT @CNSMOV, #datoISAL.NOLOTE, #datoISAL.IDARTICULO, #datoISAL.CANTIDAD , DBO.FNK_GETDATE(), IEXI.NOLOTEPEDIDO, #datoISAL.FECHAVENCE, 0, #datoISAL.HERMANO_MAYOR
					FROM #datoISAL , IEXI
					WHERE #datoISAL.FILA_DATO = @ITEM_AUTD AND IEXI.NOLOTE = #datoISAL.NOLOTE AND IEXI.IDBODEGA = @IDBODEGA AND IEXI.IDARTICULO = #datoISAL.IDARTICULO

					--SELECT @CNSMOV, #datoISAL.NOLOTE, #datoISAL.IDARTICULO, #datoISAL.CANTIDAD , DBO.FNK_GETDATE(), IEXI.NOLOTEPEDIDO, #datoISAL.FECHAVENCE, 0, #datoISAL.HERMANO_MAYOR
					--FROM #datoISAL , IEXI
					--WHERE #datoISAL.FILA_DATO = @ITEM_AUTD AND IEXI.NOLOTE = #datoISAL.NOLOTE AND IEXI.IDBODEGA = @IDBODEGA AND IEXI.IDARTICULO = #datoISAL.IDARTICULO

				END
				
				SELECT @ITEM_AUTD = @ITEM_AUTD+1 
			END
		--SELECT TOP 100   * FROM ISAL WHERE CNSMOV = @CNSMOV

		DELETE ISAL FROM ISAL WHERE ISAL.CNSMOV = @CNSMOV AND NOT EXISTS(SELECT * FROM #datoISAL WHERE #datoISAL.NOLOTE = ISAL.NOLOTE AND  #datoISAL.IDARTICULO = ISAL.IDARTICULO)

		UPDATE IMOVH SET CANTIDAD = 0 WHERE IMOVH.CNSMOV = @CNSMOV AND NOT EXISTS(SELECT * FROM #datoISAL WHERE #datoISAL.IDARTICULO = IMOVH.IDARTICULO)

		EXEC SPK_ACTUALIZA_IMOVH_DISAL @CNSMOV

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'CANCELAR_ENTREGA'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDBODEGA			VARCHAR(50)			'$.IDBODEGA'
		)

		BEGIN TRY 
			DELETE FROM ISAL WHERE ISAL.CNSMOV = @CNSMOV
			UPDATE IMOVH SET CANTIDAD=0 WHERE CNSMOV= @CNSMOV
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'CONFIRMA_SALIDA'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDBODEGA			VARCHAR(50)			'$.IDBODEGA'
		)
		SELECT @PROCEDENCIA = PROCEDENCIA, @IDTIPOMOV = IDTIPOMOV FROM IMOV WHERE  CNSMOV = @CNSMOV
		IF (SELECT COUNT(*) FROM ISAL WHERE  ISAL.CNSMOV = @CNSMOV) = 0
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'No se puede Confirmar el Movimiento. No se realizó entrega de al menos un(1) artículo.'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		IF UPPER((SELECT DBO.FNK_VALORVARIABLE('ESFARMACIA'))) = 'SI'
		BEGIN
			IF (SELECT COUNT(*) FROM IMOVH A INNER JOIN IART B ON A.IDARTICULO=B.IDARTICULO WHERE A.CNSMOV = @CNSMOV AND ISNULL(A.PCOSTO,0)<=0 ) > 0
			BEGIN
				INSERT INTO @TBLERRORES(ERROR) SELECT 'No se puede confirmar el movimiento. Existe artículos con Costo Cero(0)'
				SELECT 'KO' OK
				SELECT ERROR FROM @TBLERRORES
				RETURN
			END
		END
		IF @PROCEDENCIA = 'INV' 
		AND EXISTS (	SELECT (IEXI.EXISLOTE-ISAL.CANTIDAD)DIF   
										FROM IEXI INNER JOIN ( SELECT IDARTICULO,NOLOTE,SUM(CANTIDAD)CANTIDAD 
															FROM ISAL                                      
															WHERE CNSMOV=@CNSMOV
															GROUP BY IDARTICULO,NOLOTE ) ISAL ON IEXI.IDARTICULO=ISAL.IDARTICULO 
																								AND IEXI.NOLOTE=ISAL.NOLOTE        
										WHERE IEXI.IDBODEGA=@IDBODEGA AND (IEXI.EXISLOTE-ISAL.CANTIDAD)<0) 
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Hay artículos en el movimiento que ya fueron entregados en otro movimiento y ya no tiene existencias suficientes para ésta salida'
			SELECT 'KO' OK, 'ERROR_EXIS' ERROR_EXIS
			SELECT ERROR FROM @TBLERRORES
			SELECT (IEXI.EXISLOTE-ISAL.CANTIDAD)DIF   , IEXI.IDARTICULO, IART.DESCRIPCION, IEXI.EXISLOTE
			FROM IEXI 
			INNER JOIN ( SELECT IDARTICULO,NOLOTE,SUM(CANTIDAD)CANTIDAD 
								FROM ISAL                                      
								WHERE CNSMOV=@CNSMOV
								GROUP BY IDARTICULO,NOLOTE ) ISAL ON IEXI.IDARTICULO=ISAL.IDARTICULO 
																	AND IEXI.NOLOTE=ISAL.NOLOTE     
			INNER JOIN IART ON IEXI.IDARTICULO = IART.IDARTICULO
			WHERE IEXI.IDBODEGA=@IDBODEGA AND (IEXI.EXISLOTE-ISAL.CANTIDAD)<0
			RETURN
		END
		
			BEGIN TRY 
				IF EXISTS (SELECT * FROM IMOV WHERE CNSMOV = @CNSMOV AND COALESCE(IMOV.IDITAR,'') = '' ) 
				BEGIN
					SELECT @IDITAR = (SELECT TOP 1 IART.IDITAR FROM IMOVH INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO WHERE COALESCE(IART.IDITAR,'') <> '' )
					UPDATE IMOV SET IDITAR = @IDITAR WHERE CNSMOV = @CNSMOV
				END
				IF @PROCEDENCIA = 'INV'
				BEGIN
					UPDATE IEXI SET EXISLOTE=EXISLOTE-ISAL.CANTIDAD   
					FROM IEXI INNER JOIN (	SELECT IDARTICULO,NOLOTE,SUM(CANTIDAD)CANTIDAD 
											FROM ISAL                                      
											WHERE CNSMOV=@CNSMOV
											GROUP BY IDARTICULO,NOLOTE ) ISAL ON IEXI.IDARTICULO=ISAL.IDARTICULO 
																				AND IEXI.NOLOTE=ISAL.NOLOTE        
					WHERE IEXI.IDBODEGA=@IDBODEGA
				END

				PRINT '****@IDBODEGA = '+COALESCE(@IDBODEGA, '')
				PRINT 'EXEC SPK_CONFIRMARSALIDAS '''+@IDBODEGA+''', '''+@CNSMOV+''', '''+@USUARIO+''', '''+@COMPANIA+''', '''+@SEDE+''''

				EXEC SPK_CONFIRMARSALIDAS @IDBODEGA, @CNSMOV, @USUARIO, @COMPANIA, @SEDE

				SELECT @ESTADO = ESTADO FROM IMOV WHERE  CNSMOV = @CNSMOV

				IF @ESTADO <> 1
				BEGIN
					UPDATE IEXI SET EXISLOTE=EXISLOTE+ISAL.CANTIDAD   
					FROM IEXI INNER JOIN (	SELECT IDARTICULO,NOLOTE,SUM(CANTIDAD)CANTIDAD 
											FROM ISAL                                      
											WHERE CNSMOV=@CNSMOV
											GROUP BY IDARTICULO,NOLOTE ) ISAL ON IEXI.IDARTICULO=ISAL.IDARTICULO 
																				AND IEXI.NOLOTE=ISAL.NOLOTE        
					WHERE IEXI.IDBODEGA=@IDBODEGA
					INSERT INTO @TBLERRORES(ERROR) SELECT 'El Movimiento NO pude ser Confirmado Exitosamente.'
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
				--ROLLBACK
				IF EXISTS(SELECT * FROM IMOVH WHERE ESTADO = 0 AND CANTIDAD <> CANTPEDIDA AND CNSMOV = @CNSMOV ) 
					AND @IDTIPOMOV = (SELECT DBO.FNK_VALORVARIABLE('IDINVTFSA'))
					SELECT 'OK' AS OK, 1 SAL_PENDIENTE, 1 TRANS , (SELECT COUNT(*) FROM ITRA WHERE CNSMOVORI = @CNSMOV) TRANSITO
				IF EXISTS(SELECT * FROM IMOVH WHERE ESTADO = 0 AND CANTIDAD <> CANTPEDIDA AND CNSMOV = @CNSMOV )  
					AND @IDTIPOMOV <> (SELECT DBO.FNK_VALORVARIABLE('IDINVTFSA'))
					SELECT 'OK' AS OK,  1 SAL_PENDIENTE, 0 TRANS , (SELECT COUNT(*) FROM ITRA WHERE CNSMOVORI = @CNSMOV) TRANSITO
				IF NOT EXISTS(SELECT * FROM IMOVH WHERE ESTADO = 0 AND CANTIDAD <> CANTPEDIDA AND CNSMOV = @CNSMOV )  
					AND @IDTIPOMOV = (SELECT DBO.FNK_VALORVARIABLE('IDINVTFSA'))
					SELECT 'OK' AS OK, 0 SAL_PENDIENTE, 1 TRANS , (SELECT COUNT(*) FROM ITRA WHERE CNSMOVORI = @CNSMOV) TRANSITO
				IF NOT EXISTS(SELECT * FROM IMOVH WHERE ESTADO = 0 AND CANTIDAD <> CANTPEDIDA AND CNSMOV = @CNSMOV )  
					AND @IDTIPOMOV <> (SELECT DBO.FNK_VALORVARIABLE('IDINVTFSA'))
					SELECT 'OK' AS OK,  0 SAL_PENDIENTE,  0 TRANS , (SELECT COUNT(*) FROM ITRA WHERE CNSMOVORI = @CNSMOV) TRANSITO
			END TRY
			BEGIN CATCH
				INSERT INTO @TBLERRORES(ERROR)
				SELECT ERROR_MESSAGE()
			END CATCH
		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'ANULAR_SALIDA'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDBODEGA			VARCHAR(50)			'$.IDBODEGA'
		)
		SELECT @PROCEDENCIA = PROCEDENCIA, @IDTIPOMOV = IDTIPOMOV, @NODOCUMENTO= NODOCUMENTO FROM IMOV WHERE  CNSMOV = @CNSMOV
		
		BEGIN TRY 
			IF UPPER((SELECT DBO.FNK_VALORVARIABLE('ESFARMACIA'))) = 'SI'
			BEGIN
				EXEC SPK_ANULAR_MOV_INV  @CNSMOV, @USUARIO, 'SAL', @COMPANIA, @SEDE
				IF (SELECT ESTADO FROM IMOV WHERE CNSMOV = @CNSMOV) = 2
				BEGIN
					SELECT 'OK' AS OK, 1 AVISO
					RETURN
				END
				ELSE
				BEGIN
					INSERT INTO @TBLERRORES(ERROR) SELECT 'El Movimiento NO se pudo Anular'
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
			END	
			ELSE
			BEGIN
				IF @PROCEDENCIA = 'INV'
				BEGIN
					UPDATE IMOV SET ESTADO = 2 WHERE CNSMOV = @CNSMOV
					UPDATE IMOVH SET ESTADO = 2 WHERE CNSMOV = @CNSMOV
					SELECT 'OK' AS OK, 2 AVISO
					RETURN
				END
				ELSE
				BEGIN
					IF @PROCEDENCIA IN ('HTX','SALUD')
					BEGIN
						IF (SELECT COALESCE(CERRADA,0) FROM HADM WHERE  NOADMISION = @NODOCUMENTO) <> 1
						BEGIN
							INSERT INTO @TBLERRORES(ERROR) SELECT 'El N° de Admision No se encuentra cerrada totalmente. ¡Se deben hacer las correcciones de solicitudes!'
							SELECT 'KO' OK
							SELECT ERROR FROM @TBLERRORES
							RETURN
						END
						ELSE
						BEGIN
							UPDATE IMOV SET ESTADO = 2 WHERE CNSMOV = @CNSMOV
							UPDATE IMOVH SET ESTADO = 2 WHERE CNSMOV = @CNSMOV
							SELECT 'OK' AS OK, 2 AVISO
							RETURN
						END
					END
				END
				IF @PROCEDENCIA IN ('CM_SOL','Consumo')
				BEGIN
					IF (SELECT COUNT(*) FROM IMOVH WHERE CNSMOV = @CNSMOV )>0
					BEGIN
						INSERT INTO @TBLERRORES(ERROR) SELECT 'Movimiento no puede ser Anulado, Debe Deshacer la Entrega de la Solicitud.'
						SELECT 'KO' OK
						SELECT ERROR FROM @TBLERRORES
						RETURN
					END
					IF (SELECT ESTADO FROM IZSOL WHERE CNSIZSOL = @NODOCUMENTO )<> 2
					BEGIN
						INSERT INTO @TBLERRORES(ERROR) SELECT 'Movimiento no puede ser anulado porque la solicitud no se encuentra cerrada.'
						SELECT 'KO' OK
						SELECT ERROR FROM @TBLERRORES
						RETURN
					END
					UPDATE IMOV SET ESTADO = 2 WHERE CNSMOV = @CNSMOV
					UPDATE IMOVH SET ESTADO = 2 WHERE CNSMOV = @CNSMOV
					SELECT 'OK' AS OK, 2 AVISO
					RETURN
				END
				ELSE
				BEGIN
					INSERT INTO @TBLERRORES(ERROR) SELECT 'Movimiento no puede ser anulado. Reportarlo'
					SELECT 'KO' OK
					SELECT ERROR FROM @TBLERRORES
					RETURN
				END
			END
			
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH
		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'IMOV_ACTIVAR'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDARTICULO = IDARTICULO
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDARTICULO			VARCHAR(50)			'$.IDARTICULO'
		)
		IF EXISTS (SELECT * FROM IMOV WHERE  CNSMOV = @CNSMOV AND ESTADO = '1' )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro ya esta Confirmado, no se puede realizar cambios'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		IF EXISTS (SELECT * FROM IMOV WHERE  CNSMOV = @CNSMOV AND ESTADO = '2' )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro ya esta Anulado, no se puede realizar cambios'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		BEGIN TRY 
			IF (SELECT  COALESCE(ESTADO,0) FROM IMOVH WHERE CNSMOV = @CNSMOV AND IDARTICULO = @IDARTICULO) = 0
			BEGIN
				PRINT 'ESTA ACTIVO'
				UPDATE IMOVH SET ESTADO=2 WHERE CNSMOV= @CNSMOV  AND IDARTICULO = @IDARTICULO
				SELECT 'OK' AS OK
				RETURN
			END
			IF (SELECT  COALESCE(ESTADO,0) FROM IMOVH WHERE CNSMOV = @CNSMOV AND IDARTICULO = @IDARTICULO) = 2
			BEGIN
				PRINT 'ESTA INACTIVO'
				UPDATE IMOVH SET ESTADO=0 WHERE CNSMOV= @CNSMOV  AND IDARTICULO = @IDARTICULO
			END

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'IMOV_DESCARTAR'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDARTICULO = IDARTICULO
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDARTICULO			VARCHAR(50)			'$.IDARTICULO'
		)
		IF EXISTS (SELECT * FROM IMOV WHERE  CNSMOV = @CNSMOV AND ESTADO = '1' )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro ya esta Confirmado, no se puede realizar cambios'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		IF EXISTS (SELECT * FROM IMOV WHERE  CNSMOV = @CNSMOV AND ESTADO = '2' )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro ya esta Anulado, no se puede realizar cambios'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		BEGIN TRY 
			DELETE FROM ISAL WHERE ISAL.CNSMOV = @CNSMOV AND IDARTICULO = @IDARTICULO
			DELETE FROM IMOVH WHERE CNSMOV= @CNSMOV AND IDARTICULO = @IDARTICULO
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'IMPRIME_MOVIMIENTO'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @IDBODEGA = IDBODEGA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,IDBODEGA			VARCHAR(50)			'$.IDBODEGA'
		)
		
		BEGIN TRY
			SELECT  'OK' OK, IMOV.IDBODEGA, IBOD.DESCRIPCION, IMOV.IDTIPOMOV, ITMO.DESCRIPCION [TIPOMOV_DESC]
				, IMOV.NODOCUMENTO, IMOV.IDITAR, ITAR.DESCRIPCION [ITAR_DESC]
				, ITMO.TIPO, IMOV.IDBODEGAEXTERNA, IBOD_EXT.DESCRIPCION [IBOD_EXT], IMOV.CNSMOV
				, IMOV.CCOSTO, CEN.DESCRIPCION [CEN_DESC], IMOV.IDAREA, AFU.DESCRIPCION [AFU_DESC], IMOV.FECHAMOV,IMOV.IDSOLICITA,USUSU_SOLI.NOMBRE [USUSU_SOLI_NOM]
				, IMOV.IDRECIBE,USUSU_RECI.NOMBRE [USUSU_RECI_NOM], IMOV.IDTERCERO, TER.RAZONSOCIAL
				, COALESCE(AFI.IDAFILIADO, IMOV.IDTERCERO) ID_CLIENTE, COALESCE(AFI.NOMBREAFI, TER.RAZONSOCIAL) DESC_CLIENTE
				, IMOV.ESTADO, CASE COALESCE( IMOV.ESTADO,0) WHEN 1 THEN 'Confirmado' WHEN 2 THEN 'Anulado' WHEN 0 THEN 'Sin Confirmar' END [ESTADO_DESC]
				, IMOV.ESTRANSITO, IMOV.TIPOENT
				, IMOV.NROCOMPROBANTE,IMOV.IDFUNCIONARIO,IMOV.CONTABILIZADA,IMOV.PROCEDENCIA, IMOV.USUARIO, IMOV.USUARIOCONF,IMOV.SECONTABILIZA
				, IMOV.CNSFCOM
				, IZSOL.CNSIZSOL, IMOV.FECHACONF
				, IMOV.NOPRESTACION
				, IMOV.SYS_ComputerName, IMOV.N_FACTURA, IMOV.IDKPAGE, IMOV.CNSTRAN
				, IMOV.OBSERVACION, IMOV.F_VENCE, COALESCE(IMOV.VLRCOMPRA,0) VLRCOMPRA, IMOV.F_FACTURA, IMOV.VLR_FLETE
				, IMOV.TIPO_DOC_COMPRA , CASE IMOV.TIPO_DOC_COMPRA WHEN 'F' THEN 'Factura'  WHEN 'R' THEN 'Remision' ELSE 'No Aplica' END [TIPO_DOC_COMPRA_DESC]
				, (SELECT COUNT(*) FROM IMOVH  WHERE IMOVH.CNSMOV = IMOV.CNSMOV) EXISTE_IMOVH
				, IMOV.FIRMA_CLIENTE
			FROM  IMOV 
				LEFT JOIN IBOD ON IMOV.IDBODEGA = IBOD.IDBODEGA
				LEFT JOIN IBOD IBOD_EXT ON IMOV.IDBODEGAEXTERNA = IBOD_EXT.IDBODEGA
				LEFT JOIN IZSOL ON IMOV.NODOCUMENTO = IZSOL.CNSIZSOL
				LEFT JOIN ITMO ON IMOV.IDTIPOMOV = ITMO.IDTIPOMOV
				LEFT JOIN ITAR ON IMOV.IDITAR = ITAR.IDITAR
				LEFT JOIN CEN ON IMOV.CCOSTO = CEN.CCOSTO
				LEFT JOIN TER ON IMOV.IDTERCERO = TER.IDTERCERO
				LEFT JOIN USUSU USUSU_SOLI ON IMOV.IDSOLICITA = USUSU_SOLI.USUARIO
				LEFT JOIN USUSU USUSU_RECI ON IMOV.IDRECIBE = USUSU_RECI.USUARIO
				LEFT JOIN AFU ON IMOV.IDAREA = AFU.IDAREA
				LEFT JOIN HADM ON IZSOL.NOADMISION = HADM.NOADMISION
				LEFT JOIN AFI ON HADM.IDAFILIADO = AFI.IDAFILIADO
			WHERE IMOV.CNSMOV = @CNSMOV

			SELECT SUBSTRING(IMOVH.IDARTICULO, 1, 20) IDARTICULO, IART.DESCRIPCION, IMOVH.ESTADO , IART.IDUNIDAD, IMOVH.CANTPEDIDA , IMOVH.CANTIDAD, IMOVH.PCOSTO, (IMOVH.CANTIDAD*IMOVH.PCOSTO)[TPCOSTO], IMOVH.CANTIDAD PVENTA FROM IMOVH
				INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO
			WHERE IMOVH.CNSMOV = @CNSMOV

			SELECT  SUM(IMOVH.CANTPEDIDA) TOTAL_CANTPEDIDA ,SUM( IMOVH.CANTIDAD) TOTAL_CANTIDAD
				, SUM ( (IMOVH.CANTIDAD * ROUND( IMOVH.PCOSTO / (1+((CASE COALESCE(IMOVH.IDIMPUESTO,'') WHEN '' THEN 0 ELSE IMOVH.PIVA END)/100.00)) ,2)) + COALESCE(IMOVH.VLRIVA,0))[TOTAL_TPCOSTO]
				, SUM(IMOVH.CANTIDAD) TOTAL_PVENTA 
				, SUM(IMOVH.VLRIVA) VLRIVA
			FROM IMOVH
				INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO
			WHERE IMOVH.CNSMOV = @CNSMOV

			SELECT   SUBSTRING(IEXI.IDARTICULO, 1, 20) IDARTICULO, IART.DESCRIPCION, IEXI.NOLOTE, IEXI.NOLOTEPEDIDO, ISAL.CANTIDAD , IEXI.FECHAVENCE FROM  IEXI
				INNER JOIN ISAL ON IEXI.NOLOTE = ISAL.NOLOTE AND IEXI.NOLOTEPEDIDO = ISAL.NOLOTEPEDIDO
				INNER JOIN IART ON IEXI.IDARTICULO = IART.IDARTICULO
			WHERE ISAL.CNSMOV = @CNSMOV
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'CONSULTA_DATO'
	BEGIN
		SELECT @CNSMOV = CNSMOV
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		)
		
		BEGIN TRY 
			SELECT 'OK' OK,   IMOV.IDBODEGA,IMOV.CNSFCOM,  IMOV.ESTADO, CASE COALESCE( IMOV.ESTADO,0) WHEN 1 THEN 'Confirmado' WHEN 2 THEN 'Anulado' WHEN 0 THEN 'Sin Confirmar' END [ESTADO_DESC]          
				, IMOV.IDITAR, ITAR.DESCRIPCION [ITAR_DESC], IMOV.CNSMOV, IMOV.NODOCUMENTO, IZSOL.CNSIZSOL, IMOV.FECHAMOV, IMOV.FECHAMOV FECHAMOV_2, IMOV.FECHACONF , IMOV.IDTIPOMOV, ITMO.DESCRIPCION [TIPOMOV_DESC]
				, ITMO.TIPO, IMOV.CCOSTO, IMOV.ESTRANSITO , CEN.DESCRIPCION [CEN_DESC], IMOV.IDTERCERO, TER.RAZONSOCIAL,IMOV.IDSOLICITA,USUSU_SOLI.NOMBRE [USUSU_SOLI_NOM], IMOV.IDRECIBE,USUSU_RECI.NOMBRE [USUSU_RECI_NOM]          
				, IMOV.NOPRESTACION, IMOV.IDBODEGAEXTERNA, IMOV.PROCEDENCIA , IMOV.SYS_ComputerName, IMOV.N_FACTURA, IMOV.TIPOENT, IMOV.IDKPAGE, IMOV.CNSTRAN , IMOV.OBSERVACION, IMOV.IDAREA, AFU.DESCRIPCION [AFU_DESC]
				, IMOV.F_VENCE, COALESCE(IMOV.VLRCOMPRA,0) VLRCOMPRA, IMOV.F_FACTURA, IMOV.VLR_FLETE , IMOV.TIPO_DOC_COMPRA 
				, CASE IMOV.TIPO_DOC_COMPRA WHEN 'F' THEN 'Factura'  WHEN 'R' THEN 'Remision' ELSE 'No Aplica' END [TIPO_DOC_COMPRA_DESC]           
				, (SELECT COUNT(*) FROM IMOVH  WHERE IMOVH.CNSMOV = IMOV.CNSMOV) EXISTE_IMOVH         
			FROM [dbo].[IMOV]
				LEFT JOIN IZSOL ON IMOV.NODOCUMENTO = IZSOL.CNSIZSOL       
				LEFT JOIN ITMO ON IMOV.IDTIPOMOV = ITMO.IDTIPOMOV       
				LEFT JOIN ITAR ON IMOV.IDITAR = ITAR.IDITAR    
				LEFT JOIN CEN ON IMOV.CCOSTO = CEN.CCOSTO    
				LEFT JOIN TER ON IMOV.IDTERCERO = TER.IDTERCERO   
				LEFT JOIN USUSU USUSU_SOLI ON IMOV.IDSOLICITA = USUSU_SOLI.USUARIO    
				LEFT JOIN USUSU USUSU_RECI ON IMOV.IDRECIBE = USUSU_RECI.USUARIO    
				LEFT JOIN AFU ON IMOV.IDAREA = AFU.IDAREA     
			WHERE IMOV.CNSMOV = @CNSMOV
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'TRASLADAR'
	BEGIN
		SELECT @CNSIZSOL = CNSIZSOL, @IDBODEGA = IDBODEGA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSIZSOL				VARCHAR(20)			'$.CNSIZSOL'
		,IDBODEGA				VARCHAR(20)			'$.IDBODEGA'
		)

		IF EXISTS (SELECT * FROM IMOV WHERE  NODOCUMENTO = @CNSIZSOL AND COALESCE(IMOV.ESTADO,0) IN (0,1) )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'Existen movimientos en proceso, revisar.'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		BEGIN TRY 
			UPDATE IZSOL SET IDBODEGAATIENDE = @IDBODEGA WHERE IZSOL.CNSIZSOL = @CNSIZSOL
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'ACTUALIZAR_ARTICULOS'
	BEGIN
		
		BEGIN TRY 
			EXEC SPK_REVISA_EXISTS_INV
			--SELECT  ROW_NUMBER() OVER(ORDER BY IART.IDARTICULO DESC) AS FILA_CITA ,IDARTICULO 
			--INTO #IART FROM  IART
			--	LEFT JOIN ITAR ON IART.IDITAR = ITAR.IDITAR 
			--WHERE   EXISTS ( SELECT  * FROM  IBODS WHERE  TIPO = 'ITAR' AND ITAR.IDITAR = IBODS.VALOR)  AND  IART.ESTADO  = 'Activo'
			--	AND  EXISTS (SELECT  * FROM IEXI WHERE IART.IDARTICULO = IEXI.IDARTICULO  )  
	
			--SELECT @ITEM_AUTD=1,@LIMITE_AU=0
			--SELECT @LIMITE_AU=COUNT(*) FROM  #IART
			--WHILE @ITEM_AUTD<=@LIMITE_AU
			--BEGIN
			--	SELECT @IDSEDE = '01'
			--	SELECT @IDARTICULO = IDARTICULO FROM #IART WHERE #IART.FILA_CITA = @ITEM_AUTD 
			--	EXEC SPK_REVISA_EXISTS_INV @IDARTICULO
			--	SELECT @ITEM_AUTD = @ITEM_AUTD+1 
			--END

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'ACTUALIZA_ENTREGA'
	BEGIN
		SELECT @CNSMOV = CNSMOV
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		)
		BEGIN TRY 
			SELECT @ESTADO = COALESCE(ESTADO,0), @NODOCUMENTO = NODOCUMENTO FROM IMOV WHERE CNSMOV = @CNSMOV

			IF @ESTADO = 0
			BEGIN
				EXEC SPK_ASIGNA_COPAGOS_CM @CNSMOV
			END
			ELSE
			BEGIN
				IF (SELECT COUNT (*) FROM IMOVH WHERE CNSMOV = @CNSMOV AND COALESCE(IMOVH.NOPRESTACION,'') = '' ) >0
				BEGIN
					IF EXISTS (SELECT  * FROM IZSOL WHERE  CNSIZSOL = @NODOCUMENTO AND CLASE NOT IN('PROD','Consumo'))	
					BEGIN
						IF EXISTS (SELECT  * FROM IZSOL WHERE  CNSIZSOL = @NODOCUMENTO AND CLASE  IN('SENFER','APOYODX'))
						BEGIN
							SELECT @NOADMISION = NOADMISION, @SECTOR = COALESCE(SECTOR, NULL)  FROM IZSOL WHERE CNSIZSOL = @NODOCUMENTO
							EXEC SPK_GENCOBRO_INSCENTRAL @CNSMOV, @NOADMISION, @SECTOR, @USUARIO , @IDSEDE
						END
						ELSE
						BEGIN
							IF  DBO.FNK_VALORVARIABLE('MODOCOBROMEDHBALI') <> 'HBALI'
							BEGIN
								EXEC SPK_GENCOBRO_INSCENTRAL @CNSMOV, @NOADMISION, @SECTOR, @USUARIO , @IDSEDE
							END
							ELSE
							BEGIN
								EXEC SPK_GENENTREGA_ENF @CNSMOV, @NOADMISION, @IDSEDE
							END
						END
					END

				END
			END
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'BOL_AFECTA_INAFECTA_YA_NO'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @PROCEDENCIA = PROCEDENCIA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,PROCEDENCIA		VARCHAR(20)			'$.PROCEDENCIA'
		)

		BEGIN TRY 
			
			--IF NOT EXISTS(SELECT  * FROM FCJ WHERE  NOADMISION = @CONSECUTIVO AND PROCEDENCIA='CITAS' ) 
			--	AND EXISTS (SELECT  * FROM TFCJ WHERE  NOADMISION = @CONSECUTIVO AND PROCEDENCIA='CITAS')
			--	AND  DBO.FNK_VALORVARIABLE('IXCOUNTRY')='PERU' 
			--BEGIN
			--	SELECT @PROCEDENCIA = TFCJ.PROCEDENCIA, @IDPLAN = TFCJ.IDPLAN ,@NOADMISION = NOADMISION, @CNSFACJ = CNSFACJ 
			--	FROM TFCJ WHERE  NOADMISION = @CONSECUTIVO

			--	SELECT @CNSACJ =  CAJ.CNSACJ, @CODCAJERO = USUSU.CODCAJERO, @CODCAJA = UBEQ.CAJA  FROM  USUSU
			--		INNER JOIN UBEQ ON USUSU.SYS_ComputerName = UBEQ.SYS_ComputerName
			--		INNER JOIN CAJ ON UBEQ.CAJA = CAJ.CODCAJA
			--	WHERE  USUARIO = @USUARIO
			--	EXEC SPK_TRAERECIB_CAJA @CNSFACJ,@CNSACJ, @SYS_COMPUTERNAME, '01',@IDSEDE,@USUARIO , 'COBRO'    
			--END
			
			--RETURN
			
			SELECT @CNSRPDX = NULL
			--EXEC SPK_GENCONSECUTIVO '01',@IDSEDE,'@RPDX',@CNSRPDX OUTPUT
			--SELECT @CNSRPDX = @IDSEDE + REPLACE(SPACE(8 - LEN(@CNSRPDX))+LTRIM(RTRIM(@CNSRPDX)),SPACE(1),0)
			EXEC SPQ_GENSEQUENCE @SEDE = @SEDE, @PREFIJO = '@MOV', @LONGITUD = 8, @NVOCONSEC = @NVOCONSEC OUTPUT

			IF @PROCEDENCIA = 'AFECTA'
			BEGIN
				INSERT INTO RPDX (CNS, IDTERCERO, ID1, NOMBRE, CANTIDAD, CANTIDAD1, CANTIDAD2, ID2, ID4,VALOR10,ID5,ID6, CNS1, CNS2, FECHA3)
				SELECT @CNSRPDX, AUT.IDTERCEROCA, AUT.IDPLAN, PRE.NOM_PREFIJO, ROW_NUMBER() OVER(ORDER  BY PRE.PREFIJO  DESC), 0, COUNT(*), 'C', AUT.IDSEDE
				, 1,DBO.FNK_VALORVARIABLE('IDTERCONTABLEPART'), PRE.PREFIJO, @CNSMOV, 'AFECTA', AUT.FECHA
				FROM AUT 
					INNER JOIN IMOV ON AUT.IDAUT = IMOV.NOCONSECUTIVO
					INNER JOIN AUTD ON AUT.IDAUT = AUTD.IDAUT
					INNER JOIN SER ON AUTD.IDSERVICIO = SER.IDSERVICIO 
					LEFT JOIN PRE ON AUT.PREFIJO = PRE.PREFIJO
				WHERE IMOV.CNSMOV = @CNSMOV
				AND SER.IVA = 'SER' AND COALESCE(AUTD.N_FACTURA,'') = ''
				GROUP BY PRE.NOM_PREFIJO, PRE.PREFIJO,AUT.IDTERCEROCA, AUT.IDPLAN, AUT.IDSEDE, AUT.FECHA
			END

			SELECT 'OK' OK, CNS, RPDX.IDTERCERO, TER.RAZONSOCIAL, ITEM, ID1, PLN.DESCPLAN, NOMBRE, CANTIDAD, CANTIDAD1, CANTIDAD2, ID2, ID4,VALOR10,ID5,ID6, CNS1, CNS2 
			FROM RPDX 
				INNER JOIN TER ON RPDX.IDTERCERO = TER.IDTERCERO
				INNER JOIN PLN ON RPDX.ID1 = PLN.IDPLAN
			WHERE CNS1 = @CNSMOV

		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'BOL_AFECTA_INAFECTA'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @PROCEDENCIA = PROCEDENCIA, @PROCESO = PROCESO, @IDAUT = IDAUT
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,PROCEDENCIA		VARCHAR(20)			'$.PROCEDENCIA'
		,PROCESO			VARCHAR(20)			'$.PROCESO'
		,IDAUT				VARCHAR(20)			'$.IDAUT'
		)
		 SELECT @CNSACJ =  CAJ.CNSACJ,  @CODCAJA = UBEQ.CAJA  FROM  USUSU
			INNER JOIN UBEQ ON USUSU.SYS_ComputerName = UBEQ.SYS_ComputerName
			INNER JOIN CAJ ON UBEQ.CAJA = CAJ.CODCAJA
		WHERE  USUARIO = @USUARIO
		IF @PROCEDENCIA = 'INAFECTA' AND @PROCESO = 'INVENTARIO'
		BEGIN
			SELECT TOP 1 @IDAUT = IMOVH.NOPRESTACION FROM IMOVH 
			INNER JOIN SER ON IMOVH.IDARTICULO = SER.IDSERVICIO
			WHERE  CNSMOV = @CNSMOV AND  IMOVH.CNSMOV = @CNSMOV AND COALESCE(IMOVH.ESPART,0 ) = 0 AND COALESCE(SER.IVA,'') <> 'SER' 
		END
		IF @PROCEDENCIA = 'AFECTA' AND @PROCESO = 'INVENTARIO'
		BEGIN
			SELECT TOP 1 @IDAUT = IMOVH.NOPRESTACION FROM IMOVH 
			INNER JOIN SER ON IMOVH.IDARTICULO = SER.IDSERVICIO
			WHERE  CNSMOV = @CNSMOV AND  IMOVH.CNSMOV = @CNSMOV AND COALESCE(IMOVH.ESPART,0 ) = 0 AND COALESCE(SER.IVA,'') = 'SER' 
		END
		IF @PROCEDENCIA = 'PARTICULAR' AND @PROCESO = 'INVENTARIO'
		BEGIN
			SELECT TOP 1 @IDAUT = IMOVH.NOPRESTACION FROM IMOVH 
			INNER JOIN SER ON IMOVH.IDARTICULO = SER.IDSERVICIO
			WHERE  CNSMOV = @CNSMOV AND  IMOVH.CNSMOV = @CNSMOV AND COALESCE(IMOVH.ESPART,0 ) = 1
		END

		SELECT @CODCAJA = CODCAJA, @OK = ABIERTA FROM ACJ  WHERE CNSACJ = @CNSACJ

		IF (SELECT COUNT(1) FROM  ACJ WHERE  CODCAJA = @CODCAJA AND ABIERTA = 1 ) >1
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'La caja se encuentra abierta mas de una vez.'
		END
		IF (SELECT COUNT(1) FROM  ACJ WHERE  CODCAJA = @CODCAJA AND ABIERTA = 1 ) = 0
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'La caja no se encuentra abierta.'
		END
		
		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		ELSE
		BEGIN
			BEGIN TRY--IMOVH
					IF @PROCEDENCIA = 'AFECTA' AND @PROCESO = 'APOYO'
					BEGIN
						SELECT @VALORTOTAL = SUM(AUTD.VALORCOPAGO * 1.18 )
						FROM AUTD
						INNER JOIN SER ON AUTD.IDSERVICIO =  SER.IDSERVICIO 
						WHERE AUTD.IDAUT = @IDAUT
					END
					IF @PROCEDENCIA = 'AFECTA' AND @PROCESO = 'INVENTARIO'
					BEGIN
						SELECT @VALORTOTAL = SUM(AUTD.VALORCOPAGO * 1.18 )
						FROM AUTD
						INNER JOIN SER ON AUTD.IDSERVICIO =  SER.IDSERVICIO 
						WHERE AUTD.IDAUT IN (SELECT IMOVH.NOPRESTACION FROM IMOVH WHERE IMOVH.CNSMOV = @CNSMOV AND COALESCE(IMOVH.ESPART,0 ) = 0) AND COALESCE(SER.IVA,'') = 'SER' 
					END
					IF @PROCEDENCIA = 'INAFECTA' AND @PROCESO = 'INVENTARIO'
					BEGIN
						SELECT @VALORTOTAL = SUM(AUTD.VALORCOPAGO )
						FROM AUTD
						INNER JOIN SER ON AUTD.IDSERVICIO =  SER.IDSERVICIO 
						WHERE AUTD.IDAUT IN (SELECT IMOVH.NOPRESTACION FROM IMOVH WHERE IMOVH.CNSMOV = @CNSMOV AND COALESCE(IMOVH.ESPART,0 ) = 0) AND COALESCE(SER.IVA,'') <> 'SER' 
					END
					IF @PROCEDENCIA = 'PARTICULAR' AND @PROCESO = 'INVENTARIO'
					BEGIN
						SELECT @VALORTOTAL =  SUM(CASE WHEN COALESCE(SER.IVA,'') = 'SER' THEN AUTD.VALOREXCEDENTE*1.18 ELSE AUTD.VALOREXCEDENTE END)
						FROM AUTD
						INNER JOIN SER ON AUTD.IDSERVICIO =  SER.IDSERVICIO 
						WHERE AUTD.IDAUT IN (SELECT IMOVH.NOPRESTACION FROM IMOVH WHERE IMOVH.CNSMOV = @CNSMOV AND COALESCE(IMOVH.ESPART,0 ) = 1)
					END

					IF @PROCEDENCIA = 'AFECTA' AND ISNULL(@OK,0) = 1 
						AND NOT EXISTS(SELECT  * FROM FCJ WHERE  NOADMISION = @IDAUT AND PROCEDENCIA='CE' ) 
						AND  DBO.FNK_VALORVARIABLE('IXCOUNTRY')='PERU' 
					BEGIN
						SET @NVOCONSEC=NULL
						EXEC SPK_GENCONSECUTIVO @COMPANIA,@CODCAJA,'@FCJ', @NVOCONSEC OUTPUT  
						SELECT @NVOCONSEC = REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0)
                  --EXEC SPQ_GENSEQUENCE @CODCAJA,'@FCJ',NULL,@NVOCONSEC OUTPUT 

						INSERT INTO FCJ (CNSFACJ, N_RECIBO, CODCAJA, CODTURNO_GEN, CODTURNO_TRA, CLASE_FAC, 
							NOADMISION, NOPRESTACION, IDPLAN, VALORTOTAL, COMPANIA, IDAFILIADO, 
							CERRADA, FECHA, PROCEDENCIA, N_FACTURA, IDTERCERO, NOMBRECLIENTE,  
							CNSACJ, TIPO, ESTADO, IMPRESO, MARCACONT, CONTABILIZADA, NROCOMPROBANTE,
							AREAPRESTACION, CCOSTO, SUBCCOSTO, CLASER, IDCAUSALANUL, USUARIOANUL, 
							SYS_COMPUTERNAMEANUL, FECHAANU, TCNSFACJ, IDENTIFICADOR, 
							SYS_COMPUTERNAME, OBSERVACION, USUARIO, TIPOEGRESO, ENPAGOS, RECAUDO,
							DEAPERTURA, ARCHIVADO, DEVUELTO,CODUNG ,CODPRG,TIPO_DOC)
						SELECT @NVOCONSEC, NULL, @CODCAJA, NULL, NULL, 'COBRO',@IDAUT, @IDAUT,AUT.IDPLAN, @VALORTOTAL, NULL, AUT.IDAFILIADO,
							0, DBO.FNK_GETDATE(), 'CE', NULL, AUT.IDTERCEROCA, NULL, @CNSACJ, 'INTERNO', 0, 0, 0, 0, NULL, AUT.IDAREA
							, AUT.CCOSTO, NULL, 'C', NULL, NULL,NULL,NULL, NULL, NULL,@SYS_COMPUTERNAME, NULL, @USUARIO, NULL, NULL,NULL
							, NULL, NULL, NULL, AUT.CODUNG, AUT.CODPRG, NULL
						FROM AUT WHERE AUT.IDAUT = @IDAUT

						INSERT INTO FCJD(CODCAJA, N_RECIBO, CNSFACJ, ITEM, CONCEPTO, AREAFUNCIONAL, VALORUNITARIO, CANTIDAD, VALORTOTAL, IDSERVICIO,
							TDESCUENTO, TIPODCTO, DCTO, VLRDESCUENTO)
						SELECT @CODCAJA, NULL, @NVOCONSEC, AUTD.NO_ITEM, NULL, NULL, AUTD.VALOR, AUTD.CANTIDAD, AUTD.VALORCOPAGO*1.18, AUTD.IDSERVICIO,
							0, NULL, 0, 0
						FROM  AUTD
						INNER JOIN SER ON AUTD.IDSERVICIO = SER.IDSERVICIO
						WHERE AUTD.IDAUT = @IDAUT AND SER.IVA = 'SER'  AND COALESCE(AUTD.NFACTURA,'') = '' --AND COALESCE(AUTD.VALORCOPAGO,0) >0

						UPDATE AUT SET NORECIBOCAJA = @NVOCONSEC, CODCAJA = @CODCAJA, TIPOCAJA = 'FCJ' WHERE IDAUT = @IDAUT 

						SELECT 'OK' OK, FCJ.VALORTOTAL, FCJ.CERRADA, FCJ.OBSERVACION, FCJ.CNSFACJ, FCJ.CODCAJA FROM FCJ WHERE FCJ.CNSFACJ = @NVOCONSEC AND FCJ.CODCAJA = @CODCAJA

					END
					

					IF @PROCEDENCIA = 'INAFECTA' AND ISNULL(@OK,0) = 1 
						AND NOT EXISTS(SELECT  * FROM FCJ WHERE  FCJ.NOADMISION = @IDAUT AND FCJ.PROCEDENCIA='CE' ) 
						--AND EXISTS (SELECT  * FROM TFCJ WHERE  NOADMISION = @IDAUT AND PROCEDENCIA='CE')
						AND  DBO.FNK_VALORVARIABLE('IXCOUNTRY')='PERU' 
					BEGIN
						SET @NVOCONSEC=NULL
						EXEC SPK_GENCONSECUTIVO @COMPANIA,@CODCAJA,'@FCJ', @NVOCONSEC OUTPUT  
						SELECT @NVOCONSEC = REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0)

						INSERT INTO FCJ (CNSFACJ, N_RECIBO, CODCAJA, CODTURNO_GEN, CODTURNO_TRA, CLASE_FAC, 
							NOADMISION, NOPRESTACION, IDPLAN, VALORTOTAL, COMPANIA, IDAFILIADO, 
							CERRADA, FECHA, PROCEDENCIA, N_FACTURA, IDTERCERO, NOMBRECLIENTE,  
							CNSACJ, TIPO, ESTADO, IMPRESO, MARCACONT, CONTABILIZADA, NROCOMPROBANTE,
							AREAPRESTACION, CCOSTO, SUBCCOSTO, CLASER, IDCAUSALANUL, USUARIOANUL, 
							SYS_COMPUTERNAMEANUL, FECHAANU, TCNSFACJ, IDENTIFICADOR, 
							SYS_COMPUTERNAME, OBSERVACION, USUARIO, TIPOEGRESO, ENPAGOS, RECAUDO,
							DEAPERTURA, ARCHIVADO, DEVUELTO,CODUNG ,CODPRG,TIPO_DOC)
						SELECT @NVOCONSEC, NULL, @CODCAJA, NULL, NULL, 'COBRO',@IDAUT, @IDAUT,AUT.IDPLAN, @VALORTOTAL, NULL, AUT.IDAFILIADO,
							0, DBO.FNK_GETDATE(), 'CE', NULL, AUT.IDTERCEROCA, NULL, @CNSACJ, 'INTERNO', 0, 0, 0, 0, NULL, AUT.IDAREA
							, AUT.CCOSTO, NULL, 'C', NULL, NULL,NULL,NULL, NULL, NULL,@SYS_COMPUTERNAME, NULL, @USUARIO, NULL, NULL,NULL
							, NULL, NULL, NULL, AUT.CODUNG, AUT.CODPRG, NULL
						FROM AUT WHERE AUT.IDAUT = @IDAUT


						INSERT INTO FCJD(CODCAJA, N_RECIBO, CNSFACJ, ITEM, CONCEPTO, AREAFUNCIONAL, VALORUNITARIO, CANTIDAD, VALORTOTAL, IDSERVICIO,
							TDESCUENTO, TIPODCTO, DCTO, VLRDESCUENTO)
						SELECT @CODCAJA, NULL, @NVOCONSEC, AUTD.NO_ITEM, NULL, NULL, AUTD.VALOR, AUTD.CANTIDAD, AUTD.VALORCOPAGO*1.18, AUTD.IDSERVICIO,
							0, NULL, 0, 0
						FROM  AUTD
						INNER JOIN SER ON AUTD.IDSERVICIO = SER.IDSERVICIO
						WHERE AUTD.IDAUT = @IDAUT AND SER.IVA <> 'SER' AND COALESCE(AUTD.NFACTURA,'') = '' --AND COALESCE(AUTD.VALORCOPAGO,0) >0 

						UPDATE AUT SET NORECIBOCAJA = @NVOCONSEC, CODCAJA = @CODCAJA, TIPOCAJA = 'FCJ' WHERE IDAUT = @IDAUT 
						--UPDATE FCJ SET VALORTOTAL = (SELECT SUM(FCJD.VALORTOTAL) FROM FCJD WHERE CNSFACJ = @NVOCONSEC AND CODCAJA = @CODCAJA) 
						--WHERE FCJ.CNSFACJ = @NVOCONSEC AND FCJ.CODCAJA = @CODCAJA

						SELECT 'OK' OK, FCJ.VALORTOTAL, FCJ.CERRADA, FCJ.OBSERVACION, FCJ.CNSFACJ, FCJ.CODCAJA FROM FCJ WHERE FCJ.CNSFACJ = @NVOCONSEC AND FCJ.CODCAJA = @CODCAJA

					END
					IF @PROCEDENCIA = 'PARTICULAR' AND ISNULL(@OK,0) = 1 
						AND NOT EXISTS(SELECT  * FROM FCJ WHERE  NOADMISION = @IDAUT AND PROCEDENCIA='CE' ) 
						AND  DBO.FNK_VALORVARIABLE('IXCOUNTRY')='PERU' 
					BEGIN
						SET @NVOCONSEC=NULL
						EXEC SPK_GENCONSECUTIVO @COMPANIA,@CODCAJA,'@FCJ', @NVOCONSEC OUTPUT  
						SELECT @NVOCONSEC = REPLACE(SPACE(8 - LEN(@NVOCONSEC))+LTRIM(RTRIM(@NVOCONSEC)),SPACE(1),0)

						INSERT INTO FCJ (CNSFACJ, N_RECIBO, CODCAJA, CODTURNO_GEN, CODTURNO_TRA, CLASE_FAC, 
							NOADMISION, NOPRESTACION, IDPLAN, VALORTOTAL, COMPANIA, IDAFILIADO, 
							CERRADA, FECHA, PROCEDENCIA, N_FACTURA, IDTERCERO, NOMBRECLIENTE,  
							CNSACJ, TIPO, ESTADO, IMPRESO, MARCACONT, CONTABILIZADA, NROCOMPROBANTE,
							AREAPRESTACION, CCOSTO, SUBCCOSTO, CLASER, IDCAUSALANUL, USUARIOANUL, 
							SYS_COMPUTERNAMEANUL, FECHAANU, TCNSFACJ, IDENTIFICADOR, 
							SYS_COMPUTERNAME, OBSERVACION, USUARIO, TIPOEGRESO, ENPAGOS, RECAUDO,
							DEAPERTURA, ARCHIVADO, DEVUELTO,CODUNG ,CODPRG,TIPO_DOC)
						SELECT @NVOCONSEC, NULL, @CODCAJA, NULL, NULL, 'COBRO',@IDAUT, @IDAUT,AUT.IDPLAN, @VALORTOTAL, NULL, AUT.IDAFILIADO,
							0, DBO.FNK_GETDATE(), 'CE', NULL, AUT.IDTERCEROCA, NULL, @CNSACJ, 'INTERNO', 0, 0, 0, 0, NULL, AUT.IDAREA
							, AUT.CCOSTO, NULL, 'C', NULL, NULL,NULL,NULL, NULL, NULL,@SYS_COMPUTERNAME, NULL, @USUARIO, NULL, NULL,NULL
							, NULL, NULL, NULL, AUT.CODUNG, AUT.CODPRG, NULL
						FROM AUT WHERE AUT.IDAUT = @IDAUT

						INSERT INTO FCJD(CODCAJA, N_RECIBO, CNSFACJ, ITEM, CONCEPTO, AREAFUNCIONAL, VALORUNITARIO, CANTIDAD, VALORTOTAL, IDSERVICIO,
							TDESCUENTO, TIPODCTO, DCTO, VLRDESCUENTO)
						SELECT @CODCAJA, NULL, @NVOCONSEC, AUTD.NO_ITEM, NULL, NULL, AUTD.VALOR, AUTD.CANTIDAD, AUTD.VALORCOPAGO*1.18, AUTD.IDSERVICIO,
							0, NULL, 0, 0
						FROM  AUTD
						INNER JOIN SER ON AUTD.IDSERVICIO = SER.IDSERVICIO
						WHERE AUTD.IDAUT = @IDAUT AND COALESCE(AUTD.VALOREXCEDENTE,0) >0 AND COALESCE(AUTD.NFACTURA,'') = ''

						UPDATE AUT SET NORECIBOCAJA = @NVOCONSEC, CODCAJA = @CODCAJA, TIPOCAJA = 'FCJ' WHERE IDAUT = @IDAUT 

						SELECT 'OK' OK, FCJ.VALORTOTAL, FCJ.CERRADA, FCJ.OBSERVACION, FCJ.CNSFACJ, FCJ.CODCAJA FROM FCJ WHERE FCJ.CNSFACJ = @NVOCONSEC AND FCJ.CODCAJA = @CODCAJA

					END

					IF @PROCEDENCIA IN( 'AFECTA', 'INAFECTA', 'PARTICULAR') AND ISNULL(@OK,0) = 1 
						AND  EXISTS(SELECT  * FROM FCJ WHERE  NOADMISION = @IDAUT AND PROCEDENCIA='CE' ) 
						AND  DBO.FNK_VALORVARIABLE('IXCOUNTRY')='PERU' 
					BEGIN
						SELECT @NVOCONSEC = AUT.NORECIBOCAJA, @CODCAJA = AUT.CODCAJA FROM AUT WHERE IDAUT = @IDAUT
						SELECT 'OK' OK, FCJ.VALORTOTAL, FCJ.CERRADA, FCJ.OBSERVACION, FCJ.CNSFACJ, FCJ.CODCAJA FROM FCJ WHERE FCJ.CNSFACJ = @NVOCONSEC AND CODCAJA = @CODCAJA
					END

			END TRY
			BEGIN CATCH 
				INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE() ;  
			END CATCH  
			IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
			BEGIN
				SELECT 'KO' OK
				SELECT ERROR FROM @TBLERRORES
				RETURN
			END
			SELECT 'OK'OK
		END 
	END
	IF @METODO = 'GEN_DOCUMENTO'
	BEGIN
		SELECT @CNSRPDX = CNSRPDX, @PROCEDENCIA = PROCEDENCIA, @PREFIJO = PREFIJO
		FROM OPENJSON (@PARAMETROS)
		WITH		 (	CNSRPDX				VARCHAR(20)			'$.CNSRPDX'
						,PROCEDENCIA		VARCHAR(20)			'$.PROCEDENCIA'
						,PREFIJO			VARCHAR(20)			'$.PREFIJO'	)
		
		SELECT @FECHA = FECHA3 FROM RPDX WHERE CNS = @CNSRPDX
		IF (SELECT COUNT(*) FROM PRI WHERE  CERRADO=0 AND ISNULL(CERRADO_FAC,0)=0 AND FECHA_INI <= CONVERT(DATE, @FECHA) AND FECHA_FIN>=  CONVERT(DATE, @FECHA)  )  = 0
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El periodo contable no existe o se encuentra cerrado, Revise.'
		END
		IF  EXISTS (SELECT * FROM RPDX WHERE CNS = @CNSRPDX AND COALESCE(IDTERCERO,'') = '')
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro no cuenta con Tercero'
		END
		RETURN

--QUERY3
--QUERY3
		IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
		BEGIN
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		ELSE
		BEGIN
			BEGIN TRY
				SELECT 'OK' AS OK

			END TRY  
			BEGIN CATCH 
				INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE() ;  
			END CATCH  
			IF (SELECT COUNT(*) FROM @TBLERRORES)> 0
			BEGIN
				SELECT 'KO' OK
				SELECT ERROR FROM @TBLERRORES
				RETURN
			END
			SELECT 'OK'OK
		END 
	END
	IF @METODO = 'RPT_ACTA_RECEPCION'
	BEGIN
		SELECT @CNSMOV = CNSMOV, @PROCEDENCIA = PROCEDENCIA
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		,PROCEDENCIA		VARCHAR(20)			'$.PROCEDENCIA'
		)
		SELECT 'OK' OK, CNSMOV, FECHAMOV, IMOV.IDTERCERO, TER.RAZONSOCIAL, IMOV.IDBODEGA, IBOD.DESCRIPCION, IMOV.NODOCUMENTO, IMOV.OBSERVACION 
			, FIRMA = (SELECT DICOM FROM ARCHIVOS A INNER JOIN USUSU U ON U.IDFIRMA=A.ID WHERE U.USUARIO=COALESCE(ITRA.USUARIODES,ITRA.USUARIOORI,''))
			,COALESCE(ITRA.USUARIODES,ITRA.USUARIOORI,'') USUARIO
		FROM IMOV 
			LEFT JOIN TER ON IMOV.IDTERCERO = TER.IDTERCERO
			LEFT JOIN IBOD ON IMOV.IDBODEGA = IBOD.IDBODEGA
			LEFT JOIN ITRA ON IMOV.CNSITRA  = ITRA.CNSITRA
		WHERE  IMOV.CNSMOV = @CNSMOV

		SELECT IMOVH.IDARTICULO, IART.DESCRIPCION, IART.CODCUM,IART.IDGENERICO, IMOVH.NOLOTEPEDIDO, IMOVH.FECHAVENCE
			, IMOVH.ESTADO,IART.REGINVIMA, IMOVH.CANTIDAD, IMOVH.CANTPEDIDA,ITRAH.TEMPETURA TEMPERATURA, IIF(ITRAH.CUMPLE=1, 'Si','No') CUMPLE
			, IIF(ITRAH.APROBADO=1, 'Si','No') APROBADO, ITRAH.CNSITRA 
			, coalesce(IFFA.DESCRIPCION,'-') FORMAFARMA, coalesce(PRES.DESCRIPCION,'-') PRESCOMERCIAL
		FROM IMOVH
			INNER JOIN IMOV ON IMOV.CNSMOV=IMOVH.CNSMOV
			INNER JOIN IART ON IMOVH.IDARTICULO = IART.IDARTICULO
			LEFT OUTER JOIN IFFA ON IFFA.IDFORFARM = IART.IDFORFARM
			LEFT OUTER JOIN  ( SELECT CODIGO , DESCRIPCION FROM TGEN WHERE TABLA='IART' AND CAMPO='PRECOMERCIAL') PRES ON IART.PRECOMERCIAL= PRES.CODIGO
			LEFT JOIN ITRAH ON ITRAH.CNSITRA=IMOV.CNSITRA AND IMOVH.IDARTICULO=ITRAH.IDARTICULO AND IMOVH.NOLOTE=ITRAH.NOLOTE
		WHERE IMOVH.CNSMOV = @CNSMOV
	END	
	IF @METODO = 'GUARDA_FABRICANTE'
	BEGIN
		SELECT @sel_IART_fab =  sel_IART_fab
	   FROM OPENJSON (@PARAMETROS)
	   WITH		 (
		sel_IART_fab		NVARCHAR(MAX) AS JSON
		)
		--ESTADO
		SELECT * INTO #sel_IART_fab FROM OPENJSON (@sel_IART_fab)
		WITH(
		IDARTICULO			VARCHAR(20)		'$.IDARTICULO'		,REGINVIMA			VARCHAR(20)		'$.REGINVIMA'
		,F_VIGENCIAINV		DATE			'$.F_VIGENCIAINV'	,DESCRIPCION		VARCHAR(250)	'$.DESCRIPCION'
		,CODCUM				VARCHAR(20)		'$.CODCUM'			,IDALTERNA			VARCHAR(20)		'$.IDALTERNA'
		,IDSERVICIO			VARCHAR(20)		'$.IDSERVICIO'		,PRINCIPAL			VARCHAR(20)		'$.PRINCIPAL'
		,IDITAR				VARCHAR(20)		'$.IDITAR'			,ESTADO				VARCHAR(20)		'$.ESTADO'
		,MCADFRIO			VARCHAR(20)		'$.MCADFRIO'		,IDFABRICANTE		VARCHAR(20)		'$.IDFABRICANTE'
		,TEMPERATURA		VARCHAR(20)		'$.TEMPERATURA'		,TESTABILIDAD		VARCHAR(20)		'$.TESTABILIDAD'
		,IUM				VARCHAR(20)		'$.IUM'				,UTILIDAD			VARCHAR(20)		'$.UTILIDAD'	)

		SELECT @IDSERVICIO = IDSERVICIO FROM #sel_IART_fab
		IF EXISTS (SELECT  * FROM IART,#sel_IART_fab  WHERE IART.IDARTICULO =#sel_IART_fab.IDARTICULO  )
         BEGIN
            INSERT INTO @TBLERRORES(ERROR) SELECT 'El Id Articulo registrado, ya existe.'
            SELECT 'KO' OK
            SELECT ERROR FROM @TBLERRORES
            RETURN
         END
			--SELECT TOP 100   *  FROM IART,#sel_IART_fab  WHERE IART.IDARTICULO = #sel_IART_fab.IDSERVICIO
		BEGIN TRY 

			INSERT INTO IART (
			IDARTICULO, IDCLASE, IDSUBCLASE, IDGRUPO, DESCRIPCION, IDPRINACTIVO, IDFORFARM, IDCONCENTRA, IDUNIDAD, STOCKMINIMO
			, STOCKMAXIMO, PUNTOREORDEN, IDITAR, ESTRANSFORMABLE
			, IDGENERICO, IDFABRICANTE, ESACTIVO, IDTIPOACTIVO, IDALTERNA, REGINVIMA, CODCUM, IDSERVICIO, PRINCIPAL
			,TESTABILIDAD, F_VIGENCIAINV, HEMOCLASIFICACION,  TEMPERATURA, IUM , MCADFRIO, ESTADO
			)
			SELECT 
			#sel_IART_fab.IDARTICULO, IART.IDCLASE, IART.IDSUBCLASE, IART.IDGRUPO, #sel_IART_fab.DESCRIPCION, IART.IDPRINACTIVO, IART.IDFORFARM, IART.IDCONCENTRA, IART.IDUNIDAD, IART.STOCKMINIMO
			, IART.STOCKMAXIMO, IART.PUNTOREORDEN, IART.IDITAR, IART.ESTRANSFORMABLE
			,IART.IDGENERICO, #sel_IART_fab.IDFABRICANTE, IART.ESACTIVO, IART.IDTIPOACTIVO, IART.IDALTERNA, #sel_IART_fab.REGINVIMA, #sel_IART_fab.CODCUM, #sel_IART_fab.IDSERVICIO, 0
			,#sel_IART_fab.TESTABILIDAD,REPLACE( #sel_IART_fab.F_VIGENCIAINV,'-',''), IART.HEMOCLASIFICACION, #sel_IART_fab.TEMPERATURA, #sel_IART_fab.IUM, CAST(#sel_IART_fab.MCADFRIO AS BIT), #sel_IART_fab.ESTADO
			FROM IART,#sel_IART_fab  WHERE IART.IDARTICULO = #sel_IART_fab.IDSERVICIO

			SELECT 'OK' AS OK

			SELECT IART.IDARTICULO, IART.DESCRIPCION, IART.REGINVIMA, IART.F_VIGENCIAINV, IART.CODCUM, IART.IDALTERNA , IART.IDSERVICIO, COALESCE(IART.PRINCIPAL,0) PRINCIPAL
				,IART.CODBARRA, IART.IDITAR, ITAR.MFECHAVENCIMIENTO, COALESCE(ITAR.MPRINCIPAL,0) MPRINCIPAL
			FROM IART 
				LEFT JOIN ITAR ON IART.IDITAR = ITAR.IDITAR
			WHERE IART.IDSERVICIO = @IDSERVICIO		ORDER BY  COALESCE(PRINCIPAL,0)  DESC
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
	IF @METODO = 'NUEVO_FABRICANTE'
	BEGIN
		SELECT @IDARTICULO =  IDARTICULO, @IDALTERNA = IDALTERNA
	   FROM OPENJSON (@PARAMETROS)
	   WITH		 ( IDARTICULO		VARCHAR(MAX) '$.IDARTICULO', IDALTERNA		VARCHAR(200) '$.IDALTERNA')
			
			IF EXISTS (SELECT 1 FROM SER WHERE IDSERVICIO = @IDALTERNA)
			BEGIN
				UPDATE IART SET IDSERVICIO = @IDALTERNA WHERE IART.IDARTICULO = @IDALTERNA AND IART.IDSERVICIO <> @IDALTERNA
			END


			SELECT @IDSERVICIO = IDSERVICIO, @DESCSERVICIO = DESCSERVICIO
			, @PROCESO = CASE WHEN COALESCE(SER.IDSERVICIO,'')='' THEN 'NO' ELSE 'SI' END  
			FROM SER WHERE IDARTICULO = @IDALTERNA 

			SELECT @CONTADOR = 1
			SELECT @IDSERVICIO_NUEVO = CONCAT(@IDSERVICIO , '-',@CONTADOR)

			WHILE EXISTS(SELECT * FROM IART WHERE IDARTICULO = @IDSERVICIO_NUEVO)
			BEGIN
				SELECT @CONTADOR = @CONTADOR+1
				SELECT @IDSERVICIO_NUEVO = CONCAT(@IDSERVICIO , '-',@CONTADOR)
			END
			SELECT 'OK' OK,@IDSERVICIO_NUEVO IDARTICULO_NEW  ,@DESCSERVICIO  DESCSERVICIO , CASE WHEN COALESCE(@PROCESO,'')='' THEN 'NO' ELSE 'SI' END  EXISTE
		
	END
	IF @METODO = 'IMOV_BORRADETA'
	BEGIN
		SELECT @CNSMOV = CNSMOV
		FROM OPENJSON (@PARAMETROS)
		WITH		 (
		CNSMOV				VARCHAR(20)			'$.CNSMOV'
		)
		IF EXISTS (SELECT * FROM IMOV WHERE  CNSMOV = @CNSMOV AND ESTADO = '1' )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro ya esta Confirmado, no se puede realizar cambios'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		IF EXISTS (SELECT * FROM IMOV WHERE  CNSMOV = @CNSMOV AND ESTADO = '2' )
		BEGIN
			INSERT INTO @TBLERRORES(ERROR) SELECT 'El registro ya esta Anulado, no se puede realizar cambios'
			SELECT 'KO' OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		BEGIN TRY 
			DELETE FROM ISAL WHERE ISAL.CNSMOV = @CNSMOV
			DELETE FROM IMOVH WHERE CNSMOV= @CNSMOV 
		END TRY
		BEGIN CATCH
			INSERT INTO @TBLERRORES(ERROR)
			SELECT ERROR_MESSAGE()
		END CATCH

		IF EXISTS(SELECT 1 FROM @TBLERRORES)
		BEGIN
			SELECT 'KO' AS OK
			SELECT ERROR FROM @TBLERRORES
			RETURN
		END
		SELECT 'OK' AS OK
		RETURN
	END
   IF @METODO='FACTURAR_IMOV'     
   BEGIN         
      SELECT @CNSMOV=CNSMOV      
      FROM   OPENJSON (@PARAMETROS)
      WITH (           
        CNSMOV  VARCHAR(20)   '$.CNSMOV'
        
      )
      IF EXISTS(SELECT * FROM IMOV WHERE CNSMOV=@CNSMOV AND COALESCE(FACTURADA,0)=0 AND COALESCE(IDTERCERO,'')<>'')
      BEGIN
         BEGIN TRY           
				PRINT 'INGRESA==========> SPK_FAC_VENTA_INV'
				EXEC SPK_FAC_VENTA_INV @CNSMOV, @COMPANIA, @SEDE, @USUARIO, 'INV'
				PRINT 'SALIO==========> SPK_FAC_VENTA_INV'                             
         END TRY
         BEGIN CATCH
                 INSERT INTO @TBLERRORES(ERROR) SELECT ERROR_MESSAGE()
         END CATCH
      END
      ELSE
      BEGIN
         INSERT INTO @TBLERRORES(ERROR)
         SELECT 'El movimiento no esta Preparado para Facturar, Verifique e intente de nuevo'
      END
      IF(SELECT COUNT(*) FROM @TBLERRORES)>0
      BEGIN
             SELECT 'KO' OK, ERROR FROM @TBLERRORES
             RETURN
      END
      SELECT 'OK' OK
      RETURN 
   END  
END
